{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DVBErrors = require('../vo/DVBErrors');\n\nvar _DVBErrors2 = _interopRequireDefault(_DVBErrors);\n\nvar _MetricsReportingEvents = require('../MetricsReportingEvents');\n\nvar _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction DVBErrorsTranslator(config) {\n  config = config || {};\n  var instance = void 0,\n      mpd = void 0;\n  var eventBus = config.eventBus;\n  var dashMetrics = config.dashMetrics;\n  var metricsConstants = config.metricsConstants; //MediaPlayerEvents have been added to Events in MediaPlayer class\n\n  var Events = config.events;\n\n  function report(vo) {\n    var o = new _DVBErrors2.default();\n\n    if (!mpd) {\n      return;\n    }\n\n    for (var key in vo) {\n      if (vo.hasOwnProperty(key)) {\n        o[key] = vo[key];\n      }\n    }\n\n    if (!o.mpdurl) {\n      o.mpdurl = mpd.originalUrl || mpd.url;\n    }\n\n    if (!o.terror) {\n      o.terror = new Date();\n    }\n\n    dashMetrics.addDVBErrors(o);\n  }\n\n  function onManifestUpdate(e) {\n    if (e.error) {\n      return;\n    }\n\n    mpd = e.manifest;\n  }\n\n  function onServiceLocationChanged(e) {\n    report({\n      errorcode: _DVBErrors2.default.BASE_URL_CHANGED,\n      servicelocation: e.entry\n    });\n  }\n\n  function onBecameReporter() {\n    report({\n      errorcode: _DVBErrors2.default.BECAME_REPORTER\n    });\n  }\n\n  function handleHttpMetric(vo) {\n    if (vo.responsecode === 0 || // connection failure - unknown\n    vo.responsecode >= 400 || // HTTP error status code\n    vo.responsecode < 100 || // unknown status codes\n    vo.responsecode >= 600) {\n      // unknown status codes\n      report({\n        errorcode: vo.responsecode || _DVBErrors2.default.CONNECTION_ERROR,\n        url: vo.url,\n        terror: vo.tresponse,\n        servicelocation: vo._serviceLocation\n      });\n    }\n  }\n\n  function onMetricEvent(e) {\n    switch (e.metric) {\n      case metricsConstants.HTTP_REQUEST:\n        handleHttpMetric(e.value);\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  function onPlaybackError(e) {\n    var reason = e.error ? e.error.code : 0;\n    var errorcode = void 0;\n\n    switch (reason) {\n      case MediaError.MEDIA_ERR_NETWORK:\n        errorcode = _DVBErrors2.default.CONNECTION_ERROR;\n        break;\n\n      case MediaError.MEDIA_ERR_DECODE:\n        errorcode = _DVBErrors2.default.CORRUPT_MEDIA_OTHER;\n        break;\n\n      default:\n        return;\n    }\n\n    report({\n      errorcode: errorcode\n    });\n  }\n\n  function initialise() {\n    eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n    eventBus.on(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance);\n    eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\n    eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\n    eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n    eventBus.on(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);\n  }\n\n  function reset() {\n    eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n    eventBus.off(Events.SERVICE_LOCATION_BLACKLIST_CHANGED, onServiceLocationChanged, instance);\n    eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\n    eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\n    eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n    eventBus.off(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER, onBecameReporter, instance);\n  }\n\n  instance = {\n    initialise: initialise,\n    reset: reset\n  };\n  initialise();\n  return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator);\n/* jshint ignore:line */","map":{"version":3,"mappings":"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","names":["DVBErrorsTranslator","config","instance","mpd","eventBus","dashMetrics","metricsConstants","Events","events","report","vo","o","DVBErrors","key","hasOwnProperty","mpdurl","originalUrl","url","terror","Date","addDVBErrors","onManifestUpdate","e","error","manifest","onServiceLocationChanged","errorcode","BASE_URL_CHANGED","servicelocation","entry","onBecameReporter","BECAME_REPORTER","handleHttpMetric","responsecode","CONNECTION_ERROR","tresponse","_serviceLocation","onMetricEvent","metric","HTTP_REQUEST","value","onPlaybackError","reason","code","MediaError","MEDIA_ERR_NETWORK","MEDIA_ERR_DECODE","CORRUPT_MEDIA_OTHER","initialise","on","MANIFEST_UPDATED","SERVICE_LOCATION_BLACKLIST_CHANGED","METRIC_ADDED","METRIC_UPDATED","PLAYBACK_ERROR","MetricsReportingEvents","BECAME_REPORTING_PLAYER","reset","off","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/utils/DVBErrorsTranslator.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport DVBErrors from '../vo/DVBErrors';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction DVBErrorsTranslator(config) {\n\n    config = config || {};\n    let instance,\n        mpd;\n    const eventBus = config.eventBus;\n    const dashMetrics = config.dashMetrics;\n    const metricsConstants = config.metricsConstants;\n    //MediaPlayerEvents have been added to Events in MediaPlayer class\n    const Events = config.events;\n\n    function report(vo) {\n        let o = new DVBErrors();\n\n        if (!mpd) {\n            return;\n        }\n\n        for (const key in vo) {\n            if (vo.hasOwnProperty(key)) {\n                o[key] = vo[key];\n            }\n        }\n\n        if (!o.mpdurl) {\n            o.mpdurl = mpd.originalUrl || mpd.url;\n        }\n\n        if (!o.terror) {\n            o.terror = new Date();\n        }\n\n        dashMetrics.addDVBErrors(o);\n    }\n\n    function onManifestUpdate(e) {\n        if (e.error) {\n            return;\n        }\n\n        mpd = e.manifest;\n    }\n\n    function onServiceLocationChanged(e) {\n        report({\n            errorcode:          DVBErrors.BASE_URL_CHANGED,\n            servicelocation:    e.entry\n        });\n    }\n\n    function onBecameReporter() {\n        report({\n            errorcode: DVBErrors.BECAME_REPORTER\n        });\n    }\n\n    function handleHttpMetric(vo) {\n        if ((vo.responsecode === 0) ||      // connection failure - unknown\n                (vo.responsecode >= 400) || // HTTP error status code\n                (vo.responsecode < 100) ||  // unknown status codes\n                (vo.responsecode >= 600)) { // unknown status codes\n            report({\n                errorcode:          vo.responsecode || DVBErrors.CONNECTION_ERROR,\n                url:                vo.url,\n                terror:             vo.tresponse,\n                servicelocation:    vo._serviceLocation\n            });\n        }\n    }\n\n    function onMetricEvent(e) {\n        switch (e.metric) {\n        case metricsConstants.HTTP_REQUEST:\n            handleHttpMetric(e.value);\n            break;\n        default:\n            break;\n        }\n    }\n\n    function onPlaybackError(e) {\n        let reason = e.error ? e.error.code : 0;\n        let errorcode;\n\n        switch (reason) {\n            case MediaError.MEDIA_ERR_NETWORK:\n                errorcode = DVBErrors.CONNECTION_ERROR;\n                break;\n            case MediaError.MEDIA_ERR_DECODE:\n                errorcode = DVBErrors.CORRUPT_MEDIA_OTHER;\n                break;\n            default:\n                return;\n        }\n\n        report({\n            errorcode: errorcode\n        });\n    }\n\n    function initialise() {\n        eventBus.on(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.on(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.on(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.on(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.on(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.on(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    function reset() {\n        eventBus.off(Events.MANIFEST_UPDATED, onManifestUpdate, instance);\n        eventBus.off(\n            Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            onServiceLocationChanged,\n            instance\n        );\n        eventBus.off(Events.METRIC_ADDED, onMetricEvent, instance);\n        eventBus.off(Events.METRIC_UPDATED, onMetricEvent, instance);\n        eventBus.off(Events.PLAYBACK_ERROR, onPlaybackError, instance);\n        eventBus.off(\n            MetricsReportingEvents.BECAME_REPORTING_PLAYER,\n            onBecameReporter,\n            instance\n        );\n    }\n\n    instance = {\n        initialise: initialise,\n        reset:      reset\n    };\n\n    initialise();\n\n    return instance;\n}\n\nDVBErrorsTranslator.__dashjs_factory_name = 'DVBErrorsTranslator';\nexport default dashjs.FactoryMaker.getSingletonFactory(DVBErrorsTranslator); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}