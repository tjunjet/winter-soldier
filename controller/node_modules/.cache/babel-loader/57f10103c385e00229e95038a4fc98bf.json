{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _SegmentBaseLoader = require('../SegmentBaseLoader');\n\nvar _SegmentBaseLoader2 = _interopRequireDefault(_SegmentBaseLoader);\n\nvar _WebmSegmentBaseLoader = require('../WebmSegmentBaseLoader');\n\nvar _WebmSegmentBaseLoader2 = _interopRequireDefault(_WebmSegmentBaseLoader);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction SegmentBaseController(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = config.eventBus;\n  var events = config.events;\n  var dashMetrics = config.dashMetrics;\n  var mediaPlayerModel = config.mediaPlayerModel;\n  var errHandler = config.errHandler;\n  var baseURLController = config.baseURLController;\n  var debug = config.debug;\n  var boxParser = config.boxParser;\n  var requestModifier = config.requestModifier;\n  var errors = config.errors;\n  var instance = void 0,\n      segmentBaseLoader = void 0,\n      webmSegmentBaseLoader = void 0;\n\n  function setup() {\n    segmentBaseLoader = (0, _SegmentBaseLoader2.default)(context).getInstance();\n    webmSegmentBaseLoader = (0, _WebmSegmentBaseLoader2.default)(context).getInstance();\n    segmentBaseLoader.setConfig({\n      baseURLController: baseURLController,\n      dashMetrics: dashMetrics,\n      mediaPlayerModel: mediaPlayerModel,\n      errHandler: errHandler,\n      eventBus: eventBus,\n      events: events,\n      errors: errors,\n      debug: debug,\n      boxParser: boxParser,\n      requestModifier: requestModifier\n    });\n    webmSegmentBaseLoader.setConfig({\n      baseURLController: baseURLController,\n      dashMetrics: dashMetrics,\n      mediaPlayerModel: mediaPlayerModel,\n      errHandler: errHandler,\n      eventBus: eventBus,\n      events: events,\n      errors: errors,\n      debug: debug,\n      requestModifier: requestModifier\n    });\n  }\n\n  function isWebM(mimeType) {\n    var type = mimeType ? mimeType.split('/')[1] : '';\n    return 'webm' === type.toLowerCase();\n  }\n\n  function initialize() {\n    eventBus.on(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\n    eventBus.on(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\n    segmentBaseLoader.initialize();\n    webmSegmentBaseLoader.initialize();\n  }\n\n  function onInitSegmentBaseNeeded(e) {\n    if (isWebM(e.mimeType)) {\n      webmSegmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\n    } else {\n      segmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\n    }\n  }\n\n  function onSegmentsListSegmentBaseNeeded(e) {\n    if (isWebM(e.mimeType)) {\n      webmSegmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\n    } else {\n      segmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\n    }\n  }\n\n  function reset() {\n    eventBus.off(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\n    eventBus.off(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nSegmentBaseController.__dashjs_factory_name = 'SegmentBaseController';\n\nvar factory = _FactoryMaker2.default.getSingletonFactory(SegmentBaseController);\n\nexports.default = factory;","map":{"version":3,"mappings":"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","names":["SegmentBaseController","config","context","eventBus","events","dashMetrics","mediaPlayerModel","errHandler","baseURLController","debug","boxParser","requestModifier","errors","instance","segmentBaseLoader","webmSegmentBaseLoader","setup","getInstance","setConfig","isWebM","mimeType","type","split","toLowerCase","initialize","on","SEGMENTBASE_INIT_REQUEST_NEEDED","onInitSegmentBaseNeeded","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","onSegmentsListSegmentBaseNeeded","e","loadInitialization","streamId","mediaType","representation","loadSegments","indexRange","callback","reset","off","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/dash/controllers/SegmentBaseController.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\n\nimport SegmentBaseLoader from '../SegmentBaseLoader';\nimport WebmSegmentBaseLoader from '../WebmSegmentBaseLoader';\n\nfunction SegmentBaseController(config) {\n    config = config || {};\n\n    const context = this.context;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const dashMetrics = config.dashMetrics;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const errHandler = config.errHandler;\n    const baseURLController = config.baseURLController;\n    const debug = config.debug;\n    const boxParser = config.boxParser;\n    const requestModifier = config.requestModifier;\n    const errors = config.errors;\n\n    let instance,\n        segmentBaseLoader,\n        webmSegmentBaseLoader;\n\n    function setup() {\n        segmentBaseLoader = SegmentBaseLoader(context).getInstance();\n        webmSegmentBaseLoader = WebmSegmentBaseLoader(context).getInstance();\n\n        segmentBaseLoader.setConfig({\n            baseURLController: baseURLController,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            errHandler: errHandler,\n            eventBus: eventBus,\n            events: events,\n            errors: errors,\n            debug: debug,\n            boxParser: boxParser,\n            requestModifier: requestModifier\n        });\n\n        webmSegmentBaseLoader.setConfig({\n            baseURLController: baseURLController,\n            dashMetrics: dashMetrics,\n            mediaPlayerModel: mediaPlayerModel,\n            errHandler: errHandler,\n            eventBus: eventBus,\n            events: events,\n            errors: errors,\n            debug: debug,\n            requestModifier: requestModifier\n        });\n    }\n\n    function isWebM(mimeType) {\n        const type = mimeType ? mimeType.split('/')[1] : '';\n        return 'webm' === type.toLowerCase();\n    }\n\n    function initialize() {\n        eventBus.on(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\n        eventBus.on(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\n\n        segmentBaseLoader.initialize();\n        webmSegmentBaseLoader.initialize();\n    }\n\n    function onInitSegmentBaseNeeded(e) {\n        if (isWebM(e.mimeType)) {\n            webmSegmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\n        } else {\n            segmentBaseLoader.loadInitialization(e.streamId, e.mediaType, e.representation);\n        }\n    }\n\n    function onSegmentsListSegmentBaseNeeded(e) {\n        if (isWebM(e.mimeType)) {\n            webmSegmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\n        } else {\n            segmentBaseLoader.loadSegments(e.streamId, e.mediaType, e.representation, e.representation ? e.representation.indexRange : null, e.callback);\n        }\n    }\n\n    function reset() {\n        eventBus.off(events.SEGMENTBASE_INIT_REQUEST_NEEDED, onInitSegmentBaseNeeded, instance);\n        eventBus.off(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, onSegmentsListSegmentBaseNeeded, instance);\n    }\n\n    instance = {\n        initialize: initialize,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nSegmentBaseController.__dashjs_factory_name = 'SegmentBaseController';\nconst factory = FactoryMaker.getSingletonFactory(SegmentBaseController);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}