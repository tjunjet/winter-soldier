{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _DashConstants = require('../constants/DashConstants');\n\nvar _DashConstants2 = _interopRequireDefault(_DashConstants);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _SimpleXPath = require('../vo/SimpleXPath');\n\nvar _SimpleXPath2 = _interopRequireDefault(_SimpleXPath);\n\nvar _PatchOperation = require('../vo/PatchOperation');\n\nvar _PatchOperation2 = _interopRequireDefault(_PatchOperation);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction PatchManifestModel() {\n  var instance = void 0,\n      logger = void 0;\n  var context = this.context;\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n  }\n\n  function getIsPatch(patch) {\n    return patch && patch.hasOwnProperty(_DashConstants2.default.ORIGINAL_MPD_ID) || false;\n  }\n\n  function getPublishTime(patch) {\n    return patch && patch.hasOwnProperty(_DashConstants2.default.PUBLISH_TIME) ? new Date(patch[_DashConstants2.default.PUBLISH_TIME]) : null;\n  }\n\n  function getOriginalPublishTime(patch) {\n    return patch && patch.hasOwnProperty(_DashConstants2.default.ORIGINAL_PUBLISH_TIME) ? new Date(patch[_DashConstants2.default.ORIGINAL_PUBLISH_TIME]) : null;\n  }\n\n  function getMpdId(patch) {\n    return patch && patch[_DashConstants2.default.ORIGINAL_MPD_ID] || null;\n  }\n\n  function getPatchOperations(patch) {\n    if (!patch) {\n      return [];\n    } // Go through the patch operations in order and parse their actions out for usage\n\n\n    return (patch.__children || []).map(function (nodeContainer) {\n      var action = Object.keys(nodeContainer)[0]; // we only look add add/remove/replace actions\n\n      if (action !== 'add' && action !== 'remove' && action !== 'replace') {\n        logger.warn('Ignoring node of invalid action: ' + action);\n        return null;\n      }\n\n      var node = nodeContainer[action];\n      var selector = node.sel; // add action can have special targeting via the 'type' attribute\n\n      if (action === 'add' && node.type) {\n        if (!node.type.startsWith('@')) {\n          logger.warn('Ignoring add action for prefixed namespace declaration: ' + node.type + '=' + node.__text);\n          return null;\n        } // for our purposes adding/replacing attribute are equivalent and we can normalize\n        // our processing logic by appending the attribute to the selector path\n\n\n        selector = selector + '/' + node.type;\n      }\n\n      var xpath = new _SimpleXPath2.default(selector);\n\n      if (!xpath.isValid()) {\n        logger.warn('Ignoring action with invalid selector: ' + action + ' - ' + selector);\n        return null;\n      }\n\n      var value = null;\n\n      if (xpath.findsAttribute()) {\n        value = node.__text || '';\n      } else if (action !== 'remove') {\n        value = node.__children.reduce(function (groups, child) {\n          // note that this is informed by xml2js parse structure for the __children array\n          // which will be something like this for each child:\n          // {\n          //     \"<node-name>\": { <xml2js-node-object> }\n          // }\n          var key = Object.keys(child)[0]; // we also ignore\n\n          if (key !== '#text') {\n            groups[key] = groups[key] || [];\n            groups[key].push(child[key]);\n          }\n\n          return groups;\n        }, {});\n      }\n\n      var operation = new _PatchOperation2.default(action, xpath, value);\n\n      if (action === 'add') {\n        operation.position = node.pos;\n      }\n\n      return operation;\n    }).filter(function (operation) {\n      return !!operation;\n    });\n  }\n\n  instance = {\n    getIsPatch: getIsPatch,\n    getPublishTime: getPublishTime,\n    getOriginalPublishTime: getOriginalPublishTime,\n    getMpdId: getMpdId,\n    getPatchOperations: getPatchOperations\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nPatchManifestModel.__dashjs_factory_name = 'PatchManifestModel';\nexports.default = _FactoryMaker2.default.getSingletonFactory(PatchManifestModel);","map":{"version":3,"mappings":"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","names":["PatchManifestModel","instance","logger","context","setup","getInstance","getLogger","getIsPatch","patch","hasOwnProperty","DashConstants","ORIGINAL_MPD_ID","getPublishTime","PUBLISH_TIME","Date","getOriginalPublishTime","ORIGINAL_PUBLISH_TIME","getMpdId","getPatchOperations","__children","map","nodeContainer","action","Object","keys","warn","node","selector","sel","type","startsWith","__text","xpath","SimpleXPath","isValid","value","findsAttribute","reduce","groups","child","key","push","operation","PatchOperation","position","pos","filter","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/dash/models/PatchManifestModel.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport DashConstants from '../constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport SimpleXPath from '../vo/SimpleXPath';\nimport PatchOperation from '../vo/PatchOperation';\n\nfunction PatchManifestModel() {\n    let instance,\n        logger;\n\n    const context = this.context;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function getIsPatch(patch) {\n        return patch && patch.hasOwnProperty(DashConstants.ORIGINAL_MPD_ID) || false;\n    }\n\n    function getPublishTime(patch) {\n        return patch && patch.hasOwnProperty(DashConstants.PUBLISH_TIME) ? new Date(patch[DashConstants.PUBLISH_TIME]) : null;\n    }\n\n    function getOriginalPublishTime(patch) {\n        return patch && patch.hasOwnProperty(DashConstants.ORIGINAL_PUBLISH_TIME) ? new Date(patch[DashConstants.ORIGINAL_PUBLISH_TIME]) : null;\n    }\n\n    function getMpdId(patch) {\n        return (patch && patch[DashConstants.ORIGINAL_MPD_ID]) || null;\n    }\n\n    function getPatchOperations(patch) {\n        if (!patch) {\n            return [];\n        }\n\n        // Go through the patch operations in order and parse their actions out for usage\n        return (patch.__children || []).map((nodeContainer) => {\n            let action = Object.keys(nodeContainer)[0];\n\n            // we only look add add/remove/replace actions\n            if (action !== 'add' && action !== 'remove' && action !== 'replace') {\n                logger.warn(`Ignoring node of invalid action: ${action}`);\n                return null;\n            }\n\n            let node = nodeContainer[action];\n            let selector = node.sel;\n\n            // add action can have special targeting via the 'type' attribute\n            if (action === 'add' && node.type) {\n                if (!node.type.startsWith('@')) {\n                    logger.warn(`Ignoring add action for prefixed namespace declaration: ${node.type}=${node.__text}`);\n                    return null;\n                }\n\n                // for our purposes adding/replacing attribute are equivalent and we can normalize\n                // our processing logic by appending the attribute to the selector path\n                selector = `${selector}/${node.type}`;\n            }\n\n            let xpath = new SimpleXPath(selector);\n            if (!xpath.isValid()) {\n                logger.warn(`Ignoring action with invalid selector: ${action} - ${selector}`);\n                return null;\n            }\n\n            let value = null;\n            if (xpath.findsAttribute()) {\n                value = node.__text || '';\n            } else if (action !== 'remove') {\n                value = node.__children.reduce((groups, child) => {\n                    // note that this is informed by xml2js parse structure for the __children array\n                    // which will be something like this for each child:\n                    // {\n                    //     \"<node-name>\": { <xml2js-node-object> }\n                    // }\n                    let key = Object.keys(child)[0];\n                    // we also ignore\n                    if (key !== '#text') {\n                        groups[key] = groups[key] || [];\n                        groups[key].push(child[key]);\n                    }\n                    return groups;\n                }, {});\n            }\n\n            let operation = new PatchOperation(action, xpath, value);\n\n            if (action === 'add') {\n                operation.position = node.pos;\n            }\n\n            return operation;\n        }).filter((operation) => !!operation);\n    }\n\n    instance = {\n        getIsPatch: getIsPatch,\n        getPublishTime: getPublishTime,\n        getOriginalPublishTime: getOriginalPublishTime,\n        getMpdId: getMpdId,\n        getPatchOperations: getPatchOperations\n    };\n\n    setup();\n\n    return instance;\n}\n\nPatchManifestModel.__dashjs_factory_name = 'PatchManifestModel';\nexport default FactoryMaker.getSingletonFactory(PatchManifestModel);\n"]},"metadata":{},"sourceType":"script"}