{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventBus = require('../../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('../../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _FactoryMaker = require('../../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _SwitchRequest = require('../SwitchRequest');\n\nvar _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);\n\nvar _Constants = require('../../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _MetricsConstants = require('../../constants/MetricsConstants');\n\nvar _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction InsufficientBufferRule(config) {\n  config = config || {};\n  var INSUFFICIENT_BUFFER_SAFETY_FACTOR = 0.5;\n  var SEGMENT_IGNORE_COUNT = 2;\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var dashMetrics = config.dashMetrics;\n  var instance = void 0,\n      logger = void 0,\n      bufferStateDict = void 0;\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n    resetInitialSettings();\n    eventBus.on(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n    eventBus.on(_Events2.default.BYTES_APPENDED_END_FRAGMENT, onEndFragment, instance);\n  }\n\n  function checkConfig() {\n    if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferLevel') || !dashMetrics.hasOwnProperty('getCurrentBufferState')) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n  /*\n  * InsufficientBufferRule does not kick in before the first BUFFER_LOADED event happens. This is reset at every seek.\n  *\n  * If a BUFFER_EMPTY event happens, then InsufficientBufferRule returns switchRequest.quality=0 until BUFFER_LOADED happens.\n  *\n  * Otherwise InsufficientBufferRule gives a maximum bitrate depending on throughput and bufferLevel such that\n  * a whole fragment can be downloaded before the buffer runs out, subject to a conservative safety factor of 0.5.\n  * If the bufferLevel is low, then InsufficientBufferRule avoids rebuffering risk.\n  * If the bufferLevel is high, then InsufficientBufferRule give a high MaxIndex allowing other rules to take over.\n  */\n\n\n  function getMaxIndex(rulesContext) {\n    var switchRequest = (0, _SwitchRequest2.default)(context).create();\n\n    if (!rulesContext || !rulesContext.hasOwnProperty('getMediaType')) {\n      return switchRequest;\n    }\n\n    checkConfig();\n    var mediaType = rulesContext.getMediaType();\n    var currentBufferState = dashMetrics.getCurrentBufferState(mediaType);\n    var representationInfo = rulesContext.getRepresentationInfo();\n    var fragmentDuration = representationInfo.fragmentDuration; // Don't ask for a bitrate change if there is not info about buffer state or if fragmentDuration is not defined\n\n    if (shouldIgnore(mediaType) || !fragmentDuration) {\n      return switchRequest;\n    }\n\n    if (currentBufferState && currentBufferState.state === _MetricsConstants2.default.BUFFER_EMPTY) {\n      logger.debug('[' + mediaType + '] Switch to index 0; buffer is empty.');\n      switchRequest.quality = 0;\n      switchRequest.reason = 'InsufficientBufferRule: Buffer is empty';\n    } else {\n      var mediaInfo = rulesContext.getMediaInfo();\n      var abrController = rulesContext.getAbrController();\n      var throughputHistory = abrController.getThroughputHistory();\n      var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n      var throughput = throughputHistory.getAverageThroughput(mediaType);\n      var latency = throughputHistory.getAverageLatency(mediaType);\n      var bitrate = throughput * (bufferLevel / fragmentDuration) * INSUFFICIENT_BUFFER_SAFETY_FACTOR;\n      switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, bitrate, latency);\n      switchRequest.reason = 'InsufficientBufferRule: being conservative to avoid immediate rebuffering';\n    }\n\n    return switchRequest;\n  }\n\n  function shouldIgnore(mediaType) {\n    return bufferStateDict[mediaType].ignoreCount > 0;\n  }\n\n  function resetInitialSettings() {\n    bufferStateDict = {};\n    bufferStateDict[_Constants2.default.VIDEO] = {\n      ignoreCount: SEGMENT_IGNORE_COUNT\n    };\n    bufferStateDict[_Constants2.default.AUDIO] = {\n      ignoreCount: SEGMENT_IGNORE_COUNT\n    };\n  }\n\n  function onPlaybackSeeking() {\n    resetInitialSettings();\n  }\n\n  function onEndFragment(e) {\n    if (!isNaN(e.startTime) && (e.mediaType === _Constants2.default.AUDIO || e.mediaType === _Constants2.default.VIDEO)) {\n      if (bufferStateDict[e.mediaType].ignoreCount > 0) {\n        bufferStateDict[e.mediaType].ignoreCount--;\n      }\n    }\n  }\n\n  function reset() {\n    resetInitialSettings();\n    eventBus.off(_Events2.default.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n    eventBus.off(_Events2.default.BYTES_APPENDED_END_FRAGMENT, onEndFragment, instance);\n  }\n\n  instance = {\n    getMaxIndex: getMaxIndex,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nInsufficientBufferRule.__dashjs_factory_name = 'InsufficientBufferRule';\nexports.default = _FactoryMaker2.default.getClassFactory(InsufficientBufferRule);","map":{"version":3,"mappings":"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","names":["InsufficientBufferRule","config","INSUFFICIENT_BUFFER_SAFETY_FACTOR","SEGMENT_IGNORE_COUNT","context","eventBus","getInstance","dashMetrics","instance","logger","bufferStateDict","setup","getLogger","resetInitialSettings","on","Events","PLAYBACK_SEEKING","onPlaybackSeeking","BYTES_APPENDED_END_FRAGMENT","onEndFragment","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getMaxIndex","rulesContext","switchRequest","create","mediaType","getMediaType","currentBufferState","getCurrentBufferState","representationInfo","getRepresentationInfo","fragmentDuration","shouldIgnore","state","MetricsConstants","BUFFER_EMPTY","debug","quality","reason","mediaInfo","getMediaInfo","abrController","getAbrController","throughputHistory","getThroughputHistory","bufferLevel","getCurrentBufferLevel","throughput","getAverageThroughput","latency","getAverageLatency","bitrate","getQualityForBitrate","ignoreCount","VIDEO","AUDIO","e","isNaN","startTime","reset","off","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/rules/abr/InsufficientBufferRule.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../../../core/EventBus';\nimport Events from '../../../core/events/Events';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest';\nimport Constants from '../../constants/Constants';\nimport MetricsConstants from '../../constants/MetricsConstants';\n\nfunction InsufficientBufferRule(config) {\n\n    config = config || {};\n    const INSUFFICIENT_BUFFER_SAFETY_FACTOR = 0.5;\n    const SEGMENT_IGNORE_COUNT = 2;\n\n    const context = this.context;\n\n    const eventBus = EventBus(context).getInstance();\n    const dashMetrics = config.dashMetrics;\n\n    let instance,\n        logger,\n        bufferStateDict;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        resetInitialSettings();\n        eventBus.on(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n        eventBus.on(Events.BYTES_APPENDED_END_FRAGMENT, onEndFragment, instance);\n    }\n\n    function checkConfig() {\n        if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferLevel') || !dashMetrics.hasOwnProperty('getCurrentBufferState')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    /*\n     * InsufficientBufferRule does not kick in before the first BUFFER_LOADED event happens. This is reset at every seek.\n     *\n     * If a BUFFER_EMPTY event happens, then InsufficientBufferRule returns switchRequest.quality=0 until BUFFER_LOADED happens.\n     *\n     * Otherwise InsufficientBufferRule gives a maximum bitrate depending on throughput and bufferLevel such that\n     * a whole fragment can be downloaded before the buffer runs out, subject to a conservative safety factor of 0.5.\n     * If the bufferLevel is low, then InsufficientBufferRule avoids rebuffering risk.\n     * If the bufferLevel is high, then InsufficientBufferRule give a high MaxIndex allowing other rules to take over.\n     */\n    function getMaxIndex(rulesContext) {\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaType')) {\n            return switchRequest;\n        }\n\n        checkConfig();\n\n        const mediaType = rulesContext.getMediaType();\n        const currentBufferState = dashMetrics.getCurrentBufferState(mediaType);\n        const representationInfo = rulesContext.getRepresentationInfo();\n        const fragmentDuration = representationInfo.fragmentDuration;\n\n        // Don't ask for a bitrate change if there is not info about buffer state or if fragmentDuration is not defined\n        if (shouldIgnore(mediaType) || !fragmentDuration) {\n            return switchRequest;\n        }\n\n        if (currentBufferState && currentBufferState.state === MetricsConstants.BUFFER_EMPTY) {\n            logger.debug('[' + mediaType + '] Switch to index 0; buffer is empty.');\n            switchRequest.quality = 0;\n            switchRequest.reason = 'InsufficientBufferRule: Buffer is empty';\n        } else {\n            const mediaInfo = rulesContext.getMediaInfo();\n            const abrController = rulesContext.getAbrController();\n            const throughputHistory = abrController.getThroughputHistory();\n\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n            const throughput = throughputHistory.getAverageThroughput(mediaType);\n            const latency = throughputHistory.getAverageLatency(mediaType);\n            const bitrate = throughput * (bufferLevel / fragmentDuration) * INSUFFICIENT_BUFFER_SAFETY_FACTOR;\n\n            switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, bitrate, latency);\n            switchRequest.reason = 'InsufficientBufferRule: being conservative to avoid immediate rebuffering';\n        }\n\n        return switchRequest;\n    }\n\n    function shouldIgnore(mediaType) {\n        return bufferStateDict[mediaType].ignoreCount > 0;\n    }\n\n    function resetInitialSettings() {\n        bufferStateDict = {};\n        bufferStateDict[Constants.VIDEO] = {ignoreCount: SEGMENT_IGNORE_COUNT};\n        bufferStateDict[Constants.AUDIO] = {ignoreCount: SEGMENT_IGNORE_COUNT};\n    }\n\n    function onPlaybackSeeking() {\n        resetInitialSettings();\n    }\n\n    function onEndFragment(e) {\n        if (!isNaN(e.startTime) && (e.mediaType === Constants.AUDIO || e.mediaType === Constants.VIDEO)) {\n            if (bufferStateDict[e.mediaType].ignoreCount > 0) {\n                bufferStateDict[e.mediaType].ignoreCount--;\n            }\n        }\n    }\n\n    function reset() {\n        resetInitialSettings();\n        eventBus.off(Events.PLAYBACK_SEEKING, onPlaybackSeeking, instance);\n        eventBus.off(Events.BYTES_APPENDED_END_FRAGMENT, onEndFragment, instance);\n    }\n\n    instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nInsufficientBufferRule.__dashjs_factory_name = 'InsufficientBufferRule';\nexport default FactoryMaker.getClassFactory(InsufficientBufferRule);\n"]},"metadata":{},"sourceType":"script"}