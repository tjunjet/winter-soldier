{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* Creates an instance of an EBMLParser class which implements a large subset\n* of the functionality required to parse Matroska EBML\n*\n* @param {Object} config object with data member which is the buffer to parse\n* @ignore\n*/\n\n\nfunction EBMLParser(config) {\n  config = config || {};\n  var instance = void 0;\n  var data = new DataView(config.data);\n  var pos = 0;\n\n  function getPos() {\n    return pos;\n  }\n\n  function setPos(value) {\n    pos = value;\n  }\n  /**\n  * Consumes an EBML tag from the data stream.\n  *\n  * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\n  * {boolean} required flag.\n  * @param {boolean} test whether or not the function should throw if a required\n  * tag is not found\n  * @return {boolean} whether or not the tag was found\n  * @throws will throw an exception if a required tag is not found and test\n  * param is false or undefined, or if the stream is malformed.\n  * @memberof EBMLParser\n  */\n\n\n  function consumeTag(tag, test) {\n    var found = true;\n    var bytesConsumed = 0;\n    var p1 = void 0,\n        p2 = void 0;\n\n    if (test === undefined) {\n      test = false;\n    }\n\n    if (tag.tag > 0xFFFFFF) {\n      if (data.getUint32(pos) !== tag.tag) {\n        found = false;\n      }\n\n      bytesConsumed = 4;\n    } else if (tag.tag > 0xFFFF) {\n      // 3 bytes\n      p1 = data.getUint16(pos);\n      p2 = data.getUint8(pos + 2); // shift p1 over a byte and add p2\n\n      if (p1 * 256 + p2 !== tag.tag) {\n        found = false;\n      }\n\n      bytesConsumed = 3;\n    } else if (tag.tag > 0xFF) {\n      if (data.getUint16(pos) !== tag.tag) {\n        found = false;\n      }\n\n      bytesConsumed = 2;\n    } else {\n      if (data.getUint8(pos) !== tag.tag) {\n        found = false;\n      }\n\n      bytesConsumed = 1;\n    }\n\n    if (!found && tag.required && !test) {\n      throw new Error('required tag not found');\n    }\n\n    if (found) {\n      pos += bytesConsumed;\n    }\n\n    return found;\n  }\n  /**\n  * Consumes an EBML tag from the data stream.   If the tag is found then this\n  * function will also remove the size field which follows the tag from the\n  * data stream.\n  *\n  * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\n  * {boolean} required flag.\n  * @param {boolean} test whether or not the function should throw if a required\n  * tag is not found\n  * @return {boolean} whether or not the tag was found\n  * @throws will throw an exception if a required tag is not found and test\n  * param is false or undefined, or if the stream is malformedata.\n  * @memberof EBMLParser\n  */\n\n\n  function consumeTagAndSize(tag, test) {\n    var found = consumeTag(tag, test);\n\n    if (found) {\n      getMatroskaCodedNum();\n    }\n\n    return found;\n  }\n  /**\n  * Consumes an EBML tag from the data stream.   If the tag is found then this\n  * function will also remove the size field which follows the tag from the\n  * data stream.  It will use the value of the size field to parse a binary\n  * field, using a parser defined in the tag itself\n  *\n  * @param {Object} tag to parse, A tag is an object with at least a {number} tag,\n  * {boolean} required flag, and a parse function which takes a size parameter\n  * @return {boolean} whether or not the tag was found\n  * @throws will throw an exception if a required tag is not found,\n  * or if the stream is malformed\n  * @memberof EBMLParser\n  */\n\n\n  function parseTag(tag) {\n    var size = void 0;\n    consumeTag(tag);\n    size = getMatroskaCodedNum();\n    return instance[tag.parse](size);\n  }\n  /**\n  * Consumes an EBML tag from the data stream.   If the tag is found then this\n  * function will also remove the size field which follows the tag from the\n  * data stream.  It will use the value of the size field to skip over the\n  * entire section of EBML encapsulated by the tag.\n  *\n  * @param {Object} tag to parse, A tag is an object with at least a {number} tag, and\n  * {boolean} required flag\n  * @param {boolean} test a flag to indicate if an exception should be thrown\n  * if a required tag is not found\n  * @return {boolean} whether or not the tag was found\n  * @throws will throw an exception if a required tag is not found and test is\n  * false or undefined or if the stream is malformed\n  * @memberof EBMLParser\n  */\n\n\n  function skipOverElement(tag, test) {\n    var found = consumeTag(tag, test);\n    var headerSize = void 0;\n\n    if (found) {\n      headerSize = getMatroskaCodedNum();\n      pos += headerSize;\n    }\n\n    return found;\n  }\n  /**\n  * Returns and consumes a number encoded according to the Matroska EBML\n  * specification from the bitstream.\n  *\n  * @param {boolean} retainMSB whether or not to retain the Most Significant Bit (the\n  * first 1). this is usually true when reading Tag IDs.\n  * @return {number} the decoded number\n  * @throws will throw an exception if the bit stream is malformed or there is\n  * not enough data\n  * @memberof EBMLParser\n  */\n\n\n  function getMatroskaCodedNum(retainMSB) {\n    var bytesUsed = 1;\n    var mask = 0x80;\n    var maxBytes = 8;\n    var extraBytes = -1;\n    var num = 0;\n    var ch = data.getUint8(pos);\n    var i = 0;\n\n    for (i = 0; i < maxBytes; i += 1) {\n      if ((ch & mask) === mask) {\n        num = retainMSB === undefined ? ch & ~mask : ch;\n        extraBytes = i;\n        break;\n      }\n\n      mask >>= 1;\n    }\n\n    for (i = 0; i < extraBytes; i += 1, bytesUsed += 1) {\n      num = num << 8 | 0xff & data.getUint8(pos + bytesUsed);\n    }\n\n    pos += bytesUsed;\n    return num;\n  }\n  /**\n  * Returns and consumes a float from the bitstream.\n  *\n  * @param {number} size 4 or 8 byte floats are supported\n  * @return {number} the decoded number\n  * @throws will throw an exception if the bit stream is malformed or there is\n  * not enough data\n  * @memberof EBMLParser\n  */\n\n\n  function getMatroskaFloat(size) {\n    var outFloat = void 0;\n\n    switch (size) {\n      case 4:\n        outFloat = data.getFloat32(pos);\n        pos += 4;\n        break;\n\n      case 8:\n        outFloat = data.getFloat64(pos);\n        pos += 8;\n        break;\n    }\n\n    return outFloat;\n  }\n  /**\n  * Consumes and returns an unsigned int from the bitstream.\n  *\n  * @param {number} size 1 to 8 bytes\n  * @return {number} the decoded number\n  * @throws will throw an exception if the bit stream is malformed or there is\n  * not enough data\n  * @memberof EBMLParser\n  */\n\n\n  function getMatroskaUint(size) {\n    var val = 0;\n\n    for (var i = 0; i < size; i += 1) {\n      val <<= 8;\n      val |= data.getUint8(pos + i) & 0xff;\n    }\n\n    pos += size;\n    return val;\n  }\n  /**\n  * Tests whether there is more data in the bitstream for parsing\n  *\n  * @return {boolean} whether there is more data to parse\n  * @memberof EBMLParser\n  */\n\n\n  function moreData() {\n    return pos < data.byteLength;\n  }\n\n  instance = {\n    getPos: getPos,\n    setPos: setPos,\n    consumeTag: consumeTag,\n    consumeTagAndSize: consumeTagAndSize,\n    parseTag: parseTag,\n    skipOverElement: skipOverElement,\n    getMatroskaCodedNum: getMatroskaCodedNum,\n    getMatroskaFloat: getMatroskaFloat,\n    getMatroskaUint: getMatroskaUint,\n    moreData: moreData\n  };\n  return instance;\n}\n\nEBMLParser.__dashjs_factory_name = 'EBMLParser';\nexports.default = _FactoryMaker2.default.getClassFactory(EBMLParser);","map":{"version":3,"mappings":"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","names":["EBMLParser","config","instance","data","DataView","pos","getPos","setPos","value","consumeTag","tag","test","found","bytesConsumed","p1","p2","undefined","getUint32","getUint16","getUint8","required","Error","consumeTagAndSize","getMatroskaCodedNum","parseTag","size","parse","skipOverElement","headerSize","retainMSB","bytesUsed","mask","maxBytes","extraBytes","num","ch","i","getMatroskaFloat","outFloat","getFloat32","getFloat64","getMatroskaUint","val","moreData","byteLength","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/utils/EBMLParser.js"],"sourcesContent":["import FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * Creates an instance of an EBMLParser class which implements a large subset\n * of the functionality required to parse Matroska EBML\n *\n * @param {Object} config object with data member which is the buffer to parse\n * @ignore\n */\nfunction EBMLParser(config) {\n\n    config = config || {};\n    let instance;\n\n    let data = new DataView(config.data);\n    let pos = 0;\n\n    function getPos() {\n        return pos;\n    }\n\n    function setPos(value) {\n        pos = value;\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\n     * {boolean} required flag.\n     * @param {boolean} test whether or not the function should throw if a required\n     * tag is not found\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found and test\n     * param is false or undefined, or if the stream is malformed.\n     * @memberof EBMLParser\n     */\n    function consumeTag(tag, test) {\n        let found = true;\n        let bytesConsumed = 0;\n        let p1,\n            p2;\n\n        if (test === undefined) {\n            test = false;\n        }\n\n        if (tag.tag > 0xFFFFFF) {\n            if (data.getUint32(pos) !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 4;\n        } else if (tag.tag > 0xFFFF) {\n            // 3 bytes\n            p1 = data.getUint16(pos);\n            p2 = data.getUint8(pos + 2);\n\n            // shift p1 over a byte and add p2\n            if (p1 * 256 + p2 !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 3;\n        } else if (tag.tag > 0xFF) {\n            if (data.getUint16(pos) !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 2;\n        } else {\n            if (data.getUint8(pos) !== tag.tag) {\n                found = false;\n            }\n            bytesConsumed = 1;\n        }\n\n        if (!found && tag.required && !test) {\n            throw new Error('required tag not found');\n        }\n\n        if (found) {\n            pos += bytesConsumed;\n        }\n\n        return found;\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\n     * function will also remove the size field which follows the tag from the\n     * data stream.\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag and\n     * {boolean} required flag.\n     * @param {boolean} test whether or not the function should throw if a required\n     * tag is not found\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found and test\n     * param is false or undefined, or if the stream is malformedata.\n     * @memberof EBMLParser\n     */\n    function consumeTagAndSize(tag, test) {\n        let found = consumeTag(tag, test);\n\n        if (found) {\n            getMatroskaCodedNum();\n        }\n\n        return found;\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\n     * function will also remove the size field which follows the tag from the\n     * data stream.  It will use the value of the size field to parse a binary\n     * field, using a parser defined in the tag itself\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag,\n     * {boolean} required flag, and a parse function which takes a size parameter\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found,\n     * or if the stream is malformed\n     * @memberof EBMLParser\n     */\n    function parseTag(tag) {\n        let size;\n\n        consumeTag(tag);\n        size = getMatroskaCodedNum();\n        return instance[tag.parse](size);\n    }\n\n    /**\n     * Consumes an EBML tag from the data stream.   If the tag is found then this\n     * function will also remove the size field which follows the tag from the\n     * data stream.  It will use the value of the size field to skip over the\n     * entire section of EBML encapsulated by the tag.\n     *\n     * @param {Object} tag to parse, A tag is an object with at least a {number} tag, and\n     * {boolean} required flag\n     * @param {boolean} test a flag to indicate if an exception should be thrown\n     * if a required tag is not found\n     * @return {boolean} whether or not the tag was found\n     * @throws will throw an exception if a required tag is not found and test is\n     * false or undefined or if the stream is malformed\n     * @memberof EBMLParser\n     */\n    function skipOverElement(tag, test) {\n        let found = consumeTag(tag, test);\n        let headerSize;\n\n        if (found) {\n            headerSize = getMatroskaCodedNum();\n            pos += headerSize;\n        }\n\n        return found;\n    }\n\n    /**\n     * Returns and consumes a number encoded according to the Matroska EBML\n     * specification from the bitstream.\n     *\n     * @param {boolean} retainMSB whether or not to retain the Most Significant Bit (the\n     * first 1). this is usually true when reading Tag IDs.\n     * @return {number} the decoded number\n     * @throws will throw an exception if the bit stream is malformed or there is\n     * not enough data\n     * @memberof EBMLParser\n     */\n    function getMatroskaCodedNum(retainMSB) {\n        let bytesUsed = 1;\n        let mask = 0x80;\n        let maxBytes = 8;\n        let extraBytes = -1;\n        let num = 0;\n        let ch = data.getUint8(pos);\n        let i = 0;\n\n        for (i = 0; i < maxBytes; i += 1) {\n            if ((ch & mask) === mask) {\n                num = (retainMSB === undefined) ? ch & ~mask : ch;\n                extraBytes = i;\n                break;\n            }\n            mask >>= 1;\n        }\n\n        for (i = 0; i < extraBytes; i += 1, bytesUsed += 1) {\n            num = (num << 8) | (0xff & data.getUint8(pos + bytesUsed));\n        }\n\n        pos += bytesUsed;\n\n        return num;\n    }\n\n    /**\n     * Returns and consumes a float from the bitstream.\n     *\n     * @param {number} size 4 or 8 byte floats are supported\n     * @return {number} the decoded number\n     * @throws will throw an exception if the bit stream is malformed or there is\n     * not enough data\n     * @memberof EBMLParser\n     */\n    function getMatroskaFloat(size) {\n        let outFloat;\n\n        switch (size) {\n        case 4:\n            outFloat = data.getFloat32(pos);\n            pos += 4;\n            break;\n        case 8:\n            outFloat = data.getFloat64(pos);\n            pos += 8;\n            break;\n        }\n        return outFloat;\n    }\n\n    /**\n     * Consumes and returns an unsigned int from the bitstream.\n     *\n     * @param {number} size 1 to 8 bytes\n     * @return {number} the decoded number\n     * @throws will throw an exception if the bit stream is malformed or there is\n     * not enough data\n     * @memberof EBMLParser\n     */\n    function getMatroskaUint(size) {\n        let val = 0;\n\n        for (let i = 0; i < size; i += 1) {\n            val <<= 8;\n            val |= data.getUint8(pos + i) & 0xff;\n        }\n\n        pos += size;\n        return val;\n    }\n\n    /**\n     * Tests whether there is more data in the bitstream for parsing\n     *\n     * @return {boolean} whether there is more data to parse\n     * @memberof EBMLParser\n     */\n    function moreData() {\n        return pos < data.byteLength;\n    }\n\n    instance = {\n        getPos: getPos,\n        setPos: setPos,\n        consumeTag: consumeTag,\n        consumeTagAndSize: consumeTagAndSize,\n        parseTag: parseTag,\n        skipOverElement: skipOverElement,\n        getMatroskaCodedNum: getMatroskaCodedNum,\n        getMatroskaFloat: getMatroskaFloat,\n        getMatroskaUint: getMatroskaUint,\n        moreData: moreData\n    };\n\n    return instance;\n}\n\nEBMLParser.__dashjs_factory_name = 'EBMLParser';\nexport default FactoryMaker.getClassFactory(EBMLParser);"]},"metadata":{},"sourceType":"script"}