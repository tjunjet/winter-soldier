{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _TimelineSegmentsGetter = require('../utils/TimelineSegmentsGetter');\n\nvar _TimelineSegmentsGetter2 = _interopRequireDefault(_TimelineSegmentsGetter);\n\nvar _TemplateSegmentsGetter = require('../utils/TemplateSegmentsGetter');\n\nvar _TemplateSegmentsGetter2 = _interopRequireDefault(_TemplateSegmentsGetter);\n\nvar _ListSegmentsGetter = require('../utils/ListSegmentsGetter');\n\nvar _ListSegmentsGetter2 = _interopRequireDefault(_ListSegmentsGetter);\n\nvar _SegmentBaseGetter = require('../utils/SegmentBaseGetter');\n\nvar _SegmentBaseGetter2 = _interopRequireDefault(_SegmentBaseGetter);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction SegmentsController(config) {\n  config = config || {};\n  var context = this.context;\n  var events = config.events;\n  var eventBus = config.eventBus;\n  var dashConstants = config.dashConstants;\n  var streamInfo = config.streamInfo;\n  var type = config.type;\n  var instance = void 0,\n      getters = void 0;\n\n  function setup() {\n    getters = {};\n  }\n\n  function initialize(isDynamic) {\n    getters[dashConstants.SEGMENT_TIMELINE] = (0, _TimelineSegmentsGetter2.default)(context).create(config, isDynamic);\n    getters[dashConstants.SEGMENT_TEMPLATE] = (0, _TemplateSegmentsGetter2.default)(context).create(config, isDynamic);\n    getters[dashConstants.SEGMENT_LIST] = (0, _ListSegmentsGetter2.default)(context).create(config, isDynamic);\n    getters[dashConstants.SEGMENT_BASE] = (0, _SegmentBaseGetter2.default)(context).create(config, isDynamic);\n  }\n\n  function update(voRepresentation, mimeType, hasInitialization, hasSegments) {\n    if (!hasInitialization) {\n      eventBus.trigger(events.SEGMENTBASE_INIT_REQUEST_NEEDED, {\n        streamId: streamInfo.id,\n        mediaType: type,\n        mimeType: mimeType,\n        representation: voRepresentation\n      });\n    }\n\n    if (!hasSegments) {\n      eventBus.trigger(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\n        streamId: streamInfo.id,\n        mediaType: type,\n        mimeType: mimeType,\n        representation: voRepresentation\n      });\n    }\n  }\n\n  function getSegmentsGetter(representation) {\n    return representation ? representation.segments ? getters[dashConstants.SEGMENT_BASE] : getters[representation.segmentInfoType] : null;\n  }\n\n  function getSegmentByIndex(representation, index, lastSegmentTime) {\n    var getter = getSegmentsGetter(representation);\n    return getter ? getter.getSegmentByIndex(representation, index, lastSegmentTime) : null;\n  }\n\n  function getSegmentByTime(representation, time) {\n    var getter = getSegmentsGetter(representation);\n    return getter ? getter.getSegmentByTime(representation, time) : null;\n  }\n\n  instance = {\n    initialize: initialize,\n    update: update,\n    getSegmentByIndex: getSegmentByIndex,\n    getSegmentByTime: getSegmentByTime\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nSegmentsController.__dashjs_factory_name = 'SegmentsController';\n\nvar factory = _FactoryMaker2.default.getClassFactory(SegmentsController);\n\nexports.default = factory;","map":{"version":3,"mappings":"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","names":["SegmentsController","config","context","events","eventBus","dashConstants","streamInfo","type","instance","getters","setup","initialize","isDynamic","SEGMENT_TIMELINE","create","SEGMENT_TEMPLATE","SEGMENT_LIST","SEGMENT_BASE","update","voRepresentation","mimeType","hasInitialization","hasSegments","trigger","SEGMENTBASE_INIT_REQUEST_NEEDED","streamId","id","mediaType","representation","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","getSegmentsGetter","segments","segmentInfoType","getSegmentByIndex","index","lastSegmentTime","getter","getSegmentByTime","time","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/dash/controllers/SegmentsController.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport TimelineSegmentsGetter from '../utils/TimelineSegmentsGetter';\nimport TemplateSegmentsGetter from '../utils/TemplateSegmentsGetter';\nimport ListSegmentsGetter from '../utils/ListSegmentsGetter';\nimport SegmentBaseGetter from '../utils/SegmentBaseGetter';\n\nfunction SegmentsController(config) {\n    config = config || {};\n\n    const context = this.context;\n    const events = config.events;\n    const eventBus = config.eventBus;\n    const dashConstants = config.dashConstants;\n    const streamInfo = config.streamInfo;\n    const type = config.type;\n\n    let instance,\n        getters;\n\n    function setup() {\n        getters = {};\n    }\n\n    function initialize(isDynamic) {\n        getters[dashConstants.SEGMENT_TIMELINE] = TimelineSegmentsGetter(context).create(config, isDynamic);\n        getters[dashConstants.SEGMENT_TEMPLATE] = TemplateSegmentsGetter(context).create(config, isDynamic);\n        getters[dashConstants.SEGMENT_LIST] = ListSegmentsGetter(context).create(config, isDynamic);\n        getters[dashConstants.SEGMENT_BASE] = SegmentBaseGetter(context).create(config, isDynamic);\n    }\n\n    function update(voRepresentation, mimeType, hasInitialization, hasSegments) {\n        if (!hasInitialization) {\n            eventBus.trigger(events.SEGMENTBASE_INIT_REQUEST_NEEDED, {\n                streamId: streamInfo.id,\n                mediaType: type,\n                mimeType: mimeType,\n                representation: voRepresentation\n            });\n        }\n\n        if (!hasSegments) {\n            eventBus.trigger(events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\n                streamId: streamInfo.id,\n                mediaType: type,\n                mimeType: mimeType,\n                representation: voRepresentation\n            });\n        }\n    }\n\n    function getSegmentsGetter(representation) {\n        return representation ? representation.segments ? getters[dashConstants.SEGMENT_BASE] : getters[representation.segmentInfoType] : null;\n    }\n\n    function getSegmentByIndex(representation, index, lastSegmentTime) {\n        const getter = getSegmentsGetter(representation);\n        return getter ? getter.getSegmentByIndex(representation, index, lastSegmentTime) : null;\n    }\n\n    function getSegmentByTime(representation, time) {\n        const getter = getSegmentsGetter(representation);\n        return getter ? getter.getSegmentByTime(representation, time) : null;\n    }\n\n    instance = {\n        initialize: initialize,\n        update: update,\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    setup();\n\n    return instance;\n}\n\nSegmentsController.__dashjs_factory_name = 'SegmentsController';\nconst factory = FactoryMaker.getClassFactory(SegmentsController);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}