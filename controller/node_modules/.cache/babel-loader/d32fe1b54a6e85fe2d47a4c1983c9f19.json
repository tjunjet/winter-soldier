{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _SwitchRequest = require('../SwitchRequest');\n\nvar _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);\n\nvar _FactoryMaker = require('../../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction AbandonRequestsRule(config) {\n  config = config || {};\n  var ABANDON_MULTIPLIER = 1.8;\n  var GRACE_TIME_THRESHOLD = 500;\n  var MIN_LENGTH_TO_AVERAGE = 5;\n  var context = this.context;\n  var mediaPlayerModel = config.mediaPlayerModel;\n  var dashMetrics = config.dashMetrics;\n  var settings = config.settings;\n  var instance = void 0,\n      logger = void 0,\n      fragmentDict = void 0,\n      abandonDict = void 0,\n      throughputArray = void 0;\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n    reset();\n  }\n\n  function setFragmentRequestDict(type, id) {\n    fragmentDict[type] = fragmentDict[type] || {};\n    fragmentDict[type][id] = fragmentDict[type][id] || {};\n  }\n\n  function storeLastRequestThroughputByType(type, throughput) {\n    throughputArray[type] = throughputArray[type] || [];\n    throughputArray[type].push(throughput);\n  }\n\n  function shouldAbandon(rulesContext) {\n    var switchRequest = (0, _SwitchRequest2.default)(context).create(_SwitchRequest2.default.NO_CHANGE, {\n      name: AbandonRequestsRule.__dashjs_factory_name\n    });\n\n    if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('getCurrentRequest') || !rulesContext.hasOwnProperty('getRepresentationInfo') || !rulesContext.hasOwnProperty('getAbrController')) {\n      return switchRequest;\n    }\n\n    var mediaInfo = rulesContext.getMediaInfo();\n    var mediaType = rulesContext.getMediaType();\n    var req = rulesContext.getCurrentRequest();\n\n    if (!isNaN(req.index)) {\n      setFragmentRequestDict(mediaType, req.index);\n      var stableBufferTime = mediaPlayerModel.getStableBufferTime();\n      var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n      if (bufferLevel > stableBufferTime) {\n        return switchRequest;\n      }\n\n      var fragmentInfo = fragmentDict[mediaType][req.index];\n\n      if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {\n        return switchRequest;\n      } //setup some init info based on first progress event\n\n\n      if (fragmentInfo.firstByteTime === undefined) {\n        throughputArray[mediaType] = [];\n        fragmentInfo.firstByteTime = req.firstByteDate.getTime();\n        fragmentInfo.segmentDuration = req.duration;\n        fragmentInfo.bytesTotal = req.bytesTotal;\n        fragmentInfo.id = req.index;\n      }\n\n      fragmentInfo.bytesLoaded = req.bytesLoaded;\n      fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;\n\n      if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {\n        storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));\n      }\n\n      if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE && fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD && fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {\n        var totalSampledValue = throughputArray[mediaType].reduce(function (a, b) {\n          return a + b;\n        }, 0);\n        fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);\n        fragmentInfo.estimatedTimeOfDownload = +(fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps / 1000).toFixed(2);\n\n        if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0) {\n          return switchRequest;\n        } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {\n          var abrController = rulesContext.getAbrController();\n          var bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;\n          var bitrateList = abrController.getBitrateList(mediaInfo);\n          var quality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * settings.get().streaming.abr.bandwidthSafetyFactor);\n          var minQuality = abrController.getMinAllowedIndexFor(mediaType);\n          var newQuality = minQuality !== undefined ? Math.max(minQuality, quality) : quality;\n          var estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType)].bitrate;\n\n          if (bytesRemaining > estimateOtherBytesTotal) {\n            switchRequest.quality = newQuality;\n            switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;\n            switchRequest.reason.fragmentID = fragmentInfo.id;\n            abandonDict[fragmentInfo.id] = fragmentInfo;\n            logger.debug('[' + mediaType + '] frag id', fragmentInfo.id, ' is asking to abandon and switch to quality to ', newQuality, ' measured bandwidth was', fragmentInfo.measuredBandwidthInKbps);\n            delete fragmentDict[mediaType][fragmentInfo.id];\n          }\n        }\n      } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {\n        delete fragmentDict[mediaType][fragmentInfo.id];\n      }\n    }\n\n    return switchRequest;\n  }\n\n  function reset() {\n    fragmentDict = {};\n    abandonDict = {};\n    throughputArray = [];\n  }\n\n  instance = {\n    shouldAbandon: shouldAbandon,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nAbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';\nexports.default = _FactoryMaker2.default.getClassFactory(AbandonRequestsRule);","map":{"version":3,"mappings":"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","names":["AbandonRequestsRule","config","ABANDON_MULTIPLIER","GRACE_TIME_THRESHOLD","MIN_LENGTH_TO_AVERAGE","context","mediaPlayerModel","dashMetrics","settings","instance","logger","fragmentDict","abandonDict","throughputArray","setup","getInstance","getLogger","reset","setFragmentRequestDict","type","id","storeLastRequestThroughputByType","throughput","push","shouldAbandon","rulesContext","switchRequest","create","SwitchRequest","NO_CHANGE","name","__dashjs_factory_name","hasOwnProperty","mediaInfo","getMediaInfo","mediaType","getMediaType","req","getCurrentRequest","isNaN","index","stableBufferTime","getStableBufferTime","bufferLevel","getCurrentBufferLevel","fragmentInfo","firstByteDate","firstByteTime","undefined","getTime","segmentDuration","duration","bytesTotal","bytesLoaded","elapsedTime","Date","Math","round","length","totalSampledValue","reduce","a","b","measuredBandwidthInKbps","estimatedTimeOfDownload","toFixed","getRepresentationInfo","quality","abrController","getAbrController","bytesRemaining","bitrateList","getBitrateList","getQualityForBitrate","get","streaming","abr","bandwidthSafetyFactor","minQuality","getMinAllowedIndexFor","newQuality","max","estimateOtherBytesTotal","bitrate","getQualityFor","reason","fragmentID","debug","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/rules/abr/AbandonRequestsRule.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport SwitchRequest from '../SwitchRequest';\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\n\nfunction AbandonRequestsRule(config) {\n\n    config = config || {};\n    const ABANDON_MULTIPLIER = 1.8;\n    const GRACE_TIME_THRESHOLD = 500;\n    const MIN_LENGTH_TO_AVERAGE = 5;\n\n    const context = this.context;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const dashMetrics = config.dashMetrics;\n    const settings = config.settings;\n\n    let instance,\n        logger,\n        fragmentDict,\n        abandonDict,\n        throughputArray;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        reset();\n    }\n\n    function setFragmentRequestDict(type, id) {\n        fragmentDict[type] = fragmentDict[type] || {};\n        fragmentDict[type][id] = fragmentDict[type][id] || {};\n    }\n\n    function storeLastRequestThroughputByType(type, throughput) {\n        throughputArray[type] = throughputArray[type] || [];\n        throughputArray[type].push(throughput);\n    }\n\n    function shouldAbandon(rulesContext) {\n        const switchRequest = SwitchRequest(context).create(SwitchRequest.NO_CHANGE, {name: AbandonRequestsRule.__dashjs_factory_name});\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('getCurrentRequest') ||\n            !rulesContext.hasOwnProperty('getRepresentationInfo') || !rulesContext.hasOwnProperty('getAbrController')) {\n            return switchRequest;\n        }\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const req = rulesContext.getCurrentRequest();\n\n        if (!isNaN(req.index)) {\n            setFragmentRequestDict(mediaType, req.index);\n\n            const stableBufferTime = mediaPlayerModel.getStableBufferTime();\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n            if ( bufferLevel > stableBufferTime ) {\n                return switchRequest;\n            }\n\n            const fragmentInfo = fragmentDict[mediaType][req.index];\n            if (fragmentInfo === null || req.firstByteDate === null || abandonDict.hasOwnProperty(fragmentInfo.id)) {\n                return switchRequest;\n            }\n\n            //setup some init info based on first progress event\n            if (fragmentInfo.firstByteTime === undefined) {\n                throughputArray[mediaType] = [];\n                fragmentInfo.firstByteTime = req.firstByteDate.getTime();\n                fragmentInfo.segmentDuration = req.duration;\n                fragmentInfo.bytesTotal = req.bytesTotal;\n                fragmentInfo.id = req.index;\n            }\n            fragmentInfo.bytesLoaded = req.bytesLoaded;\n            fragmentInfo.elapsedTime = new Date().getTime() - fragmentInfo.firstByteTime;\n\n            if (fragmentInfo.bytesLoaded > 0 && fragmentInfo.elapsedTime > 0) {\n                storeLastRequestThroughputByType(mediaType, Math.round(fragmentInfo.bytesLoaded * 8 / fragmentInfo.elapsedTime));\n            }\n\n            if (throughputArray[mediaType].length >= MIN_LENGTH_TO_AVERAGE &&\n                fragmentInfo.elapsedTime > GRACE_TIME_THRESHOLD &&\n                fragmentInfo.bytesLoaded < fragmentInfo.bytesTotal) {\n\n                const totalSampledValue = throughputArray[mediaType].reduce((a, b) => a + b, 0);\n                fragmentInfo.measuredBandwidthInKbps = Math.round(totalSampledValue / throughputArray[mediaType].length);\n                fragmentInfo.estimatedTimeOfDownload = +((fragmentInfo.bytesTotal * 8 / fragmentInfo.measuredBandwidthInKbps) / 1000).toFixed(2);\n\n                if (fragmentInfo.estimatedTimeOfDownload < fragmentInfo.segmentDuration * ABANDON_MULTIPLIER || rulesContext.getRepresentationInfo().quality === 0 ) {\n                    return switchRequest;\n                } else if (!abandonDict.hasOwnProperty(fragmentInfo.id)) {\n\n                    const abrController = rulesContext.getAbrController();\n                    const bytesRemaining = fragmentInfo.bytesTotal - fragmentInfo.bytesLoaded;\n                    const bitrateList = abrController.getBitrateList(mediaInfo);\n                    const quality = abrController.getQualityForBitrate(mediaInfo, fragmentInfo.measuredBandwidthInKbps * settings.get().streaming.abr.bandwidthSafetyFactor);\n                    const minQuality = abrController.getMinAllowedIndexFor(mediaType);\n                    const newQuality = (minQuality !== undefined) ? Math.max(minQuality, quality) : quality;\n                    const estimateOtherBytesTotal = fragmentInfo.bytesTotal * bitrateList[newQuality].bitrate / bitrateList[abrController.getQualityFor(mediaType)].bitrate;\n\n                    if (bytesRemaining > estimateOtherBytesTotal) {\n                        switchRequest.quality = newQuality;\n                        switchRequest.reason.throughput = fragmentInfo.measuredBandwidthInKbps;\n                        switchRequest.reason.fragmentID = fragmentInfo.id;\n                        abandonDict[fragmentInfo.id] = fragmentInfo;\n                        logger.debug('[' + mediaType + '] frag id',fragmentInfo.id,' is asking to abandon and switch to quality to ', newQuality, ' measured bandwidth was', fragmentInfo.measuredBandwidthInKbps);\n                        delete fragmentDict[mediaType][fragmentInfo.id];\n                    }\n                }\n            } else if (fragmentInfo.bytesLoaded === fragmentInfo.bytesTotal) {\n                delete fragmentDict[mediaType][fragmentInfo.id];\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        fragmentDict = {};\n        abandonDict = {};\n        throughputArray = [];\n    }\n\n    instance = {\n        shouldAbandon: shouldAbandon,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nAbandonRequestsRule.__dashjs_factory_name = 'AbandonRequestsRule';\nexport default FactoryMaker.getClassFactory(AbandonRequestsRule);\n"]},"metadata":{},"sourceType":"script"}