{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _KeyPair = require('../vo/KeyPair');\n\nvar _KeyPair2 = _interopRequireDefault(_KeyPair);\n\nvar _ClearKeyKeySet = require('../vo/ClearKeyKeySet');\n\nvar _ClearKeyKeySet2 = _interopRequireDefault(_ClearKeyKeySet);\n\nvar _CommonEncryption = require('../CommonEncryption');\n\nvar _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);\n\nvar _ProtectionConstants = require('../../constants/ProtectionConstants');\n\nvar _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nvar uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nvar systemString = _ProtectionConstants2.default.CLEARKEY_KEYSTEM_STRING;\nvar schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n  var instance = void 0;\n  var BASE64 = config.BASE64;\n  var logger = config.debug.getLogger(instance);\n  /**\n  * Returns desired clearkeys (as specified in the CDM message) from protection data\n  *\n  * @param {ProtectionDataSet} protectionData the protection data\n  * @param {ArrayBuffer} message the ClearKey CDM message\n  * @returns {ClearKeyKeySet} the key set or null if none found\n  * @throws {Error} if a keyID specified in the CDM message was not found in the\n  * protection data\n  * @memberof KeySystemClearKey\n  */\n\n  function getClearKeysFromProtectionData(protectionData, message) {\n    var clearkeySet = null;\n\n    if (protectionData) {\n      // ClearKey is the only system that does not require a license server URL, so we\n      // handle it here when keys are specified in protection data\n      var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n      var keyPairs = [];\n\n      for (var i = 0; i < jsonMsg.kids.length; i++) {\n        var clearkeyID = jsonMsg.kids[i];\n        var clearkey = protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID) ? protectionData.clearkeys[clearkeyID] : null;\n\n        if (!clearkey) {\n          throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n        } // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n\n\n        keyPairs.push(new _KeyPair2.default(clearkeyID, clearkey));\n      }\n\n      clearkeySet = new _ClearKeyKeySet2.default(keyPairs);\n      logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n    }\n\n    return clearkeySet;\n  }\n\n  function getInitData(cp) {\n    return _CommonEncryption2.default.parseInitDataFromContentProtection(cp, BASE64);\n  }\n\n  function getRequestHeadersFromMessage()\n  /*message*/\n  {\n    return null;\n  }\n\n  function getLicenseRequestFromMessage(message) {\n    return new Uint8Array(message);\n  }\n\n  function getLicenseServerURLFromInitData()\n  /*initData*/\n  {\n    return null;\n  }\n\n  function getCDMData() {\n    return null;\n  }\n\n  function getSessionId()\n  /*cp*/\n  {\n    return null;\n  }\n\n  instance = {\n    uuid: uuid,\n    schemeIdURI: schemeIdURI,\n    systemString: systemString,\n    getInitData: getInitData,\n    getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n    getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n    getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n    getCDMData: getCDMData,\n    getSessionId: getSessionId,\n    getClearKeysFromProtectionData: getClearKeysFromProtectionData\n  };\n  return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey);\n/* jshint ignore:line */","map":{"version":3,"mappings":";;;;;;AA+BA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAlCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,IAAMA,OAAO,sCAAb;AACA,IAAMC,eAAeC,8BAAoBC,uBAAzC;AACA,IAAMC,cAAc,cAAcJ,IAAlC;;AAEA,SAASK,oBAAT,CAA8BC,MAA9B,EAAsC;EAClC,IAAIC,iBAAJ;EACA,IAAMC,SAASF,OAAOE,MAAtB;EACA,IAAMC,SAASH,OAAOI,KAAPJ,CAAaK,SAAbL,CAAuBC,QAAvBD,CAAf;EACA;;;;;;;;;;;EAUA,SAASM,8BAAT,CAAwCC,cAAxC,EAAwDC,OAAxD,EAAiE;IAC7D,IAAIC,cAAc,IAAlB;;IACA,IAAIF,cAAJ,EAAoB;MAChB;MACA;MACA,IAAMG,UAAUC,KAAKC,KAALD,CAAWE,OAAOC,YAAPD,CAAoBE,KAApBF,CAA0B,IAA1BA,EAAgC,IAAIG,UAAJ,CAAeR,OAAf,CAAhCK,CAAXF,CAAhB;MACA,IAAMM,WAAW,EAAjB;;MACA,KAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIR,QAAQS,IAART,CAAaU,MAAjC,EAAyCF,GAAzC,EAA8C;QAC1C,IAAMG,aAAaX,QAAQS,IAART,CAAaQ,CAAbR,CAAnB;QACA,IAAMY,WAAYf,eAAegB,SAAfhB,IAA4BA,eAAegB,SAAfhB,CAAyBiB,cAAzBjB,CAAwCc,UAAxCd,CAA5BA,GAAmFA,eAAegB,SAAfhB,CAAyBc,UAAzBd,CAAnFA,GAA0H,IAA5I;;QACA,IAAI,CAACe,QAAL,EAAe;UACX,MAAM,IAAIG,KAAJ,CAAU,0BAA0BJ,UAA1B,GAAuC,iBAAjD,CAAN;QAEJ,CAN0C,CAM1C;;;QACAJ,SAASS,IAATT,CAAc,IAAIU,iBAAJ,CAAYN,UAAZ,EAAwBC,QAAxB,CAAdL;MAEJR;;MAAAA,cAAc,IAAImB,wBAAJ,CAAmBX,QAAnB,CAAdR;MAEAN,OAAO0B,IAAP1B,CAAY,2JAAZA;IAEJ;;IAAA,OAAOM,WAAP;EAGJ;;EAAA,SAASqB,WAAT,CAAqBC,EAArB,EAAyB;IACrB,OAAOC,2BAAiBC,kCAAjBD,CAAoDD,EAApDC,EAAwD9B,MAAxD8B,CAAP;EAGJ;;EAAA,SAASE,4BAAT;EAAsC;EAAa;IAC/C,OAAO,IAAP;EAGJ;;EAAA,SAASC,4BAAT,CAAsC3B,OAAtC,EAA+C;IAC3C,OAAO,IAAIQ,UAAJ,CAAeR,OAAf,CAAP;EAGJ;;EAAA,SAAS4B,+BAAT;EAAyC;EAAc;IACnD,OAAO,IAAP;EAGJ;;EAAA,SAASC,UAAT,GAAsB;IAClB,OAAO,IAAP;EAGJ;;EAAA,SAASC,YAAT;EAAsB;EAAQ;IAC1B,OAAO,IAAP;EAGJrC;;EAAAA,WAAW;IACPP,MAAMA,IADC;IAEPI,aAAaA,WAFN;IAGPH,cAAcA,YAHP;IAIPmC,aAAaA,WAJN;IAKPI,8BAA8BA,4BALvB;IAMPC,8BAA8BA,4BANvB;IAOPC,iCAAiCA,+BAP1B;IAQPC,YAAYA,UARL;IASPC,cAAcA,YATP;IAUPhC,gCAAgCA;EAVzB,CAAXL;EAaA,OAAOA,QAAP;AAGJF;;AAAAA,qBAAqBwC,qBAArBxC,GAA6C,sBAA7CA;kBACeyC,OAAOC,YAAPD,CAAoBE,mBAApBF,CAAwCzC,oBAAxCyC,C;AAA+D","names":["uuid","systemString","ProtectionConstants","CLEARKEY_KEYSTEM_STRING","schemeIdURI","KeySystemW3CClearKey","config","instance","BASE64","logger","debug","getLogger","getClearKeysFromProtectionData","protectionData","message","clearkeySet","jsonMsg","JSON","parse","String","fromCharCode","apply","Uint8Array","keyPairs","i","kids","length","clearkeyID","clearkey","clearkeys","hasOwnProperty","Error","push","KeyPair","ClearKeyKeySet","warn","getInitData","cp","CommonEncryption","parseInitDataFromContentProtection","getRequestHeadersFromMessage","getLicenseRequestFromMessage","getLicenseServerURLFromInitData","getCDMData","getSessionId","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/protection/drm/KeySystemW3CClearKey.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '1077efec-c0b2-4d02-ace3-3c1e52e2fb4b';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemW3CClearKey(config) {\n    let instance;\n    const BASE64 = config.BASE64;\n    const logger = config.debug.getLogger(instance);\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionDataSet} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n\n            logger.warn('ClearKey schemeIdURI is using W3C Common PSSH systemID (1077efec-c0b2-4d02-ace3-3c1e52e2fb4b) in Content Protection. See DASH-IF IOP v4.1 section 7.6.2.4');\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp) {\n        return CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        return null;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return new Uint8Array(message);\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemW3CClearKey.__dashjs_factory_name = 'KeySystemW3CClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemW3CClearKey); /* jshint ignore:line */\n\n"]},"metadata":{},"sourceType":"script"}