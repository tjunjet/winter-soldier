{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/* global escape: true */\n\n/**\n* Microsoft PlayReady Test License Server\n*\n* For testing content that uses the PlayReady test server at\n*\n* @implements LicenseServer\n* @class\n* @ignore\n*/\n\nfunction PlayReady() {\n  var instance = void 0;\n  var soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n  function uintToString(arrayBuffer) {\n    var encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n    var decodedString = decodeURIComponent(escape(encodedString));\n    return decodedString;\n  }\n\n  function parseServerResponse(serverResponse) {\n    if (window.DOMParser) {\n      var stringResponse = uintToString(serverResponse);\n      var parser = new window.DOMParser();\n      var xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n      var envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n      var body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n      var fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n      if (fault) {\n        return null;\n      }\n    }\n\n    return serverResponse;\n  }\n\n  function parseErrorResponse(serverResponse) {\n    var faultstring = '';\n    var statusCode = '';\n    var message = '';\n    var idStart = -1;\n    var idEnd = -1;\n\n    if (window.DOMParser) {\n      var stringResponse = uintToString(serverResponse);\n      var parser = new window.DOMParser();\n      var xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n      var envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n      var body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n      var fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n      var detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n      var exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n      var node = null;\n\n      if (fault === null) {\n        return stringResponse;\n      }\n\n      node = fault.getElementsByTagName('faultstring')[0].firstChild;\n      faultstring = node ? node.nodeValue : null;\n\n      if (exception !== null) {\n        node = exception.getElementsByTagName('StatusCode')[0];\n        statusCode = node ? node.firstChild.nodeValue : null;\n        node = exception.getElementsByTagName('Message')[0];\n        message = node ? node.firstChild.nodeValue : null;\n        idStart = message ? message.lastIndexOf('[') + 1 : -1;\n        idEnd = message ? message.indexOf(']') : -1;\n        message = message ? message.substring(idStart, idEnd) : '';\n      }\n    }\n\n    var errorString = 'code: ' + statusCode + ', name: ' + faultstring;\n\n    if (message) {\n      errorString += ', message: ' + message;\n    }\n\n    return errorString;\n  }\n\n  function getServerURLFromMessage(url\n  /*, message, messageType*/\n  ) {\n    return url;\n  }\n\n  function getHTTPMethod()\n  /*messageType*/\n  {\n    return 'POST';\n  }\n\n  function getResponseType()\n  /*keySystemStr, messageType*/\n  {\n    return 'arraybuffer';\n  }\n\n  function getLicenseMessage(serverResponse\n  /*, keySystemStr, messageType*/\n  ) {\n    return parseServerResponse.call(this, serverResponse);\n  }\n\n  function getErrorResponse(serverResponse\n  /*, keySystemStr, messageType*/\n  ) {\n    return parseErrorResponse.call(this, serverResponse);\n  }\n\n  instance = {\n    getServerURLFromMessage: getServerURLFromMessage,\n    getHTTPMethod: getHTTPMethod,\n    getResponseType: getResponseType,\n    getLicenseMessage: getLicenseMessage,\n    getErrorResponse: getErrorResponse\n  };\n  return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(PlayReady);\n/* jshint ignore:line */","map":{"version":3,"mappings":"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","names":["PlayReady","instance","soap","uintToString","arrayBuffer","encodedString","String","fromCharCode","apply","Uint8Array","decodedString","decodeURIComponent","escape","parseServerResponse","serverResponse","window","DOMParser","stringResponse","parser","xmlDoc","parseFromString","envelope","getElementsByTagNameNS","body","fault","parseErrorResponse","faultstring","statusCode","message","idStart","idEnd","detail","getElementsByTagName","exception","node","firstChild","nodeValue","lastIndexOf","indexOf","substring","errorString","getServerURLFromMessage","url","getHTTPMethod","getResponseType","getLicenseMessage","call","getErrorResponse","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/protection/servers/PlayReady.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/* global escape: true */\n\n/**\n * Microsoft PlayReady Test License Server\n *\n * For testing content that uses the PlayReady test server at\n *\n * @implements LicenseServer\n * @class\n * @ignore\n */\n\nfunction PlayReady() {\n\n    let instance;\n\n    const soap = 'http://schemas.xmlsoap.org/soap/envelope/';\n\n    function uintToString(arrayBuffer) {\n        const encodedString = String.fromCharCode.apply(null, new Uint8Array(arrayBuffer));\n        const decodedString = decodeURIComponent(escape(encodedString));\n        return decodedString;\n    }\n\n    function parseServerResponse(serverResponse) {\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n\n            if (fault) {\n                return null;\n            }\n        }\n        return serverResponse;\n    }\n\n    function parseErrorResponse(serverResponse) {\n        let faultstring = '';\n        let statusCode = '';\n        let message = '';\n        let idStart = -1;\n        let idEnd = -1;\n\n        if (window.DOMParser) {\n            const stringResponse = uintToString(serverResponse);\n            const parser = new window.DOMParser();\n            const xmlDoc = parser.parseFromString(stringResponse, 'text/xml');\n            const envelope = xmlDoc ? xmlDoc.getElementsByTagNameNS(soap, 'Envelope')[0] : null;\n            const body = envelope ? envelope.getElementsByTagNameNS(soap, 'Body')[0] : null;\n            const fault = body ? body.getElementsByTagNameNS(soap, 'Fault')[0] : null;\n            const detail = fault ? fault.getElementsByTagName('detail')[0] : null;\n            const exception = detail ? detail.getElementsByTagName('Exception')[0] : null;\n            let node = null;\n\n            if (fault === null) {\n                return stringResponse;\n            }\n\n            node = fault.getElementsByTagName('faultstring')[0].firstChild;\n            faultstring = node ? node.nodeValue : null;\n\n            if (exception !== null) {\n                node = exception.getElementsByTagName('StatusCode')[0];\n                statusCode = node ? node.firstChild.nodeValue : null;\n                node = exception.getElementsByTagName('Message')[0];\n                message = node ? node.firstChild.nodeValue : null;\n                idStart = message ? message.lastIndexOf('[') + 1 : -1;\n                idEnd = message ? message.indexOf(']') : -1;\n                message = message ? message.substring(idStart, idEnd) : '';\n            }\n        }\n\n        let errorString = `code: ${statusCode}, name: ${faultstring}`;\n        if (message) {\n            errorString += `, message: ${message}`;\n        }\n\n        return errorString;\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(/*keySystemStr, messageType*/) {\n        return 'arraybuffer';\n    }\n\n    function getLicenseMessage(serverResponse/*, keySystemStr, messageType*/) {\n        return parseServerResponse.call(this, serverResponse);\n    }\n\n    function getErrorResponse(serverResponse/*, keySystemStr, messageType*/) {\n        return parseErrorResponse.call(this, serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nPlayReady.__dashjs_factory_name = 'PlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(PlayReady); /* jshint ignore:line */"]},"metadata":{},"sourceType":"script"}