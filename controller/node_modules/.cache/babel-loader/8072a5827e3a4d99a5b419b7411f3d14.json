{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* @ignore\n*/\n\nfunction RNG() {\n  // check whether secure random numbers are available. if not, revert to\n  // using Math.random\n  var crypto = window.crypto || window.msCrypto; // could just as easily use any other array type by changing line below\n\n  var ArrayType = Uint32Array;\n  var MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1; // currently there is only one client for this code, and that only uses\n  // a single random number per initialisation. may want to increase this\n  // number if more consumers in the future\n\n  var NUM_RANDOM_NUMBERS = 10;\n  var randomNumbers = void 0,\n      index = void 0,\n      instance = void 0;\n\n  function initialise() {\n    if (crypto) {\n      if (!randomNumbers) {\n        randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);\n      }\n\n      crypto.getRandomValues(randomNumbers);\n      index = 0;\n    }\n  }\n\n  function rand(min, max) {\n    var r = void 0;\n\n    if (!min) {\n      min = 0;\n    }\n\n    if (!max) {\n      max = 1;\n    }\n\n    if (crypto) {\n      if (index === randomNumbers.length) {\n        initialise();\n      }\n\n      r = randomNumbers[index] / MAX_VALUE;\n      index += 1;\n    } else {\n      r = Math.random();\n    }\n\n    return r * (max - min) + min;\n  }\n\n  instance = {\n    random: rand\n  };\n  initialise();\n  return instance;\n}\n\nRNG.__dashjs_factory_name = 'RNG';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(RNG);\n/* jshint ignore:line */","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BC;;;;AAGD,SAASA,GAAT,GAAe;EAEX;EACA;EACA,IAAIC,SAASC,OAAOD,MAAPC,IAAiBA,OAAOC,QAArC,CAJW,CAMX;;EACA,IAAIC,YAAYC,WAAhB;EACA,IAAIC,YAAYC,KAAKC,GAALD,CAAS,CAATA,EAAYH,UAAUK,iBAAVL,GAA8B,CAA1CG,IAA+C,CAA/D,CARW,CAUX;EACA;EACA;;EACA,IAAIG,qBAAqB,EAAzB;EAEA,IAAIC,sBAAJ;EAAA,IACIC,cADJ;EAAA,IAEIC,iBAFJ;;EAIA,SAASC,UAAT,GAAsB;IAClB,IAAIb,MAAJ,EAAY;MACR,IAAI,CAACU,aAAL,EAAoB;QAChBA,gBAAgB,IAAIP,SAAJ,CAAcM,kBAAd,CAAhBC;MAEJV;;MAAAA,OAAOc,eAAPd,CAAuBU,aAAvBV;MACAW,QAAQ,CAARA;IAEP;EAED;;EAAA,SAASI,IAAT,CAAcC,GAAd,EAAmBC,GAAnB,EAAwB;IACpB,IAAIC,UAAJ;;IAEA,IAAI,CAACF,GAAL,EAAU;MACNA,MAAM,CAANA;IAGJ;;IAAA,IAAI,CAACC,GAAL,EAAU;MACNA,MAAM,CAANA;IAGJ;;IAAA,IAAIjB,MAAJ,EAAY;MACR,IAAIW,UAAUD,cAAcS,MAA5B,EAAoC;QAChCN;MAGJK;;MAAAA,IAAIR,cAAcC,KAAdD,IAAuBL,SAA3Ba;MACAP,SAAS,CAATA;IANJ,OAOO;MACHO,IAAIZ,KAAKc,MAALd,EAAJY;IAGJ;;IAAA,OAAQA,KAAKD,MAAMD,GAAXE,IAAmBF,GAA3B;EAGJJ;;EAAAA,WAAW;IACPQ,QAAQL;EADD,CAAXH;EAIAC;EAEA,OAAOD,QAAP;AAGJb;;AAAAA,IAAIsB,qBAAJtB,GAA4B,KAA5BA;kBACeuB,OAAOC,YAAPD,CAAoBE,mBAApBF,CAAwCvB,GAAxCuB,C;AAA8C","names":["RNG","crypto","window","msCrypto","ArrayType","Uint32Array","MAX_VALUE","Math","pow","BYTES_PER_ELEMENT","NUM_RANDOM_NUMBERS","randomNumbers","index","instance","initialise","getRandomValues","rand","min","max","r","length","random","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/utils/RNG.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n /**\n  * @ignore\n  */\nfunction RNG() {\n\n    // check whether secure random numbers are available. if not, revert to\n    // using Math.random\n    let crypto = window.crypto || window.msCrypto;\n\n    // could just as easily use any other array type by changing line below\n    let ArrayType = Uint32Array;\n    let MAX_VALUE = Math.pow(2, ArrayType.BYTES_PER_ELEMENT * 8) - 1;\n\n    // currently there is only one client for this code, and that only uses\n    // a single random number per initialisation. may want to increase this\n    // number if more consumers in the future\n    let NUM_RANDOM_NUMBERS = 10;\n\n    let randomNumbers,\n        index,\n        instance;\n\n    function initialise() {\n        if (crypto) {\n            if (!randomNumbers) {\n                randomNumbers = new ArrayType(NUM_RANDOM_NUMBERS);\n            }\n            crypto.getRandomValues(randomNumbers);\n            index = 0;\n        }\n    }\n\n    function rand(min, max) {\n        let r;\n\n        if (!min) {\n            min = 0;\n        }\n\n        if (!max) {\n            max = 1;\n        }\n\n        if (crypto) {\n            if (index === randomNumbers.length) {\n                initialise();\n            }\n\n            r = randomNumbers[index] / MAX_VALUE;\n            index += 1;\n        } else {\n            r = Math.random();\n        }\n\n        return (r * (max - min)) + min;\n    }\n\n    instance = {\n        random: rand\n    };\n\n    initialise();\n\n    return instance;\n}\n\nRNG.__dashjs_factory_name = 'RNG';\nexport default dashjs.FactoryMaker.getSingletonFactory(RNG); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}