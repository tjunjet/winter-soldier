{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* @module DefaultURLUtils\n* @description Provides utility functions for operating on URLs.\n* Initially this is simply a method to determine the Base URL of a URL, but\n* should probably include other things provided all over the place such as\n* determining whether a URL is relative/absolute, resolving two paths etc.\n* @ignore\n*/\n\n\nfunction DefaultURLUtils() {\n  var resolveFunction = void 0;\n  var schemeRegex = /^[a-z][a-z0-9+\\-_.]*:/i;\n  var httpUrlRegex = /^https?:\\/\\//i;\n  var httpsUrlRegex = /^https:\\/\\//i;\n  var originRegex = /^([a-z][a-z0-9+\\-_.]*:\\/\\/[^\\/]+)\\/?/i;\n  /**\n  * Resolves a url given an optional base url\n  * Uses window.URL to do the resolution.\n  *\n  * @param {string} url\n  * @param {string} [baseUrl]\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  * @private\n  */\n\n  var nativeURLResolver = function nativeURLResolver(url, baseUrl) {\n    try {\n      return new window.URL(url, baseUrl).toString();\n    } catch (e) {\n      return url;\n    }\n  };\n  /**\n  * Resolves a url given an optional base url\n  * Does not resolve ./, ../ etc but will do enough to construct something\n  * which will satisfy XHR etc when window.URL is not available ie\n  * IE11/node etc.\n  *\n  * @param {string} url\n  * @param {string} [baseUrl]\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  * @private\n  */\n\n\n  var dumbURLResolver = function dumbURLResolver(url, baseUrl) {\n    var baseUrlParseFunc = parseBaseUrl;\n\n    if (!baseUrl) {\n      return url;\n    }\n\n    if (!isRelative(url)) {\n      return url;\n    }\n\n    if (isPathAbsolute(url)) {\n      baseUrlParseFunc = parseOrigin;\n    }\n\n    if (isSchemeRelative(url)) {\n      baseUrlParseFunc = parseScheme;\n    }\n\n    var base = baseUrlParseFunc(baseUrl);\n    var joinChar = base.charAt(base.length - 1) !== '/' && url.charAt(0) !== '/' ? '/' : '';\n    return [base, url].join(joinChar);\n  };\n\n  function setup() {\n    try {\n      var u = new window.URL('x', 'http://y'); //jshint ignore:line\n\n      resolveFunction = nativeURLResolver;\n    } catch (e) {// must be IE11/Node etc\n    } finally {\n      resolveFunction = resolveFunction || dumbURLResolver;\n    }\n  }\n  /**\n  * Returns a string that contains the Base URL of a URL, if determinable.\n  * @param {string} url - full url\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function parseBaseUrl(url) {\n    var slashIndex = url.indexOf('/');\n    var lastSlashIndex = url.lastIndexOf('/');\n\n    if (slashIndex !== -1) {\n      // if there is only '//'\n      if (lastSlashIndex === slashIndex + 1) {\n        return url;\n      }\n\n      if (url.indexOf('?') !== -1) {\n        url = url.substring(0, url.indexOf('?'));\n      }\n\n      return url.substring(0, lastSlashIndex + 1);\n    }\n\n    return '';\n  }\n  /**\n  * Returns a string that contains the scheme and origin of a URL,\n  * if determinable.\n  * @param {string} url - full url\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function parseOrigin(url) {\n    var matches = url.match(originRegex);\n\n    if (matches) {\n      return matches[1];\n    }\n\n    return '';\n  }\n  /**\n  * Returns a string that contains the fragment of a URL without scheme,\n  * if determinable.\n  * @param {string} url - full url\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function removeHostname(url) {\n    var urlParts = /^(?:\\w+\\:\\/\\/)?([^\\/]+)(.*)$/.exec(url); //[1] = host / [2] = path\n\n    return urlParts[2].substring(1);\n  }\n  /**\n  * Returns a string that contains the scheme of a URL, if determinable.\n  * @param {string} url - full url\n  * @return {string}\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function parseScheme(url) {\n    var matches = url.match(schemeRegex);\n\n    if (matches) {\n      return matches[0];\n    }\n\n    return '';\n  }\n  /**\n  * Determines whether the url is relative.\n  * @return {boolean}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isRelative(url) {\n    return !schemeRegex.test(url);\n  }\n  /**\n  * Determines whether the url is path-absolute.\n  * @return {bool}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isPathAbsolute(url) {\n    return isRelative(url) && url.charAt(0) === '/';\n  }\n  /**\n  * Determines whether the url is scheme-relative.\n  * @return {bool}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isSchemeRelative(url) {\n    return url.indexOf('//') === 0;\n  }\n  /**\n  * Determines whether the url is an HTTP-URL as defined in ISO/IEC\n  * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https\n  * @return {bool}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isHTTPURL(url) {\n    return httpUrlRegex.test(url);\n  }\n  /**\n  * Determines whether the supplied url has https scheme\n  * @return {bool}\n  * @param {string} url\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function isHTTPS(url) {\n    return httpsUrlRegex.test(url);\n  }\n  /**\n  * Resolves a url given an optional base url\n  * @return {string}\n  * @param {string} url\n  * @param {string} [baseUrl]\n  * @memberof module:DefaultURLUtils\n  * @instance\n  */\n\n\n  function resolve(url, baseUrl) {\n    return resolveFunction(url, baseUrl);\n  }\n\n  setup();\n  var instance = {\n    parseBaseUrl: parseBaseUrl,\n    parseOrigin: parseOrigin,\n    parseScheme: parseScheme,\n    isRelative: isRelative,\n    isPathAbsolute: isPathAbsolute,\n    isSchemeRelative: isSchemeRelative,\n    isHTTPURL: isHTTPURL,\n    isHTTPS: isHTTPS,\n    removeHostname: removeHostname,\n    resolve: resolve\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nDefaultURLUtils.__dashjs_factory_name = 'DefaultURLUtils';\nexports.default = _FactoryMaker2.default.getSingletonFactory(DefaultURLUtils);","map":{"version":3,"mappings":"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","names":["DefaultURLUtils","resolveFunction","schemeRegex","httpUrlRegex","httpsUrlRegex","originRegex","nativeURLResolver","url","baseUrl","window","URL","toString","e","dumbURLResolver","baseUrlParseFunc","parseBaseUrl","isRelative","isPathAbsolute","parseOrigin","isSchemeRelative","parseScheme","base","joinChar","charAt","length","join","setup","u","slashIndex","indexOf","lastSlashIndex","lastIndexOf","substring","matches","match","removeHostname","urlParts","exec","test","isHTTPURL","isHTTPS","resolve","instance","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/utils/DefaultURLUtils.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\n\n/**\n * @module DefaultURLUtils\n * @description Provides utility functions for operating on URLs.\n * Initially this is simply a method to determine the Base URL of a URL, but\n * should probably include other things provided all over the place such as\n * determining whether a URL is relative/absolute, resolving two paths etc.\n * @ignore\n */\nfunction DefaultURLUtils() {\n\n    let resolveFunction;\n\n    const schemeRegex = /^[a-z][a-z0-9+\\-_.]*:/i;\n    const httpUrlRegex = /^https?:\\/\\//i;\n    const httpsUrlRegex = /^https:\\/\\//i;\n    const originRegex = /^([a-z][a-z0-9+\\-_.]*:\\/\\/[^\\/]+)\\/?/i;\n\n    /**\n     * Resolves a url given an optional base url\n     * Uses window.URL to do the resolution.\n     *\n     * @param {string} url\n     * @param {string} [baseUrl]\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     * @private\n     */\n    const nativeURLResolver = (url, baseUrl) => {\n        try {\n            return new window.URL(url, baseUrl).toString();\n        } catch (e) {\n            return url;\n        }\n    };\n\n    /**\n     * Resolves a url given an optional base url\n     * Does not resolve ./, ../ etc but will do enough to construct something\n     * which will satisfy XHR etc when window.URL is not available ie\n     * IE11/node etc.\n     *\n     * @param {string} url\n     * @param {string} [baseUrl]\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     * @private\n     */\n    const dumbURLResolver = (url, baseUrl) => {\n        let baseUrlParseFunc = parseBaseUrl;\n\n        if (!baseUrl) {\n            return url;\n        }\n\n        if (!isRelative(url)) {\n            return url;\n        }\n\n        if (isPathAbsolute(url)) {\n            baseUrlParseFunc = parseOrigin;\n        }\n\n        if (isSchemeRelative(url)) {\n            baseUrlParseFunc = parseScheme;\n        }\n\n        const base = baseUrlParseFunc(baseUrl);\n        const joinChar =\n              base.charAt(base.length - 1) !== '/' &&\n              url.charAt(0) !== '/' ?\n              '/' : '';\n\n        return [base, url].join(joinChar);\n    };\n\n    function setup() {\n        try {\n            const u = new window.URL('x', 'http://y'); //jshint ignore:line\n            resolveFunction = nativeURLResolver;\n        } catch (e) {\n            // must be IE11/Node etc\n        } finally {\n            resolveFunction = resolveFunction || dumbURLResolver;\n        }\n    }\n\n    /**\n     * Returns a string that contains the Base URL of a URL, if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function parseBaseUrl(url) {\n        const slashIndex = url.indexOf('/');\n        const lastSlashIndex = url.lastIndexOf('/');\n\n        if (slashIndex !== -1) {\n            // if there is only '//'\n            if (lastSlashIndex === slashIndex + 1) {\n                return url;\n            }\n\n            if (url.indexOf('?') !== -1) {\n                url = url.substring(0, url.indexOf('?'));\n            }\n\n            return url.substring(0, lastSlashIndex + 1);\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns a string that contains the scheme and origin of a URL,\n     * if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function parseOrigin(url) {\n        const matches = url.match(originRegex);\n\n        if (matches) {\n            return matches[1];\n        }\n\n        return '';\n    }\n\n    /**\n     * Returns a string that contains the fragment of a URL without scheme,\n     * if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function removeHostname(url) {\n        let urlParts = /^(?:\\w+\\:\\/\\/)?([^\\/]+)(.*)$/.exec(url); //[1] = host / [2] = path\n        return urlParts[2].substring(1);\n    }\n\n    /**\n     * Returns a string that contains the scheme of a URL, if determinable.\n     * @param {string} url - full url\n     * @return {string}\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function parseScheme(url) {\n        const matches = url.match(schemeRegex);\n\n        if (matches) {\n            return matches[0];\n        }\n\n        return '';\n    }\n\n    /**\n     * Determines whether the url is relative.\n     * @return {boolean}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isRelative(url) {\n        return !schemeRegex.test(url);\n    }\n\n    /**\n     * Determines whether the url is path-absolute.\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isPathAbsolute(url) {\n        return isRelative(url) && url.charAt(0) === '/';\n    }\n\n    /**\n     * Determines whether the url is scheme-relative.\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isSchemeRelative(url) {\n        return url.indexOf('//') === 0;\n    }\n\n    /**\n     * Determines whether the url is an HTTP-URL as defined in ISO/IEC\n     * 23009-1:2014 3.1.15. ie URL with a fixed scheme of http or https\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isHTTPURL(url) {\n        return httpUrlRegex.test(url);\n    }\n\n    /**\n     * Determines whether the supplied url has https scheme\n     * @return {bool}\n     * @param {string} url\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function isHTTPS(url) {\n        return httpsUrlRegex.test(url);\n    }\n\n    /**\n     * Resolves a url given an optional base url\n     * @return {string}\n     * @param {string} url\n     * @param {string} [baseUrl]\n     * @memberof module:DefaultURLUtils\n     * @instance\n     */\n    function resolve(url, baseUrl) {\n        return resolveFunction(url, baseUrl);\n    }\n\n    setup();\n\n    const instance = {\n        parseBaseUrl:       parseBaseUrl,\n        parseOrigin:        parseOrigin,\n        parseScheme:        parseScheme,\n        isRelative:         isRelative,\n        isPathAbsolute:     isPathAbsolute,\n        isSchemeRelative:   isSchemeRelative,\n        isHTTPURL:          isHTTPURL,\n        isHTTPS:            isHTTPS,\n        removeHostname:     removeHostname,\n        resolve:            resolve\n    };\n\n    return instance;\n}\n\nDefaultURLUtils.__dashjs_factory_name = 'DefaultURLUtils';\nexport default FactoryMaker.getSingletonFactory(DefaultURLUtils);\n"]},"metadata":{},"sourceType":"script"}