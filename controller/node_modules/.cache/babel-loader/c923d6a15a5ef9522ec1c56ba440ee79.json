{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* @class\n* @ignore\n*/\n\n\nvar CommonEncryption = function () {\n  function CommonEncryption() {\n    _classCallCheck(this, CommonEncryption);\n  }\n\n  _createClass(CommonEncryption, null, [{\n    key: 'findCencContentProtection',\n\n    /**\n    * Find and return the ContentProtection element in the given array\n    * that indicates support for MPEG Common Encryption\n    *\n    * @param {Array} cpArray array of content protection elements\n    * @returns {Object|null} the Common Encryption content protection element or\n    * null if one was not found\n    */\n    value: function findCencContentProtection(cpArray) {\n      var retVal = null;\n\n      for (var i = 0; i < cpArray.length; ++i) {\n        var cp = cpArray[i];\n        if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' && (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs')) retVal = cp;\n      }\n\n      return retVal;\n    }\n    /**\n    * Returns just the data portion of a single PSSH\n    *\n    * @param {ArrayBuffer} pssh - the PSSH\n    * @return {ArrayBuffer} data portion of the PSSH\n    */\n\n  }, {\n    key: 'getPSSHData',\n    value: function getPSSHData(pssh) {\n      var offset = 8; // Box size and type fields\n\n      var view = new DataView(pssh); // Read version\n\n      var version = view.getUint8(offset);\n      offset += 20; // Version (1), flags (3), system ID (16)\n\n      if (version > 0) {\n        offset += 4 + 16 * view.getUint32(offset); // Key ID count (4) and All key IDs (16*count)\n      }\n\n      offset += 4; // Data size\n\n      return pssh.slice(offset);\n    }\n    /**\n    * Returns the PSSH associated with the given key system from the concatenated\n    * list of PSSH boxes in the given initData\n    *\n    * @param {KeySystem} keySystem the desired\n    * key system\n    * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n    * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n    * or null if a valid association could not be found.\n    */\n\n  }, {\n    key: 'getPSSHForKeySystem',\n    value: function getPSSHForKeySystem(keySystem, initData) {\n      var psshList = CommonEncryption.parsePSSHList(initData);\n\n      if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n        return psshList[keySystem.uuid.toLowerCase()];\n      }\n\n      return null;\n    }\n    /**\n    * Parse a standard common encryption PSSH which contains a simple\n    * base64-encoding of the init data\n    *\n    * @param {Object} cpData the ContentProtection element\n    * @param {BASE64} BASE64 reference\n    * @returns {ArrayBuffer|null} the init data or null if not found\n    */\n\n  }, {\n    key: 'parseInitDataFromContentProtection',\n    value: function parseInitDataFromContentProtection(cpData, BASE64) {\n      if ('pssh' in cpData) {\n        // Remove whitespaces and newlines from pssh text\n        cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\n        return BASE64.decodeArray(cpData.pssh.__text).buffer;\n      }\n\n      return null;\n    }\n    /**\n    * Parses list of PSSH boxes into keysystem-specific PSSH data\n    *\n    * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n    * CDM as initialization data when CommonEncryption content is detected\n    * @returns {Object|Array} an object that has a property named according to each of\n    * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n    * and a ArrayBuffer (the entire PSSH box) as the property value\n    */\n\n  }, {\n    key: 'parsePSSHList',\n    value: function parsePSSHList(data) {\n      if (data === null || data === undefined) return [];\n      var dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n\n      var done = false;\n      var pssh = {}; // TODO: Need to check every data read for end of buffer\n\n      var byteCursor = 0;\n\n      while (!done) {\n        var size = void 0,\n            nextBox = void 0,\n            version = void 0,\n            systemID = void 0,\n            psshDataSize = void 0;\n        var boxStart = byteCursor;\n        if (byteCursor >= dv.buffer.byteLength) break;\n        /* Box size */\n\n        size = dv.getUint32(byteCursor);\n        nextBox = byteCursor + size;\n        byteCursor += 4;\n        /* Verify PSSH */\n\n        if (dv.getUint32(byteCursor) !== 0x70737368) {\n          byteCursor = nextBox;\n          continue;\n        }\n\n        byteCursor += 4;\n        /* Version must be 0 or 1 */\n\n        version = dv.getUint8(byteCursor);\n\n        if (version !== 0 && version !== 1) {\n          byteCursor = nextBox;\n          continue;\n        }\n\n        byteCursor++;\n        byteCursor += 3;\n        /* skip flags */\n        // 16-byte UUID/SystemID\n\n        systemID = '';\n        var i = void 0,\n            val = void 0;\n\n        for (i = 0; i < 4; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 4;\n        systemID += '-';\n\n        for (i = 0; i < 2; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 2;\n        systemID += '-';\n\n        for (i = 0; i < 2; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 2;\n        systemID += '-';\n\n        for (i = 0; i < 2; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 2;\n        systemID += '-';\n\n        for (i = 0; i < 6; i++) {\n          val = dv.getUint8(byteCursor + i).toString(16);\n          systemID += val.length === 1 ? '0' + val : val;\n        }\n\n        byteCursor += 6;\n        systemID = systemID.toLowerCase();\n        /* PSSH Data Size */\n\n        psshDataSize = dv.getUint32(byteCursor);\n        byteCursor += 4;\n        /* PSSH Data */\n\n        pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n        byteCursor = nextBox;\n      }\n\n      return pssh;\n    }\n  }]);\n\n  return CommonEncryption;\n}();\n\nexports.default = CommonEncryption;","map":{"version":3,"mappings":"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","names":["CommonEncryption","cpArray","retVal","i","length","cp","schemeIdUri","toLowerCase","value","pssh","offset","view","DataView","version","getUint8","getUint32","slice","keySystem","initData","psshList","parsePSSHList","hasOwnProperty","uuid","cpData","BASE64","__text","replace","decodeArray","buffer","data","undefined","dv","done","byteCursor","size","nextBox","systemID","psshDataSize","boxStart","byteLength","val","toString"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/protection/CommonEncryption.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @class\n * @ignore\n */\nclass CommonEncryption {\n    /**\n     * Find and return the ContentProtection element in the given array\n     * that indicates support for MPEG Common Encryption\n     *\n     * @param {Array} cpArray array of content protection elements\n     * @returns {Object|null} the Common Encryption content protection element or\n     * null if one was not found\n     */\n    static findCencContentProtection(cpArray) {\n        let retVal = null;\n        for (let i = 0; i < cpArray.length; ++i) {\n            let cp = cpArray[i];\n            if (cp.schemeIdUri.toLowerCase() === 'urn:mpeg:dash:mp4protection:2011' &&\n                (cp.value.toLowerCase() === 'cenc' || cp.value.toLowerCase() === 'cbcs'))\n                retVal = cp;\n        }\n        return retVal;\n    }\n\n    /**\n     * Returns just the data portion of a single PSSH\n     *\n     * @param {ArrayBuffer} pssh - the PSSH\n     * @return {ArrayBuffer} data portion of the PSSH\n     */\n    static getPSSHData(pssh) {\n        let offset = 8; // Box size and type fields\n        let view = new DataView(pssh);\n\n        // Read version\n        let version = view.getUint8(offset);\n\n        offset += 20; // Version (1), flags (3), system ID (16)\n\n        if (version > 0) {\n            offset += 4 + (16 * view.getUint32(offset)); // Key ID count (4) and All key IDs (16*count)\n        }\n\n        offset += 4; // Data size\n        return pssh.slice(offset);\n    }\n\n    /**\n     * Returns the PSSH associated with the given key system from the concatenated\n     * list of PSSH boxes in the given initData\n     *\n     * @param {KeySystem} keySystem the desired\n     * key system\n     * @param {ArrayBuffer} initData 'cenc' initialization data.  Concatenated list of PSSH.\n     * @returns {ArrayBuffer|null} The PSSH box data corresponding to the given key system, null if not found\n     * or null if a valid association could not be found.\n     */\n    static getPSSHForKeySystem(keySystem, initData) {\n        let psshList = CommonEncryption.parsePSSHList(initData);\n        if (keySystem && psshList.hasOwnProperty(keySystem.uuid.toLowerCase())) {\n            return psshList[keySystem.uuid.toLowerCase()];\n        }\n        return null;\n    }\n\n    /**\n     * Parse a standard common encryption PSSH which contains a simple\n     * base64-encoding of the init data\n     *\n     * @param {Object} cpData the ContentProtection element\n     * @param {BASE64} BASE64 reference\n     * @returns {ArrayBuffer|null} the init data or null if not found\n     */\n    static parseInitDataFromContentProtection(cpData, BASE64) {\n        if ('pssh' in cpData) {\n\n            // Remove whitespaces and newlines from pssh text\n            cpData.pssh.__text = cpData.pssh.__text.replace(/\\r?\\n|\\r/g, '').replace(/\\s+/g, '');\n\n            return BASE64.decodeArray(cpData.pssh.__text).buffer;\n        }\n        return null;\n    }\n\n    /**\n     * Parses list of PSSH boxes into keysystem-specific PSSH data\n     *\n     * @param {ArrayBuffer} data - the concatenated list of PSSH boxes as provided by\n     * CDM as initialization data when CommonEncryption content is detected\n     * @returns {Object|Array} an object that has a property named according to each of\n     * the detected key system UUIDs (e.g. 00000000-0000-0000-0000-0000000000)\n     * and a ArrayBuffer (the entire PSSH box) as the property value\n     */\n    static parsePSSHList(data) {\n\n        if (data === null || data === undefined)\n            return [];\n\n        let dv = new DataView(data.buffer || data); // data.buffer first for Uint8Array support\n        let done = false;\n        let pssh = {};\n\n        // TODO: Need to check every data read for end of buffer\n        let byteCursor = 0;\n        while (!done) {\n\n            let size,\n                nextBox,\n                version,\n                systemID,\n                psshDataSize;\n            let boxStart = byteCursor;\n\n            if (byteCursor >= dv.buffer.byteLength)\n                break;\n\n            /* Box size */\n            size = dv.getUint32(byteCursor);\n            nextBox = byteCursor + size;\n            byteCursor += 4;\n\n            /* Verify PSSH */\n            if (dv.getUint32(byteCursor) !== 0x70737368) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor += 4;\n\n            /* Version must be 0 or 1 */\n            version = dv.getUint8(byteCursor);\n            if (version !== 0 && version !== 1) {\n                byteCursor = nextBox;\n                continue;\n            }\n            byteCursor++;\n\n            byteCursor += 3; /* skip flags */\n\n            // 16-byte UUID/SystemID\n            systemID = '';\n            let i, val;\n            for (i = 0; i < 4; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 4;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 2; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 2;\n            systemID += '-';\n            for (i = 0; i < 6; i++) {\n                val = dv.getUint8(byteCursor + i).toString(16);\n                systemID += (val.length === 1) ? '0' + val : val;\n            }\n            byteCursor += 6;\n\n            systemID = systemID.toLowerCase();\n\n            /* PSSH Data Size */\n            psshDataSize = dv.getUint32(byteCursor);\n            byteCursor += 4;\n\n            /* PSSH Data */\n            pssh[systemID] = dv.buffer.slice(boxStart, nextBox);\n            byteCursor = nextBox;\n        }\n\n        return pssh;\n    }\n}\n\nexport default CommonEncryption;\n"]},"metadata":{},"sourceType":"script"}