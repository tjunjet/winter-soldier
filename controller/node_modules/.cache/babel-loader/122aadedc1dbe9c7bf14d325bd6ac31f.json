{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction DVBSelector(config) {\n  config = config || {};\n  var instance = void 0;\n  var blacklistController = config.blacklistController;\n\n  function getNonBlacklistedBaseUrls(urls) {\n    var removedPriorities = [];\n\n    var samePrioritiesFilter = function samePrioritiesFilter(el) {\n      if (removedPriorities.length) {\n        if (el.dvb_priority && removedPriorities.indexOf(el.dvb_priority) !== -1) {\n          return false;\n        }\n      }\n\n      return true;\n    };\n\n    var serviceLocationFilter = function serviceLocationFilter(baseUrl) {\n      if (blacklistController.contains(baseUrl.serviceLocation)) {\n        // whenever a BaseURL is removed from the available list of\n        // BaseURLs, any other BaseURL with the same @priority\n        // value as the BaseURL being removed shall also be removed\n        if (baseUrl.dvb_priority) {\n          removedPriorities.push(baseUrl.dvb_priority);\n        } // all URLs in the list which have a @serviceLocation\n        // attribute matching an entry in the blacklist shall be\n        // removed from the available list of BaseURLs\n\n\n        return false;\n      }\n\n      return true;\n    };\n\n    return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);\n  }\n\n  function selectByWeight(availableUrls) {\n    var prioritySorter = function prioritySorter(a, b) {\n      var diff = a.dvb_priority - b.dvb_priority;\n      return isNaN(diff) ? 0 : diff;\n    };\n\n    var topPriorityFilter = function topPriorityFilter(baseUrl, idx, arr) {\n      return !idx || arr[0].dvb_priority && baseUrl.dvb_priority && arr[0].dvb_priority === baseUrl.dvb_priority;\n    };\n\n    var totalWeight = 0;\n    var cumulWeights = [];\n    var idx = 0;\n    var rn = void 0,\n        urls = void 0; // It shall begin by taking the set of resolved BaseURLs present or inherited at the current\n    // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest\n    // @priority attribute value.\n\n    urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);\n\n    if (urls.length) {\n      if (urls.length > 1) {\n        // If there is more than one BaseURL with this lowest @priority attribute value then the Player\n        // shall select one of them at random such that the probability of each BaseURL being chosen\n        // is proportional to the value of its @weight attribute. The method described in RFC 2782\n        // [26] or picking from a number of weighted entries is suitable for this, but there may be other\n        // algorithms which achieve the same effect.\n        // add all the weights together, storing the accumulated weight per entry\n        urls.forEach(function (baseUrl) {\n          totalWeight += baseUrl.dvb_weight;\n          cumulWeights.push(totalWeight);\n        }); // pick a random number between zero and totalWeight\n\n        rn = Math.floor(Math.random() * (totalWeight - 1)); // select the index for the range rn falls within\n\n        cumulWeights.every(function (limit, index) {\n          idx = index;\n\n          if (rn < limit) {\n            return false;\n          }\n\n          return true;\n        });\n      }\n\n      return urls[idx];\n    }\n  }\n\n  function select(baseUrls) {\n    return baseUrls && selectByWeight(getNonBlacklistedBaseUrls(baseUrls));\n  }\n\n  instance = {\n    select: select\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nDVBSelector.__dashjs_factory_name = 'DVBSelector';\nexports.default = _FactoryMaker2.default.getClassFactory(DVBSelector);","map":{"version":3,"mappings":"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","names":["DVBSelector","config","instance","blacklistController","getNonBlacklistedBaseUrls","urls","removedPriorities","samePrioritiesFilter","el","length","dvb_priority","indexOf","serviceLocationFilter","baseUrl","contains","serviceLocation","push","filter","selectByWeight","availableUrls","prioritySorter","a","b","diff","isNaN","topPriorityFilter","idx","arr","totalWeight","cumulWeights","rn","sort","forEach","dvb_weight","Math","floor","random","every","limit","index","select","baseUrls","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/utils/baseUrlResolution/DVBSelector.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\n\nfunction DVBSelector(config) {\n\n    config = config || {};\n    let instance;\n\n    const blacklistController = config.blacklistController;\n\n    function getNonBlacklistedBaseUrls(urls) {\n        let removedPriorities = [];\n\n        const samePrioritiesFilter = function (el) {\n            if (removedPriorities.length) {\n                if ((el.dvb_priority) &&\n                        (removedPriorities.indexOf(el.dvb_priority) !== -1)) {\n                    return false;\n                }\n            }\n\n            return true;\n        };\n\n        const serviceLocationFilter = function (baseUrl) {\n            if (blacklistController.contains(baseUrl.serviceLocation)) {\n                // whenever a BaseURL is removed from the available list of\n                // BaseURLs, any other BaseURL with the same @priority\n                // value as the BaseURL being removed shall also be removed\n                if (baseUrl.dvb_priority) {\n                    removedPriorities.push(baseUrl.dvb_priority);\n                }\n\n                // all URLs in the list which have a @serviceLocation\n                // attribute matching an entry in the blacklist shall be\n                // removed from the available list of BaseURLs\n                return false;\n            }\n\n            return true;\n        };\n\n        return urls.filter(serviceLocationFilter).filter(samePrioritiesFilter);\n    }\n\n    function selectByWeight(availableUrls) {\n        const prioritySorter = function (a, b) {\n            let diff = a.dvb_priority - b.dvb_priority;\n            return isNaN(diff) ? 0 : diff;\n        };\n\n        const topPriorityFilter = function (baseUrl, idx, arr) {\n            return !idx || (\n                (arr[0].dvb_priority && baseUrl.dvb_priority) &&\n                (arr[0].dvb_priority === baseUrl.dvb_priority)\n            );\n        };\n\n        let totalWeight = 0;\n        let cumulWeights = [];\n        let idx = 0;\n        let rn,\n            urls;\n\n        // It shall begin by taking the set of resolved BaseURLs present or inherited at the current\n        // position in the MPD, resolved and filtered as described in 10.8.2.1, that have the lowest\n        // @priority attribute value.\n        urls = availableUrls.sort(prioritySorter).filter(topPriorityFilter);\n\n        if (urls.length) {\n            if (urls.length > 1) {\n                // If there is more than one BaseURL with this lowest @priority attribute value then the Player\n                // shall select one of them at random such that the probability of each BaseURL being chosen\n                // is proportional to the value of its @weight attribute. The method described in RFC 2782\n                // [26] or picking from a number of weighted entries is suitable for this, but there may be other\n                // algorithms which achieve the same effect.\n\n                // add all the weights together, storing the accumulated weight per entry\n                urls.forEach(baseUrl => {\n                    totalWeight += baseUrl.dvb_weight;\n                    cumulWeights.push(totalWeight);\n                });\n\n                // pick a random number between zero and totalWeight\n                rn = Math.floor(Math.random() * (totalWeight - 1));\n\n                // select the index for the range rn falls within\n                cumulWeights.every((limit, index) => {\n                    idx = index;\n\n                    if (rn < limit) {\n                        return false;\n                    }\n\n                    return true;\n                });\n            }\n\n            return urls[idx];\n        }\n    }\n\n    function select(baseUrls) {\n        return baseUrls && selectByWeight(\n            getNonBlacklistedBaseUrls(\n                baseUrls\n            )\n        );\n    }\n\n    instance = {\n        select: select\n    };\n\n    return instance;\n}\n\nDVBSelector.__dashjs_factory_name = 'DVBSelector';\nexport default FactoryMaker.getClassFactory(DVBSelector);\n"]},"metadata":{},"sourceType":"script"}