{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _imsc = require('imsc');\n\nvar _MediaPlayerEvents = require('../MediaPlayerEvents');\n\nvar _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents);\n\nvar _ConformanceViolationConstants = require('../constants/ConformanceViolationConstants');\n\nvar _ConformanceViolationConstants2 = _interopRequireDefault(_ConformanceViolationConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction TTMLParser() {\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  /*\n  * This TTML parser follows \"EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380\" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.\n  * */\n\n  var instance = void 0,\n      logger = void 0;\n  var cueCounter = 0; // Used to give every cue a unique ID.\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n  }\n\n  function getCueID() {\n    var id = 'cue_TTML_' + cueCounter;\n    cueCounter++;\n    return id;\n  }\n  /**\n  * Parse the raw data and process it to return the HTML element representing the cue.\n  * Return the region to be processed and controlled (hide/show) by the caption controller.\n  * @param {string} data - raw data received from the TextSourceBuffer\n  * @param {number} offsetTime - offset time to apply to cue time\n  * @param {integer} startTimeSegment - startTime for the current segment\n  * @param {integer} endTimeSegment - endTime for the current segment\n  * @param {Array} images - images array referenced by subs MP4 box\n  */\n\n\n  function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {\n    var errorMsg = '';\n    var captionArray = [];\n    var startTime = void 0,\n        endTime = void 0,\n        i = void 0;\n    var content = {};\n    var embeddedImages = {};\n    var currentImageId = '';\n    var accumulated_image_data = '';\n    var metadataHandler = {\n      onOpenTag: function onOpenTag(ns, name, attrs) {\n        // cope with existing non-compliant content\n        if (attrs[' imagetype'] && !attrs[' imageType']) {\n          eventBus.trigger(_MediaPlayerEvents2.default.CONFORMANCE_VIOLATION, {\n            level: _ConformanceViolationConstants2.default.LEVELS.ERROR,\n            event: _ConformanceViolationConstants2.default.EVENTS.NON_COMPLIANT_SMPTE_IMAGE_ATTRIBUTE\n          });\n          attrs[' imageType'] = attrs[' imagetype'];\n        }\n\n        if (name === 'image' && (ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt' || ns === 'http://www.smpte-ra.org/schemas/2052-1/2013/smpte-tt')) {\n          if (!attrs[' imageType'] || attrs[' imageType'].value !== 'PNG') {\n            logger.warn('smpte-tt imageType != PNG. Discarded');\n            return;\n          }\n\n          currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;\n        }\n      },\n      onCloseTag: function onCloseTag() {\n        if (currentImageId) {\n          embeddedImages[currentImageId] = accumulated_image_data.trim();\n        }\n\n        accumulated_image_data = '';\n        currentImageId = '';\n      },\n      onText: function onText(contents) {\n        if (currentImageId) {\n          accumulated_image_data = accumulated_image_data + contents;\n        }\n      }\n    };\n\n    if (!data) {\n      errorMsg = 'no ttml data to parse';\n      throw new Error(errorMsg);\n    }\n\n    content.data = data;\n    eventBus.trigger(_Events2.default.TTML_TO_PARSE, content);\n    var imsc1doc = (0, _imsc.fromXML)(content.data, function (msg) {\n      errorMsg = msg;\n    }, metadataHandler);\n    eventBus.trigger(_Events2.default.TTML_PARSED, {\n      ttmlString: content.data,\n      ttmlDoc: imsc1doc\n    });\n    var mediaTimeEvents = imsc1doc.getMediaTimeEvents();\n\n    for (i = 0; i < mediaTimeEvents.length; i++) {\n      var isd = (0, _imsc.generateISD)(imsc1doc, mediaTimeEvents[i], function (error) {\n        errorMsg = error;\n      });\n\n      if (isd.contents.some(function (topLevelContents) {\n        return topLevelContents.contents.length;\n      })) {\n        //be sure that mediaTimeEvents values are in the mp4 segment time ranges.\n        startTime = mediaTimeEvents[i] + offsetTime < startTimeSegment ? startTimeSegment : mediaTimeEvents[i] + offsetTime;\n        endTime = mediaTimeEvents[i + 1] + offsetTime > endTimeSegment ? endTimeSegment : mediaTimeEvents[i + 1] + offsetTime;\n\n        if (startTime < endTime) {\n          captionArray.push({\n            start: startTime,\n            end: endTime,\n            type: 'html',\n            cueID: getCueID(),\n            isd: isd,\n            images: images,\n            embeddedImages: embeddedImages\n          });\n        }\n      }\n    }\n\n    if (errorMsg !== '') {\n      logger.error(errorMsg);\n      throw new Error(errorMsg);\n    }\n\n    return captionArray;\n  }\n\n  instance = {\n    parse: parse\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nTTMLParser.__dashjs_factory_name = 'TTMLParser';\nexports.default = _FactoryMaker2.default.getSingletonFactory(TTMLParser);","map":{"version":3,"mappings":"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","names":["TTMLParser","context","eventBus","getInstance","instance","logger","cueCounter","setup","getLogger","getCueID","id","parse","data","offsetTime","startTimeSegment","endTimeSegment","images","errorMsg","captionArray","startTime","endTime","i","content","embeddedImages","currentImageId","accumulated_image_data","metadataHandler","onOpenTag","ns","name","attrs","trigger","MediaPlayerEvents","CONFORMANCE_VIOLATION","level","ConformanceViolationConstants","LEVELS","ERROR","event","EVENTS","NON_COMPLIANT_SMPTE_IMAGE_ATTRIBUTE","value","warn","onCloseTag","trim","onText","contents","Error","Events","TTML_TO_PARSE","imsc1doc","msg","TTML_PARSED","ttmlString","ttmlDoc","mediaTimeEvents","getMediaTimeEvents","length","isd","error","some","topLevelContents","push","start","end","type","cueID","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/utils/TTMLParser.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport {fromXML, generateISD} from 'imsc';\nimport MediaPlayerEvents from '../MediaPlayerEvents';\nimport ConformanceViolationConstants from '../constants/ConformanceViolationConstants';\n\nfunction TTMLParser() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    /*\n     * This TTML parser follows \"EBU-TT-D SUBTITLING DISTRIBUTION FORMAT - tech3380\" spec - https://tech.ebu.ch/docs/tech/tech3380.pdf.\n     * */\n    let instance,\n        logger;\n\n    let cueCounter = 0; // Used to give every cue a unique ID.\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function getCueID() {\n        const id = 'cue_TTML_' + cueCounter;\n        cueCounter++;\n        return id;\n    }\n\n    /**\n     * Parse the raw data and process it to return the HTML element representing the cue.\n     * Return the region to be processed and controlled (hide/show) by the caption controller.\n     * @param {string} data - raw data received from the TextSourceBuffer\n     * @param {number} offsetTime - offset time to apply to cue time\n     * @param {integer} startTimeSegment - startTime for the current segment\n     * @param {integer} endTimeSegment - endTime for the current segment\n     * @param {Array} images - images array referenced by subs MP4 box\n     */\n    function parse(data, offsetTime, startTimeSegment, endTimeSegment, images) {\n        let errorMsg = '';\n        const captionArray = [];\n        let startTime,\n            endTime,\n            i;\n\n        const content = {};\n\n        const embeddedImages = {};\n        let currentImageId = '';\n        let accumulated_image_data = '';\n        let metadataHandler = {\n\n            onOpenTag: function (ns, name, attrs) {\n                // cope with existing non-compliant content\n                if (attrs[' imagetype'] && !attrs[' imageType']) {\n                    eventBus.trigger(MediaPlayerEvents.CONFORMANCE_VIOLATION, {\n                        level: ConformanceViolationConstants.LEVELS.ERROR,\n                        event: ConformanceViolationConstants.EVENTS.NON_COMPLIANT_SMPTE_IMAGE_ATTRIBUTE\n                    });\n                    attrs[' imageType'] = attrs[' imagetype'];\n                }\n\n                if (name === 'image' &&\n                    (ns === 'http://www.smpte-ra.org/schemas/2052-1/2010/smpte-tt' ||\n                        ns === 'http://www.smpte-ra.org/schemas/2052-1/2013/smpte-tt')) {\n                    if (!attrs[' imageType'] || attrs[' imageType'].value !== 'PNG') {\n                        logger.warn('smpte-tt imageType != PNG. Discarded');\n                        return;\n                    }\n                    currentImageId = attrs['http://www.w3.org/XML/1998/namespace id'].value;\n                }\n            },\n\n            onCloseTag: function () {\n                if (currentImageId) {\n                    embeddedImages[currentImageId] = accumulated_image_data.trim();\n                }\n                accumulated_image_data = '';\n                currentImageId = '';\n            },\n\n            onText: function (contents) {\n                if (currentImageId) {\n                    accumulated_image_data = accumulated_image_data + contents;\n                }\n            }\n        };\n\n        if (!data) {\n            errorMsg = 'no ttml data to parse';\n            throw new Error(errorMsg);\n        }\n\n        content.data = data;\n\n        eventBus.trigger(Events.TTML_TO_PARSE, content);\n\n        const imsc1doc = fromXML(content.data, function (msg) {\n            errorMsg = msg;\n        }, metadataHandler);\n\n        eventBus.trigger(Events.TTML_PARSED, { ttmlString: content.data, ttmlDoc: imsc1doc });\n\n        const mediaTimeEvents = imsc1doc.getMediaTimeEvents();\n\n        for (i = 0; i < mediaTimeEvents.length; i++) {\n            let isd = generateISD(imsc1doc, mediaTimeEvents[i], function (error) {\n                errorMsg = error;\n            });\n\n            if (isd.contents.some(topLevelContents => topLevelContents.contents.length)) {\n                //be sure that mediaTimeEvents values are in the mp4 segment time ranges.\n                startTime = (mediaTimeEvents[i] + offsetTime) < startTimeSegment ? startTimeSegment : (mediaTimeEvents[i] + offsetTime);\n                endTime = (mediaTimeEvents[i + 1] + offsetTime) > endTimeSegment ? endTimeSegment : (mediaTimeEvents[i + 1] + offsetTime);\n\n                if (startTime < endTime) {\n                    captionArray.push({\n                        start: startTime,\n                        end: endTime,\n                        type: 'html',\n                        cueID: getCueID(),\n                        isd: isd,\n                        images: images,\n                        embeddedImages: embeddedImages\n                    });\n                }\n            }\n        }\n\n        if (errorMsg !== '') {\n            logger.error(errorMsg);\n            throw new Error(errorMsg);\n        }\n\n        return captionArray;\n    }\n\n    instance = {\n        parse: parse\n    };\n\n    setup();\n    return instance;\n}\n\nTTMLParser.__dashjs_factory_name = 'TTMLParser';\nexport default FactoryMaker.getSingletonFactory(TTMLParser);\n"]},"metadata":{},"sourceType":"script"}