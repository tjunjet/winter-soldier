{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _MetricsController = require('./MetricsController');\n\nvar _MetricsController2 = _interopRequireDefault(_MetricsController);\n\nvar _ManifestParsing = require('../utils/ManifestParsing');\n\nvar _ManifestParsing2 = _interopRequireDefault(_ManifestParsing);\n\nvar _MetricsReportingEvents = require('../MetricsReportingEvents');\n\nvar _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction MetricsCollectionController(config) {\n  config = config || {};\n  var instance = void 0;\n  var metricsControllers = {};\n  var context = this.context;\n  var eventBus = config.eventBus;\n  var events = config.events;\n\n  function update(e) {\n    if (e.error) {\n      return;\n    } // start by assuming all existing controllers need removing\n\n\n    var controllersToRemove = Object.keys(metricsControllers);\n    var metrics = (0, _ManifestParsing2.default)(context).getInstance({\n      adapter: config.adapter,\n      constants: config.constants\n    }).getMetrics(e.manifest);\n    metrics.forEach(function (m) {\n      var key = JSON.stringify(m);\n\n      if (!metricsControllers.hasOwnProperty(key)) {\n        try {\n          var controller = (0, _MetricsController2.default)(context).create(config);\n          controller.initialize(m);\n          metricsControllers[key] = controller;\n        } catch (e) {// fail quietly\n        }\n      } else {\n        // we still need this controller - delete from removal list\n        controllersToRemove.splice(key, 1);\n      }\n    }); // now remove the unwanted controllers\n\n    controllersToRemove.forEach(function (c) {\n      metricsControllers[c].reset();\n      delete metricsControllers[c];\n    });\n    eventBus.trigger(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE);\n  }\n\n  function resetMetricsControllers() {\n    Object.keys(metricsControllers).forEach(function (key) {\n      metricsControllers[key].reset();\n    });\n    metricsControllers = {};\n  }\n\n  function setup() {\n    eventBus.on(events.MANIFEST_UPDATED, update, instance);\n    eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\n  }\n\n  function reset() {\n    eventBus.off(events.MANIFEST_UPDATED, update, instance);\n    eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\n  }\n\n  instance = {\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexports.default = dashjs.FactoryMaker.getClassFactory(MetricsCollectionController);\n/* jshint ignore:line */","map":{"version":3,"mappings":";;;;;;AA+BA;;;;AACA;;;;AACA;;;;;;;;AAEA;;AAAA,SAASA,2BAAT,CAAqCC,MAArC,EAA6C;EAEzCA,SAASA,UAAU,EAAnBA;EACA,IAAIC,iBAAJ;EACA,IAAIC,qBAAqB,EAAzB;EACA,IAAIC,UAAU,KAAKA,OAAnB;EACA,IAAIC,WAAWJ,OAAOI,QAAtB;EACA,IAAMC,SAASL,OAAOK,MAAtB;;EAEA,SAASC,MAAT,CAAgBC,CAAhB,EAAmB;IACf,IAAIA,EAAEC,KAAN,EAAa;MACT;IAGJ,CALe,CAKf;;;IACA,IAAIC,sBAAsBC,OAAOC,IAAPD,CAAYR,kBAAZQ,CAA1B;IAEA,IAAME,UAAU,+BAAgBT,OAAhB,EAAyBU,WAAzB,CAAqC;MACjDC,SAASd,OAAOc,OADiC;MAEjDC,WAAWf,OAAOe;IAF+B,CAArC,EAGbC,UAHa,CAGFT,EAAEU,QAHA,CAAhB;IAKAL,QAAQM,OAARN,CAAgB,aAAK;MACjB,IAAMO,MAAMC,KAAKC,SAALD,CAAeE,CAAfF,CAAZ;;MAEA,IAAI,CAAClB,mBAAmBqB,cAAnBrB,CAAkCiB,GAAlCjB,CAAL,EAA6C;QACzC,IAAI;UACA,IAAIsB,aAAa,iCAAkBrB,OAAlB,EAA2BsB,MAA3B,CAAkCzB,MAAlC,CAAjB;UACAwB,WAAWE,UAAXF,CAAsBF,CAAtBE;UACAtB,mBAAmBiB,GAAnBjB,IAA0BsB,UAA1BtB;QACF,CAJF,CAIE,OAAOK,CAAP,EAAU,CACR;QAEP;MARD,OAQO;QACH;QACAE,oBAAoBkB,MAApBlB,CAA2BU,GAA3BV,EAAgC,CAAhCA;MAEP;IAfD,GAbe,CA8Bf;;IACAA,oBAAoBS,OAApBT,CAA4B,aAAK;MAC7BP,mBAAmB0B,CAAnB1B,EAAsB2B,KAAtB3B;MACA,OAAOA,mBAAmB0B,CAAnB1B,CAAP;IAFJ;IAKAE,SAAS0B,OAAT1B,CAAiB2B,iCAAuBC,+BAAxC5B;EAGJ;;EAAA,SAAS6B,uBAAT,GAAmC;IAC/BvB,OAAOC,IAAPD,CAAYR,kBAAZQ,EAAgCQ,OAAhCR,CAAwC,eAAO;MAC3CR,mBAAmBiB,GAAnBjB,EAAwB2B,KAAxB3B;IADJ;IAIAA,qBAAqB,EAArBA;EAGJ;;EAAA,SAASgC,KAAT,GAAiB;IACb9B,SAAS+B,EAAT/B,CAAYC,OAAO+B,gBAAnBhC,EAAqCE,MAArCF,EAA6CH,QAA7CG;IACAA,SAAS+B,EAAT/B,CAAYC,OAAOgC,wBAAnBjC,EAA6C6B,uBAA7C7B,EAAsEH,QAAtEG;EAGJ;;EAAA,SAASyB,KAAT,GAAiB;IACbzB,SAASkC,GAATlC,CAAaC,OAAO+B,gBAApBhC,EAAsCE,MAAtCF,EAA8CH,QAA9CG;IACAA,SAASkC,GAATlC,CAAaC,OAAOgC,wBAApBjC,EAA8C6B,uBAA9C7B,EAAuEH,QAAvEG;EAGJH;;EAAAA,WAAW;IACP4B,OAAOA;EADA,CAAX5B;EAIAiC;EACA,OAAOjC,QAAP;AA1GJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GAF,4BAA4BwC,qBAA5BxC,GAAoD,6BAApDA;kBACeyC,OAAOC,YAAPD,CAAoBE,eAApBF,CAAoCzC,2BAApCyC,C;AAAkE","names":["MetricsCollectionController","config","instance","metricsControllers","context","eventBus","events","update","e","error","controllersToRemove","Object","keys","metrics","getInstance","adapter","constants","getMetrics","manifest","forEach","key","JSON","stringify","m","hasOwnProperty","controller","create","initialize","splice","c","reset","trigger","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","resetMetricsControllers","setup","on","MANIFEST_UPDATED","STREAM_TEARDOWN_COMPLETE","off","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/controllers/MetricsCollectionController.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsController from './MetricsController';\nimport ManifestParsing from '../utils/ManifestParsing';\nimport MetricsReportingEvents from '../MetricsReportingEvents';\n\nfunction MetricsCollectionController(config) {\n\n    config = config || {};\n    let instance;\n    let metricsControllers = {};\n    let context = this.context;\n    let eventBus = config.eventBus;\n    const events = config.events;\n\n    function update(e) {\n        if (e.error) {\n            return;\n        }\n\n        // start by assuming all existing controllers need removing\n        let controllersToRemove = Object.keys(metricsControllers);\n\n        const metrics = ManifestParsing(context).getInstance({\n            adapter: config.adapter,\n            constants: config.constants\n        }).getMetrics(e.manifest);\n\n        metrics.forEach(m => {\n            const key = JSON.stringify(m);\n\n            if (!metricsControllers.hasOwnProperty(key)) {\n                try {\n                    let controller = MetricsController(context).create(config);\n                    controller.initialize(m);\n                    metricsControllers[key] = controller;\n                } catch (e) {\n                    // fail quietly\n                }\n            } else {\n                // we still need this controller - delete from removal list\n                controllersToRemove.splice(key, 1);\n            }\n        });\n\n        // now remove the unwanted controllers\n        controllersToRemove.forEach(c => {\n            metricsControllers[c].reset();\n            delete metricsControllers[c];\n        });\n\n        eventBus.trigger(MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE);\n    }\n\n    function resetMetricsControllers() {\n        Object.keys(metricsControllers).forEach(key => {\n            metricsControllers[key].reset();\n        });\n\n        metricsControllers = {};\n    }\n\n    function setup() {\n        eventBus.on(events.MANIFEST_UPDATED, update, instance);\n        eventBus.on(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\n    }\n\n    function reset() {\n        eventBus.off(events.MANIFEST_UPDATED, update, instance);\n        eventBus.off(events.STREAM_TEARDOWN_COMPLETE, resetMetricsControllers, instance);\n    }\n\n    instance = {\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nMetricsCollectionController.__dashjs_factory_name = 'MetricsCollectionController';\nexport default dashjs.FactoryMaker.getClassFactory(MetricsCollectionController); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}