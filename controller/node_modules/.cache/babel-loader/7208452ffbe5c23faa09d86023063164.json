{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _CommonEncryption = require('../CommonEncryption');\n\nvar _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);\n\nvar _ProtectionConstants = require('../../constants/ProtectionConstants');\n\nvar _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* Microsoft PlayReady DRM\n*\n* @class\n* @implements KeySystem\n*/\n\n\nvar uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nvar systemString = _ProtectionConstants2.default.PLAYREADY_KEYSTEM_STRING;\nvar schemeIdURI = 'urn:uuid:' + uuid;\nvar PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nvar protData = void 0;\n\nfunction KeySystemPlayReady(config) {\n  config = config || {};\n  var instance = void 0;\n  var messageFormat = 'utf-16';\n  var BASE64 = config.BASE64;\n\n  function checkConfig() {\n    if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray')) {\n      throw new Error('Missing config parameter(s)');\n    }\n  }\n\n  function getRequestHeadersFromMessage(message) {\n    var msg = void 0,\n        xmlDoc = void 0;\n    var headers = {};\n    var parser = new DOMParser();\n    var dataview = messageFormat === 'utf-16' ? new Uint16Array(message) : new Uint8Array(message);\n    msg = String.fromCharCode.apply(null, dataview);\n    xmlDoc = parser.parseFromString(msg, 'application/xml');\n    var headerNameList = xmlDoc.getElementsByTagName('name');\n    var headerValueList = xmlDoc.getElementsByTagName('value');\n\n    for (var i = 0; i < headerNameList.length; i++) {\n      headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n    } // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n    // this is NOT w3c conform and license servers may reject the request!\n    // -> rename it to proper w3c definition!\n\n\n    if (headers.hasOwnProperty('Content')) {\n      headers['Content-Type'] = headers.Content;\n      delete headers.Content;\n    } // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\n    // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\n\n\n    if (!headers.hasOwnProperty('Content-Type')) {\n      headers['Content-Type'] = 'text/xml; charset=utf-8';\n    }\n\n    return headers;\n  }\n\n  function getLicenseRequestFromMessage(message) {\n    var licenseRequest = null;\n    var parser = new DOMParser();\n    var dataview = messageFormat === 'utf-16' ? new Uint16Array(message) : new Uint8Array(message);\n    checkConfig();\n    var msg = String.fromCharCode.apply(null, dataview);\n    var xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n    if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\n      var Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n\n      if (Challenge) {\n        licenseRequest = BASE64.decode(Challenge);\n      }\n    } else {\n      // The message from CDM is not a wrapped message as on IE11 and Edge,\n      // thus it contains direclty the challenge itself\n      // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\n      return message;\n    }\n\n    return licenseRequest;\n  }\n\n  function getLicenseServerURLFromInitData(initData) {\n    if (initData) {\n      var data = new DataView(initData);\n      var numRecords = data.getUint16(4, true);\n      var offset = 6;\n      var parser = new DOMParser();\n\n      for (var i = 0; i < numRecords; i++) {\n        // Parse the PlayReady Record header\n        var recordType = data.getUint16(offset, true);\n        offset += 2;\n        var recordLength = data.getUint16(offset, true);\n        offset += 2;\n\n        if (recordType !== 0x0001) {\n          offset += recordLength;\n          continue;\n        }\n\n        var recordData = initData.slice(offset, offset + recordLength);\n        var record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n        var xmlDoc = parser.parseFromString(record, 'application/xml'); // First try <LA_URL>\n\n        if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n          var laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n\n          if (laurl) {\n            return laurl;\n          }\n        } // Optionally, try <LUI_URL>\n\n\n        if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n          var luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n\n          if (luiurl) {\n            return luiurl;\n          }\n        }\n      }\n    }\n\n    return null;\n  }\n\n  function getInitData(cpData) {\n    // * desc@ getInitData\n    // *   generate PSSH data from PROHeader defined in MPD file\n    // *   PSSH format:\n    // *   size (4)\n    // *   box type(PSSH) (8)\n    // *   Protection SystemID (16)\n    // *   protection system data size (4) - length of decoded PROHeader\n    // *   decoded PROHeader data from MPD file\n    var PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n\n    var playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n    var byteCursor = 0;\n    var uint8arraydecodedPROHeader = null;\n    var PROSize = void 0,\n        PSSHSize = void 0,\n        PSSHBoxBuffer = void 0,\n        PSSHBox = void 0,\n        PSSHData = void 0;\n    checkConfig();\n\n    if (!cpData) {\n      return null;\n    } // Handle common encryption PSSH\n\n\n    if ('pssh' in cpData) {\n      return _CommonEncryption2.default.parseInitDataFromContentProtection(cpData, BASE64);\n    } // Handle native MS PlayReady ContentProtection elements\n\n\n    if ('pro' in cpData) {\n      uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n    } else if ('prheader' in cpData) {\n      uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n    } else {\n      return null;\n    }\n\n    PROSize = uint8arraydecodedPROHeader.length;\n    PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n    PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n    PSSHBox = new Uint8Array(PSSHBoxBuffer);\n    PSSHData = new DataView(PSSHBoxBuffer);\n    PSSHData.setUint32(byteCursor, PSSHSize);\n    byteCursor += 0x4;\n    PSSHBox.set(PSSHBoxType, byteCursor);\n    byteCursor += PSSHBoxType.length;\n    PSSHBox.set(playreadySystemID, byteCursor);\n    byteCursor += playreadySystemID.length;\n    PSSHData.setUint32(byteCursor, PROSize);\n    byteCursor += 0x4;\n    PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n    byteCursor += PROSize;\n    return PSSHBox.buffer;\n  }\n  /**\n  * It seems that some PlayReady implementations return their XML-based CDM\n  * messages using UTF16, while others return them as UTF8.  Use this function\n  * to modify the message format to expect when parsing CDM messages.\n  *\n  * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\n  * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n  */\n\n\n  function setPlayReadyMessageFormat(format) {\n    if (format !== 'utf-8' && format !== 'utf-16') {\n      throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\n    }\n\n    messageFormat = format;\n  }\n  /**\n  * Initialize the Key system with protection data\n  * @param {Object} protectionData the protection data\n  */\n\n\n  function init(protectionData) {\n    if (protectionData) {\n      protData = protectionData;\n    }\n  }\n  /**\n  * Get Playready Custom data\n  */\n\n\n  function getCDMData() {\n    var customData = void 0,\n        cdmData = void 0,\n        cdmDataBytes = void 0,\n        i = void 0;\n    checkConfig();\n\n    if (protData && protData.cdmData) {\n      // Convert custom data into multibyte string\n      customData = [];\n\n      for (i = 0; i < protData.cdmData.length; ++i) {\n        customData.push(protData.cdmData.charCodeAt(i));\n        customData.push(0);\n      }\n\n      customData = String.fromCharCode.apply(null, customData); // Encode in Base 64 the custom data string\n\n      customData = BASE64.encode(customData); // Initialize CDM data with Base 64 encoded custom data\n      // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n\n      cdmData = PRCDMData.replace('%CUSTOMDATA%', customData); // Convert CDM data into multibyte characters\n\n      cdmDataBytes = [];\n\n      for (i = 0; i < cdmData.length; ++i) {\n        cdmDataBytes.push(cdmData.charCodeAt(i));\n        cdmDataBytes.push(0);\n      }\n\n      return new Uint8Array(cdmDataBytes).buffer;\n    }\n\n    return null;\n  }\n\n  function getSessionId(cp) {\n    // Get sessionId from protectionData or from manifest\n    if (protData && protData.sessionId) {\n      return protData.sessionId;\n    } else if (cp && cp.sessionId) {\n      return cp.sessionId;\n    }\n\n    return null;\n  }\n\n  instance = {\n    uuid: uuid,\n    schemeIdURI: schemeIdURI,\n    systemString: systemString,\n    getInitData: getInitData,\n    getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n    getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n    getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n    getCDMData: getCDMData,\n    getSessionId: getSessionId,\n    setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n    init: init\n  };\n  return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady);\n/* jshint ignore:line */","map":{"version":3,"mappings":"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","names":["uuid","systemString","ProtectionConstants","PLAYREADY_KEYSTEM_STRING","schemeIdURI","PRCDMData","protData","KeySystemPlayReady","config","instance","messageFormat","BASE64","checkConfig","hasOwnProperty","Error","getRequestHeadersFromMessage","message","msg","xmlDoc","headers","parser","DOMParser","dataview","Uint16Array","Uint8Array","String","fromCharCode","apply","parseFromString","headerNameList","getElementsByTagName","headerValueList","i","length","childNodes","nodeValue","Content","getLicenseRequestFromMessage","licenseRequest","Challenge","decode","getLicenseServerURLFromInitData","initData","data","DataView","numRecords","getUint16","offset","recordType","recordLength","recordData","slice","record","laurl","luiurl","getInitData","cpData","PSSHBoxType","playreadySystemID","byteCursor","uint8arraydecodedPROHeader","PROSize","PSSHSize","PSSHBoxBuffer","PSSHBox","PSSHData","CommonEncryption","parseInitDataFromContentProtection","decodeArray","pro","__text","prheader","ArrayBuffer","setUint32","set","buffer","setPlayReadyMessageFormat","format","init","protectionData","getCDMData","customData","cdmData","cdmDataBytes","push","charCodeAt","encode","replace","getSessionId","cp","sessionId","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/protection/drm/KeySystemPlayReady.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Microsoft PlayReady DRM\n *\n * @class\n * @implements KeySystem\n */\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = '9a04f079-9840-4286-ab92-e65be0885f95';\nconst systemString = ProtectionConstants.PLAYREADY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\nconst PRCDMData = '<PlayReadyCDMData type=\"LicenseAcquisition\"><LicenseAcquisition version=\"1.0\" Proactive=\"false\"><CustomData encoding=\"base64encoded\">%CUSTOMDATA%</CustomData></LicenseAcquisition></PlayReadyCDMData>';\nlet protData;\n\nfunction KeySystemPlayReady(config) {\n\n    config = config || {};\n    let instance;\n    let messageFormat = 'utf-16';\n    const BASE64 = config.BASE64;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray') || !BASE64.hasOwnProperty('decodeArray') ) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getRequestHeadersFromMessage(message) {\n        let msg,\n            xmlDoc;\n        const headers = {};\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        msg = String.fromCharCode.apply(null, dataview);\n        xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        const headerNameList = xmlDoc.getElementsByTagName('name');\n        const headerValueList = xmlDoc.getElementsByTagName('value');\n        for (let i = 0; i < headerNameList.length; i++) {\n            headers[headerNameList[i].childNodes[0].nodeValue] = headerValueList[i].childNodes[0].nodeValue;\n        }\n        // Some versions of the PlayReady CDM return 'Content' instead of 'Content-Type'.\n        // this is NOT w3c conform and license servers may reject the request!\n        // -> rename it to proper w3c definition!\n        if (headers.hasOwnProperty('Content')) {\n            headers['Content-Type'] = headers.Content;\n            delete headers.Content;\n        }\n        // Set Content-Type header by default if not provided in the the CDM message (<PlayReadyKeyMessage/>)\n        // or if the message contains directly the challenge itself (Ex: LG SmartTVs)\n        if (!headers.hasOwnProperty('Content-Type')) {\n            headers['Content-Type'] = 'text/xml; charset=utf-8';\n        }\n        return headers;\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        let licenseRequest = null;\n        const parser = new DOMParser();\n        const dataview = (messageFormat === 'utf-16') ? new Uint16Array(message) : new Uint8Array(message);\n\n        checkConfig();\n        const msg = String.fromCharCode.apply(null, dataview);\n        const xmlDoc = parser.parseFromString(msg, 'application/xml');\n\n        if (xmlDoc.getElementsByTagName('PlayReadyKeyMessage')[0]) {\n            const Challenge = xmlDoc.getElementsByTagName('Challenge')[0].childNodes[0].nodeValue;\n            if (Challenge) {\n                licenseRequest = BASE64.decode(Challenge);\n            }\n        } else {\n            // The message from CDM is not a wrapped message as on IE11 and Edge,\n            // thus it contains direclty the challenge itself\n            // (note that the xmlDoc at this point may be unreadable since it may have been interpreted as UTF-16)\n            return message;\n        }\n\n        return licenseRequest;\n    }\n\n    function getLicenseServerURLFromInitData(initData) {\n        if (initData) {\n            const data = new DataView(initData);\n            const numRecords = data.getUint16(4, true);\n            let offset = 6;\n            const parser = new DOMParser();\n\n            for (let i = 0; i < numRecords; i++) {\n                // Parse the PlayReady Record header\n                const recordType = data.getUint16(offset, true);\n                offset += 2;\n                const recordLength = data.getUint16(offset, true);\n                offset += 2;\n                if (recordType !== 0x0001) {\n                    offset += recordLength;\n                    continue;\n                }\n\n                const recordData = initData.slice(offset, offset + recordLength);\n                const record = String.fromCharCode.apply(null, new Uint16Array(recordData));\n                const xmlDoc = parser.parseFromString(record, 'application/xml');\n\n                // First try <LA_URL>\n                if (xmlDoc.getElementsByTagName('LA_URL')[0]) {\n                    const laurl = xmlDoc.getElementsByTagName('LA_URL')[0].childNodes[0].nodeValue;\n                    if (laurl) {\n                        return laurl;\n                    }\n                }\n\n                // Optionally, try <LUI_URL>\n                if (xmlDoc.getElementsByTagName('LUI_URL')[0]) {\n                    const luiurl = xmlDoc.getElementsByTagName('LUI_URL')[0].childNodes[0].nodeValue;\n                    if (luiurl) {\n                        return luiurl;\n                    }\n                }\n            }\n        }\n\n        return null;\n    }\n\n    function getInitData(cpData) {\n        // * desc@ getInitData\n        // *   generate PSSH data from PROHeader defined in MPD file\n        // *   PSSH format:\n        // *   size (4)\n        // *   box type(PSSH) (8)\n        // *   Protection SystemID (16)\n        // *   protection system data size (4) - length of decoded PROHeader\n        // *   decoded PROHeader data from MPD file\n        const PSSHBoxType = new Uint8Array([0x70, 0x73, 0x73, 0x68, 0x00, 0x00, 0x00, 0x00]); //'PSSH' 8 bytes\n        const playreadySystemID = new Uint8Array([0x9a, 0x04, 0xf0, 0x79, 0x98, 0x40, 0x42, 0x86, 0xab, 0x92, 0xe6, 0x5b, 0xe0, 0x88, 0x5f, 0x95]);\n\n        let byteCursor = 0;\n        let uint8arraydecodedPROHeader = null;\n\n        let PROSize,\n            PSSHSize,\n            PSSHBoxBuffer,\n            PSSHBox,\n            PSSHData;\n\n        checkConfig();\n        if (!cpData) {\n            return null;\n        }\n        // Handle common encryption PSSH\n        if ('pssh' in cpData) {\n            return CommonEncryption.parseInitDataFromContentProtection(cpData, BASE64);\n        }\n        // Handle native MS PlayReady ContentProtection elements\n        if ('pro' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.pro.__text);\n        }\n        else if ('prheader' in cpData) {\n            uint8arraydecodedPROHeader = BASE64.decodeArray(cpData.prheader.__text);\n        }\n        else {\n            return null;\n        }\n\n        PROSize = uint8arraydecodedPROHeader.length;\n        PSSHSize = 0x4 + PSSHBoxType.length + playreadySystemID.length + 0x4 + PROSize;\n\n        PSSHBoxBuffer = new ArrayBuffer(PSSHSize);\n\n        PSSHBox = new Uint8Array(PSSHBoxBuffer);\n        PSSHData = new DataView(PSSHBoxBuffer);\n\n        PSSHData.setUint32(byteCursor, PSSHSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(PSSHBoxType, byteCursor);\n        byteCursor += PSSHBoxType.length;\n\n        PSSHBox.set(playreadySystemID, byteCursor);\n        byteCursor += playreadySystemID.length;\n\n        PSSHData.setUint32(byteCursor, PROSize);\n        byteCursor += 0x4;\n\n        PSSHBox.set(uint8arraydecodedPROHeader, byteCursor);\n        byteCursor += PROSize;\n\n        return PSSHBox.buffer;\n    }\n\n    /**\n     * It seems that some PlayReady implementations return their XML-based CDM\n     * messages using UTF16, while others return them as UTF8.  Use this function\n     * to modify the message format to expect when parsing CDM messages.\n     *\n     * @param {string} format the expected message format.  Either \"utf-8\" or \"utf-16\".\n     * @throws {Error} Specified message format is not one of \"utf8\" or \"utf16\"\n     */\n    function setPlayReadyMessageFormat(format) {\n        if (format !== 'utf-8' && format !== 'utf-16') {\n            throw new Error('Specified message format is not one of \"utf-8\" or \"utf-16\"');\n        }\n        messageFormat = format;\n    }\n\n    /**\n     * Initialize the Key system with protection data\n     * @param {Object} protectionData the protection data\n     */\n    function init(protectionData) {\n        if (protectionData) {\n            protData = protectionData;\n        }\n    }\n\n\n    /**\n     * Get Playready Custom data\n     */\n    function getCDMData() {\n        let customData,\n            cdmData,\n            cdmDataBytes,\n            i;\n\n        checkConfig();\n        if (protData && protData.cdmData) {\n            // Convert custom data into multibyte string\n            customData = [];\n            for (i = 0; i < protData.cdmData.length; ++i) {\n                customData.push(protData.cdmData.charCodeAt(i));\n                customData.push(0);\n            }\n            customData = String.fromCharCode.apply(null, customData);\n\n            // Encode in Base 64 the custom data string\n            customData = BASE64.encode(customData);\n\n            // Initialize CDM data with Base 64 encoded custom data\n            // (see https://msdn.microsoft.com/en-us/library/dn457361.aspx)\n            cdmData = PRCDMData.replace('%CUSTOMDATA%', customData);\n\n            // Convert CDM data into multibyte characters\n            cdmDataBytes = [];\n            for (i = 0; i < cdmData.length; ++i) {\n                cdmDataBytes.push(cdmData.charCodeAt(i));\n                cdmDataBytes.push(0);\n            }\n\n            return new Uint8Array(cdmDataBytes).buffer;\n        }\n\n        return null;\n    }\n\n    function getSessionId(cp) {\n        // Get sessionId from protectionData or from manifest\n        if (protData && protData.sessionId) {\n            return protData.sessionId;\n        } else if (cp && cp.sessionId) {\n            return cp.sessionId;\n        }\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        setPlayReadyMessageFormat: setPlayReadyMessageFormat,\n        init: init\n    };\n\n    return instance;\n}\n\nKeySystemPlayReady.__dashjs_factory_name = 'KeySystemPlayReady';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemPlayReady); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}