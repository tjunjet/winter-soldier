{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* @module FactoryMaker\n* @ignore\n*/\n\nvar FactoryMaker = function () {\n  var instance = void 0;\n  var singletonContexts = [];\n  var singletonFactories = {};\n  var classFactories = {};\n\n  function extend(name, childInstance, override, context) {\n    if (!context[name] && childInstance) {\n      context[name] = {\n        instance: childInstance,\n        override: override\n      };\n    }\n  }\n  /**\n  * Use this method from your extended object.  this.factory is injected into your object.\n  * this.factory.getSingletonInstance(this.context, 'VideoModel')\n  * will return the video model for use in the extended object.\n  *\n  * @param {Object} context - injected into extended object as this.context\n  * @param {string} className - string name found in all dash.js objects\n  * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n  * @returns {*} Context aware instance of specified singleton name.\n  * @memberof module:FactoryMaker\n  * @instance\n  */\n\n\n  function getSingletonInstance(context, className) {\n    for (var i in singletonContexts) {\n      var obj = singletonContexts[i];\n\n      if (obj.context === context && obj.name === className) {\n        return obj.instance;\n      }\n    }\n\n    return null;\n  }\n  /**\n  * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n  *\n  * @param {Object} context\n  * @param {string} className\n  * @param {Object} instance\n  * @memberof module:FactoryMaker\n  * @instance\n  */\n\n\n  function setSingletonInstance(context, className, instance) {\n    for (var i in singletonContexts) {\n      var obj = singletonContexts[i];\n\n      if (obj.context === context && obj.name === className) {\n        singletonContexts[i].instance = instance;\n        return;\n      }\n    }\n\n    singletonContexts.push({\n      name: className,\n      context: context,\n      instance: instance\n    });\n  }\n  /**\n  * Use this method to remove all singleton instances associated with a particular context.\n  *\n  * @param {Object} context\n  * @memberof module:FactoryMaker\n  * @instance\n  */\n\n\n  function deleteSingletonInstances(context) {\n    singletonContexts = singletonContexts.filter(function (x) {\n      return x.context !== context;\n    });\n  }\n  /*------------------------------------------------------------------------------------------*/\n  // Factories storage Management\n\n  /*------------------------------------------------------------------------------------------*/\n\n\n  function getFactoryByName(name, factoriesArray) {\n    return factoriesArray[name];\n  }\n\n  function updateFactory(name, factory, factoriesArray) {\n    if (name in factoriesArray) {\n      factoriesArray[name] = factory;\n    }\n  }\n  /*------------------------------------------------------------------------------------------*/\n  // Class Factories Management\n\n  /*------------------------------------------------------------------------------------------*/\n\n\n  function updateClassFactory(name, factory) {\n    updateFactory(name, factory, classFactories);\n  }\n\n  function getClassFactoryByName(name) {\n    return getFactoryByName(name, classFactories);\n  }\n\n  function getClassFactory(classConstructor) {\n    var factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n    if (!factory) {\n      factory = function factory(context) {\n        if (context === undefined) {\n          context = {};\n        }\n\n        return {\n          create: function create() {\n            return merge(classConstructor, context, arguments);\n          }\n        };\n      };\n\n      classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n    }\n\n    return factory;\n  }\n  /*------------------------------------------------------------------------------------------*/\n  // Singleton Factory MAangement\n\n  /*------------------------------------------------------------------------------------------*/\n\n\n  function updateSingletonFactory(name, factory) {\n    updateFactory(name, factory, singletonFactories);\n  }\n\n  function getSingletonFactoryByName(name) {\n    return getFactoryByName(name, singletonFactories);\n  }\n\n  function getSingletonFactory(classConstructor) {\n    var factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n\n    if (!factory) {\n      factory = function factory(context) {\n        var instance = void 0;\n\n        if (context === undefined) {\n          context = {};\n        }\n\n        return {\n          getInstance: function getInstance() {\n            // If we don't have an instance yet check for one on the context\n            if (!instance) {\n              instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n            } // If there's no instance on the context then create one\n\n\n            if (!instance) {\n              instance = merge(classConstructor, context, arguments);\n              singletonContexts.push({\n                name: classConstructor.__dashjs_factory_name,\n                context: context,\n                instance: instance\n              });\n            }\n\n            return instance;\n          }\n        };\n      };\n\n      singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n    }\n\n    return factory;\n  }\n\n  function merge(classConstructor, context, args) {\n    var classInstance = void 0;\n    var className = classConstructor.__dashjs_factory_name;\n    var extensionObject = context[className];\n\n    if (extensionObject) {\n      var extension = extensionObject.instance;\n\n      if (extensionObject.override) {\n        //Override public methods in parent but keep parent.\n        classInstance = classConstructor.apply({\n          context: context\n        }, args);\n        extension = extension.apply({\n          context: context,\n          factory: instance,\n          parent: classInstance\n        }, args);\n\n        for (var prop in extension) {\n          if (classInstance.hasOwnProperty(prop)) {\n            classInstance[prop] = extension[prop];\n          }\n        }\n      } else {\n        //replace parent object completely with new object. Same as dijon.\n        return extension.apply({\n          context: context,\n          factory: instance\n        }, args);\n      }\n    } else {\n      // Create new instance of the class\n      classInstance = classConstructor.apply({\n        context: context\n      }, args);\n    } // Add getClassName function to class instance prototype (used by Debug)\n\n\n    classInstance.getClassName = function () {\n      return className;\n    };\n\n    return classInstance;\n  }\n\n  instance = {\n    extend: extend,\n    getSingletonInstance: getSingletonInstance,\n    setSingletonInstance: setSingletonInstance,\n    deleteSingletonInstances: deleteSingletonInstances,\n    getSingletonFactory: getSingletonFactory,\n    getSingletonFactoryByName: getSingletonFactoryByName,\n    updateSingletonFactory: updateSingletonFactory,\n    getClassFactory: getClassFactory,\n    getClassFactoryByName: getClassFactoryByName,\n    updateClassFactory: updateClassFactory\n  };\n  return instance;\n}();\n\nexports.default = FactoryMaker;","map":{"version":3,"mappings":"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","names":["FactoryMaker","instance","singletonContexts","singletonFactories","classFactories","extend","name","childInstance","override","context","getSingletonInstance","className","i","obj","setSingletonInstance","push","deleteSingletonInstances","filter","x","getFactoryByName","factoriesArray","updateFactory","factory","updateClassFactory","getClassFactoryByName","getClassFactory","classConstructor","__dashjs_factory_name","undefined","create","merge","arguments","updateSingletonFactory","getSingletonFactoryByName","getSingletonFactory","getInstance","args","classInstance","extensionObject","extension","apply","parent","prop","hasOwnProperty","getClassName"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/core/FactoryMaker.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n/**\n * @module FactoryMaker\n * @ignore\n */\nconst FactoryMaker = (function () {\n\n    let instance;\n    let singletonContexts = [];\n    const singletonFactories = {};\n    const classFactories = {};\n\n    function extend(name, childInstance, override, context) {\n        if (!context[name] && childInstance) {\n            context[name] = {\n                instance: childInstance,\n                override: override\n            };\n        }\n    }\n\n    /**\n     * Use this method from your extended object.  this.factory is injected into your object.\n     * this.factory.getSingletonInstance(this.context, 'VideoModel')\n     * will return the video model for use in the extended object.\n     *\n     * @param {Object} context - injected into extended object as this.context\n     * @param {string} className - string name found in all dash.js objects\n     * with name __dashjs_factory_name Will be at the bottom. Will be the same as the object's name.\n     * @returns {*} Context aware instance of specified singleton name.\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function getSingletonInstance(context, className) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                return obj.instance;\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Use this method to add an singleton instance to the system.  Useful for unit testing to mock objects etc.\n     *\n     * @param {Object} context\n     * @param {string} className\n     * @param {Object} instance\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function setSingletonInstance(context, className, instance) {\n        for (const i in singletonContexts) {\n            const obj = singletonContexts[i];\n            if (obj.context === context && obj.name === className) {\n                singletonContexts[i].instance = instance;\n                return;\n            }\n        }\n        singletonContexts.push({\n            name: className,\n            context: context,\n            instance: instance\n        });\n    }\n\n    /**\n     * Use this method to remove all singleton instances associated with a particular context.\n     *\n     * @param {Object} context\n     * @memberof module:FactoryMaker\n     * @instance\n     */\n    function deleteSingletonInstances(context) {\n        singletonContexts = singletonContexts.filter(x => x.context !== context);\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Factories storage Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function getFactoryByName(name, factoriesArray) {\n        return factoriesArray[name];\n    }\n\n    function updateFactory(name, factory, factoriesArray) {\n        if (name in factoriesArray) {\n            factoriesArray[name] = factory;\n        }\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Class Factories Management\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateClassFactory(name, factory) {\n        updateFactory(name, factory, classFactories);\n    }\n\n    function getClassFactoryByName(name) {\n        return getFactoryByName(name, classFactories);\n    }\n\n    function getClassFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, classFactories);\n\n        if (!factory) {\n            factory = function (context) {\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    create: function () {\n                        return merge(classConstructor, context, arguments);\n                    }\n                };\n            };\n\n            classFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n        return factory;\n    }\n\n    /*------------------------------------------------------------------------------------------*/\n\n    // Singleton Factory MAangement\n\n    /*------------------------------------------------------------------------------------------*/\n\n    function updateSingletonFactory(name, factory) {\n        updateFactory(name, factory, singletonFactories);\n    }\n\n    function getSingletonFactoryByName(name) {\n        return getFactoryByName(name, singletonFactories);\n    }\n\n    function getSingletonFactory(classConstructor) {\n        let factory = getFactoryByName(classConstructor.__dashjs_factory_name, singletonFactories);\n        if (!factory) {\n            factory = function (context) {\n                let instance;\n                if (context === undefined) {\n                    context = {};\n                }\n                return {\n                    getInstance: function () {\n                        // If we don't have an instance yet check for one on the context\n                        if (!instance) {\n                            instance = getSingletonInstance(context, classConstructor.__dashjs_factory_name);\n                        }\n                        // If there's no instance on the context then create one\n                        if (!instance) {\n                            instance = merge(classConstructor, context, arguments);\n                            singletonContexts.push({\n                                name: classConstructor.__dashjs_factory_name,\n                                context: context,\n                                instance: instance\n                            });\n                        }\n                        return instance;\n                    }\n                };\n            };\n            singletonFactories[classConstructor.__dashjs_factory_name] = factory; // store factory\n        }\n\n        return factory;\n    }\n\n    function merge(classConstructor, context, args) {\n\n        let classInstance;\n        const className = classConstructor.__dashjs_factory_name;\n        const extensionObject = context[className];\n\n        if (extensionObject) {\n\n            let extension = extensionObject.instance;\n\n            if (extensionObject.override) { //Override public methods in parent but keep parent.\n\n                classInstance = classConstructor.apply({context}, args);\n                extension = extension.apply({\n                    context,\n                    factory: instance,\n                    parent: classInstance\n                }, args);\n\n                for (const prop in extension) {\n                    if (classInstance.hasOwnProperty(prop)) {\n                        classInstance[prop] = extension[prop];\n                    }\n                }\n\n            } else { //replace parent object completely with new object. Same as dijon.\n\n                return extension.apply({\n                    context,\n                    factory: instance\n                }, args);\n\n            }\n        } else {\n            // Create new instance of the class\n            classInstance = classConstructor.apply({context}, args);\n        }\n\n        // Add getClassName function to class instance prototype (used by Debug)\n        classInstance.getClassName = function () {return className;};\n\n        return classInstance;\n    }\n\n    instance = {\n        extend: extend,\n        getSingletonInstance: getSingletonInstance,\n        setSingletonInstance: setSingletonInstance,\n        deleteSingletonInstances: deleteSingletonInstances,\n        getSingletonFactory: getSingletonFactory,\n        getSingletonFactoryByName: getSingletonFactoryByName,\n        updateSingletonFactory: updateSingletonFactory,\n        getClassFactory: getClassFactory,\n        getClassFactoryByName: getClassFactoryByName,\n        updateClassFactory: updateClassFactory\n    };\n\n    return instance;\n\n}());\n\nexport default FactoryMaker;\n"]},"metadata":{},"sourceType":"script"}