{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _KeyPair = require('../vo/KeyPair');\n\nvar _KeyPair2 = _interopRequireDefault(_KeyPair);\n\nvar _ClearKeyKeySet = require('../vo/ClearKeyKeySet');\n\nvar _ClearKeyKeySet2 = _interopRequireDefault(_ClearKeyKeySet);\n\nvar _CommonEncryption = require('../CommonEncryption');\n\nvar _CommonEncryption2 = _interopRequireDefault(_CommonEncryption);\n\nvar _ProtectionConstants = require('../../constants/ProtectionConstants');\n\nvar _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nvar uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nvar systemString = _ProtectionConstants2.default.CLEARKEY_KEYSTEM_STRING;\nvar schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n  config = config || {};\n  var instance = void 0;\n  var BASE64 = config.BASE64;\n  var LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\n    attributes: ['Laurl', 'laurl'],\n    prefixes: ['clearkey', 'dashif']\n  };\n  /**\n  * Returns desired clearkeys (as specified in the CDM message) from protection data\n  *\n  * @param {ProtectionData} protectionData the protection data\n  * @param {ArrayBuffer} message the ClearKey CDM message\n  * @returns {ClearKeyKeySet} the key set or null if none found\n  * @throws {Error} if a keyID specified in the CDM message was not found in the\n  * protection data\n  * @memberof KeySystemClearKey\n  */\n\n  function getClearKeysFromProtectionData(protectionData, message) {\n    var clearkeySet = null;\n\n    if (protectionData) {\n      // ClearKey is the only system that does not require a license server URL, so we\n      // handle it here when keys are specified in protection data\n      var jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n      var keyPairs = [];\n\n      for (var i = 0; i < jsonMsg.kids.length; i++) {\n        var clearkeyID = jsonMsg.kids[i];\n        var clearkey = protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID) ? protectionData.clearkeys[clearkeyID] : null;\n\n        if (!clearkey) {\n          throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n        } // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n\n\n        keyPairs.push(new _KeyPair2.default(clearkeyID, clearkey));\n      }\n\n      clearkeySet = new _ClearKeyKeySet2.default(keyPairs);\n    }\n\n    return clearkeySet;\n  }\n\n  function getInitData(cp, cencContentProtection) {\n    try {\n      var initData = _CommonEncryption2.default.parseInitDataFromContentProtection(cp, BASE64);\n\n      if (!initData && cencContentProtection) {\n        var cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\n        var data = {\n          kids: [cencDefaultKid]\n        };\n        initData = new TextEncoder().encode(JSON.stringify(data));\n      }\n\n      return initData;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function cencDefaultKidToBase64Representation(cencDefaultKid) {\n    try {\n      var kid = cencDefaultKid.replace(/-/g, '');\n      kid = btoa(kid.match(/\\w{2}/g).map(function (a) {\n        return String.fromCharCode(parseInt(a, 16));\n      }).join(''));\n      return kid.replace(/=/g, '');\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function getRequestHeadersFromMessage()\n  /*message*/\n  {\n    // Set content type to application/json by default\n    return {\n      'Content-Type': 'application/json'\n    };\n  }\n\n  function getLicenseRequestFromMessage(message) {\n    return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n  }\n\n  function getLicenseServerURLFromInitData()\n  /*initData*/\n  {\n    return null;\n  }\n\n  function getLicenseServerUrlFromMediaInfo(mediaInfo) {\n    try {\n      if (!mediaInfo || mediaInfo.length === 0) {\n        return null;\n      }\n\n      var i = 0;\n      var licenseServer = null;\n\n      while (i < mediaInfo.length && !licenseServer) {\n        var info = mediaInfo[i];\n\n        if (info && info.contentProtection && info.contentProtection.length > 0) {\n          var clearkeyProtData = info.contentProtection.filter(function (cp) {\n            return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\n          });\n\n          if (clearkeyProtData && clearkeyProtData.length > 0) {\n            var j = 0;\n\n            while (j < clearkeyProtData.length && !licenseServer) {\n              var ckData = clearkeyProtData[j];\n              var k = 0;\n\n              while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\n                var l = 0;\n                var attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\n\n                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\n                  var prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\n\n                  if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\n                    licenseServer = ckData[attribute].__text;\n                  }\n\n                  l += 1;\n                }\n\n                k += 1;\n              }\n\n              j += 1;\n            }\n          }\n        }\n\n        i += 1;\n      }\n\n      return licenseServer;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function getCDMData() {\n    return null;\n  }\n\n  function getSessionId()\n  /*cp*/\n  {\n    return null;\n  }\n\n  instance = {\n    uuid: uuid,\n    schemeIdURI: schemeIdURI,\n    systemString: systemString,\n    getInitData: getInitData,\n    getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n    getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n    getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n    getCDMData: getCDMData,\n    getSessionId: getSessionId,\n    getLicenseServerUrlFromMediaInfo: getLicenseServerUrlFromMediaInfo,\n    getClearKeysFromProtectionData: getClearKeysFromProtectionData\n  };\n  return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey);\n/* jshint ignore:line */","map":{"version":3,"mappings":"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","names":["uuid","systemString","ProtectionConstants","CLEARKEY_KEYSTEM_STRING","schemeIdURI","KeySystemClearKey","config","instance","BASE64","LICENSE_SERVER_MANIFEST_CONFIGURATIONS","attributes","prefixes","getClearKeysFromProtectionData","protectionData","message","clearkeySet","jsonMsg","JSON","parse","String","fromCharCode","apply","Uint8Array","keyPairs","i","kids","length","clearkeyID","clearkey","clearkeys","hasOwnProperty","Error","push","KeyPair","ClearKeyKeySet","getInitData","cp","cencContentProtection","initData","CommonEncryption","parseInitDataFromContentProtection","cencDefaultKid","cencDefaultKidToBase64Representation","data","TextEncoder","encode","stringify","e","kid","replace","btoa","match","map","a","parseInt","join","getRequestHeadersFromMessage","getLicenseRequestFromMessage","getLicenseServerURLFromInitData","getLicenseServerUrlFromMediaInfo","mediaInfo","licenseServer","info","contentProtection","clearkeyProtData","filter","schemeIdUri","j","ckData","k","l","attribute","prefix","__prefix","__text","getCDMData","getSessionId","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/protection/drm/KeySystemClearKey.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport KeyPair from '../vo/KeyPair';\nimport ClearKeyKeySet from '../vo/ClearKeyKeySet';\nimport CommonEncryption from '../CommonEncryption';\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nconst uuid = 'e2719d58-a985-b3c9-781a-b030af78d30e';\nconst systemString = ProtectionConstants.CLEARKEY_KEYSTEM_STRING;\nconst schemeIdURI = 'urn:uuid:' + uuid;\n\nfunction KeySystemClearKey(config) {\n\n    config = config || {};\n    let instance;\n    const BASE64 = config.BASE64;\n    const LICENSE_SERVER_MANIFEST_CONFIGURATIONS = {\n        attributes: ['Laurl', 'laurl'],\n        prefixes: ['clearkey', 'dashif']\n    };\n\n    /**\n     * Returns desired clearkeys (as specified in the CDM message) from protection data\n     *\n     * @param {ProtectionData} protectionData the protection data\n     * @param {ArrayBuffer} message the ClearKey CDM message\n     * @returns {ClearKeyKeySet} the key set or null if none found\n     * @throws {Error} if a keyID specified in the CDM message was not found in the\n     * protection data\n     * @memberof KeySystemClearKey\n     */\n    function getClearKeysFromProtectionData(protectionData, message) {\n        let clearkeySet = null;\n        if (protectionData) {\n            // ClearKey is the only system that does not require a license server URL, so we\n            // handle it here when keys are specified in protection data\n            const jsonMsg = JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n            const keyPairs = [];\n            for (let i = 0; i < jsonMsg.kids.length; i++) {\n                const clearkeyID = jsonMsg.kids[i];\n                const clearkey = (protectionData.clearkeys && protectionData.clearkeys.hasOwnProperty(clearkeyID)) ? protectionData.clearkeys[clearkeyID] : null;\n                if (!clearkey) {\n                    throw new Error('DRM: ClearKey keyID (' + clearkeyID + ') is not known!');\n                }\n                // KeyIDs from CDM are not base64 padded.  Keys may or may not be padded\n                keyPairs.push(new KeyPair(clearkeyID, clearkey));\n            }\n            clearkeySet = new ClearKeyKeySet(keyPairs);\n        }\n        return clearkeySet;\n    }\n\n    function getInitData(cp, cencContentProtection) {\n        try {\n            let initData = CommonEncryption.parseInitDataFromContentProtection(cp, BASE64);\n\n            if (!initData && cencContentProtection) {\n                const cencDefaultKid = cencDefaultKidToBase64Representation(cencContentProtection['cenc:default_KID']);\n                const data = {kids: [cencDefaultKid]};\n                initData = new TextEncoder().encode(JSON.stringify(data));\n            }\n\n            return initData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function cencDefaultKidToBase64Representation(cencDefaultKid) {\n        try {\n            let kid = cencDefaultKid.replace(/-/g, '');\n            kid = btoa(kid.match(/\\w{2}/g).map((a) => {\n                return String.fromCharCode(parseInt(a, 16));\n            }).join(''));\n            return kid.replace(/=/g, '');\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function getRequestHeadersFromMessage(/*message*/) {\n        // Set content type to application/json by default\n        return {\n            'Content-Type': 'application/json'\n        };\n    }\n\n    function getLicenseRequestFromMessage(message) {\n        return JSON.parse(String.fromCharCode.apply(null, new Uint8Array(message)));\n    }\n\n    function getLicenseServerURLFromInitData(/*initData*/) {\n        return null;\n    }\n\n    function getLicenseServerUrlFromMediaInfo(mediaInfo) {\n        try {\n            if (!mediaInfo || mediaInfo.length === 0) {\n                return null;\n            }\n            let i = 0;\n            let licenseServer = null;\n            while (i < mediaInfo.length && !licenseServer) {\n                const info = mediaInfo[i];\n                if (info && info.contentProtection && info.contentProtection.length > 0) {\n                    const clearkeyProtData = info.contentProtection.filter((cp) => {\n                        return cp.schemeIdUri && cp.schemeIdUri === schemeIdURI;\n                    });\n                    if (clearkeyProtData && clearkeyProtData.length > 0) {\n                        let j = 0;\n                        while (j < clearkeyProtData.length && !licenseServer) {\n                            const ckData = clearkeyProtData[j];\n                            let k = 0;\n                            while (k < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes.length && !licenseServer) {\n                                let l = 0;\n                                const attribute = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.attributes[k];\n                                while (l < LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes.length && !licenseServer) {\n                                    const prefix = LICENSE_SERVER_MANIFEST_CONFIGURATIONS.prefixes[l];\n                                    if (ckData[attribute] && ckData[attribute].__prefix && ckData[attribute].__prefix === prefix && ckData[attribute].__text) {\n                                        licenseServer = ckData[attribute].__text;\n                                    }\n                                    l += 1;\n                                }\n                                k += 1;\n                            }\n                            j += 1;\n                        }\n                    }\n                }\n                i += 1;\n            }\n            return licenseServer;\n        } catch\n            (e) {\n            return null;\n        }\n    }\n\n    function getCDMData() {\n        return null;\n    }\n\n    function getSessionId(/*cp*/) {\n        return null;\n    }\n\n    instance = {\n        uuid: uuid,\n        schemeIdURI: schemeIdURI,\n        systemString: systemString,\n        getInitData: getInitData,\n        getRequestHeadersFromMessage: getRequestHeadersFromMessage,\n        getLicenseRequestFromMessage: getLicenseRequestFromMessage,\n        getLicenseServerURLFromInitData: getLicenseServerURLFromInitData,\n        getCDMData: getCDMData,\n        getSessionId: getSessionId,\n        getLicenseServerUrlFromMediaInfo,\n        getClearKeysFromProtectionData: getClearKeysFromProtectionData\n    };\n\n    return instance;\n}\n\nKeySystemClearKey.__dashjs_factory_name = 'KeySystemClearKey';\nexport default dashjs.FactoryMaker.getSingletonFactory(KeySystemClearKey); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}