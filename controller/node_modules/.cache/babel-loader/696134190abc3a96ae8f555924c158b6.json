{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ProtectionConstants = require('../../constants/ProtectionConstants');\n\nvar _ProtectionConstants2 = _interopRequireDefault(_ProtectionConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction DRMToday(config) {\n  config = config || {};\n  var BASE64 = config.BASE64;\n  var keySystems = {};\n  keySystems[_ProtectionConstants2.default.WIDEVINE_KEYSTEM_STRING] = {\n    responseType: 'json',\n    getLicenseMessage: function getLicenseMessage(response) {\n      return BASE64.decodeArray(response.license);\n    },\n    getErrorResponse: function getErrorResponse(response) {\n      return response;\n    }\n  };\n  keySystems[_ProtectionConstants2.default.PLAYREADY_KEYSTEM_STRING] = {\n    responseType: 'arraybuffer',\n    getLicenseMessage: function getLicenseMessage(response) {\n      return response;\n    },\n    getErrorResponse: function getErrorResponse(response) {\n      return String.fromCharCode.apply(null, new Uint8Array(response));\n    }\n  };\n  var instance = void 0;\n\n  function checkConfig() {\n    if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n      throw new Error('Missing config parameter(s)');\n    }\n  }\n\n  function getServerURLFromMessage(url\n  /*, message, messageType*/\n  ) {\n    return url;\n  }\n\n  function getHTTPMethod()\n  /*messageType*/\n  {\n    return 'POST';\n  }\n\n  function getResponseType(keySystemStr\n  /*, messageType*/\n  ) {\n    return keySystems[keySystemStr].responseType;\n  }\n\n  function getLicenseMessage(serverResponse, keySystemStr\n  /*, messageType*/\n  ) {\n    checkConfig();\n    return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n  }\n\n  function getErrorResponse(serverResponse, keySystemStr\n  /*, messageType*/\n  ) {\n    return keySystems[keySystemStr].getErrorResponse(serverResponse);\n  }\n\n  instance = {\n    getServerURLFromMessage: getServerURLFromMessage,\n    getHTTPMethod: getHTTPMethod,\n    getResponseType: getResponseType,\n    getLicenseMessage: getLicenseMessage,\n    getErrorResponse: getErrorResponse\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* CastLabs DRMToday License Server implementation\n*\n* @implements LicenseServer\n* @class\n*/\n\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(DRMToday);\n/* jshint ignore:line */","map":{"version":3,"mappings":";;;;;;AAsCA;;;;;;;;AAEA;;AAAA,SAASA,QAAT,CAAkBC,MAAlB,EAA0B;EAEtBA,SAASA,UAAU,EAAnBA;EACA,IAAMC,SAASD,OAAOC,MAAtB;EAEA,IAAMC,aAAa,EAAnB;EACAA,WAAWC,8BAAoBC,uBAA/BF,IAA0D;IACtDG,cAAc,MADwC;IAEtDC,mBAAmB,2BAAUC,QAAV,EAAoB;MACnC,OAAON,OAAOO,WAAPP,CAAmBM,SAASE,OAA5BR,CAAP;IAHkD;IAKtDS,kBAAkB,0BAAUH,QAAV,EAAoB;MAClC,OAAOA,QAAP;IANkD;EAAA,CAA1DL;EASAA,WAAWC,8BAAoBQ,wBAA/BT,IAA2D;IACvDG,cAAc,aADyC;IAEvDC,mBAAmB,2BAAUC,QAAV,EAAoB;MACnC,OAAOA,QAAP;IAHmD;IAKvDG,kBAAkB,0BAAUH,QAAV,EAAoB;MAClC,OAAOK,OAAOC,YAAPD,CAAoBE,KAApBF,CAA0B,IAA1BA,EAAgC,IAAIG,UAAJ,CAAeR,QAAf,CAAhCK,CAAP;IANmD;EAAA,CAA3DV;EAUA,IAAIc,iBAAJ;;EAEA,SAASC,WAAT,GAAuB;IACnB,IAAI,CAAChB,MAAD,IAAW,CAACA,OAAOiB,cAAPjB,CAAsB,aAAtBA,CAAhB,EAAsD;MAClD,MAAM,IAAIkB,KAAJ,CAAU,6BAAV,CAAN;IAEP;EAED;;EAAA,SAASC,uBAAT,CAAiCC;EAAI;EAArC,EAAiE;IAC7D,OAAOA,GAAP;EAGJ;;EAAA,SAASC,aAAT;EAAuB;EAAiB;IACpC,OAAO,MAAP;EAGJ;;EAAA,SAASC,eAAT,CAAyBC;EAAY;EAArC,EAAwD;IACpD,OAAOtB,WAAWsB,YAAXtB,EAAyBG,YAAhC;EAGJ;;EAAA,SAASC,iBAAT,CAA2BmB,cAA3B,EAA2CD;EAAY;EAAvD,EAA0E;IACtEP;IACA,OAAOf,WAAWsB,YAAXtB,EAAyBI,iBAAzBJ,CAA2CuB,cAA3CvB,CAAP;EAGJ;;EAAA,SAASQ,gBAAT,CAA0Be,cAA1B,EAA0CD;EAAY;EAAtD,EAAyE;IACrE,OAAOtB,WAAWsB,YAAXtB,EAAyBQ,gBAAzBR,CAA0CuB,cAA1CvB,CAAP;EAGJc;;EAAAA,WAAW;IACPI,yBAAyBA,uBADlB;IAEPE,eAAeA,aAFR;IAGPC,iBAAiBA,eAHV;IAIPjB,mBAAmBA,iBAJZ;IAKPI,kBAAkBA;EALX,CAAXM;EAQA,OAAOA,QAAP;AAtGJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;AA0EAjB,SAAS2B,qBAAT3B,GAAiC,UAAjCA;kBACe4B,OAAOC,YAAPD,CAAoBE,mBAApBF,CAAwC5B,QAAxC4B,C;AAAmD","names":["DRMToday","config","BASE64","keySystems","ProtectionConstants","WIDEVINE_KEYSTEM_STRING","responseType","getLicenseMessage","response","decodeArray","license","getErrorResponse","PLAYREADY_KEYSTEM_STRING","String","fromCharCode","apply","Uint8Array","instance","checkConfig","hasOwnProperty","Error","getServerURLFromMessage","url","getHTTPMethod","getResponseType","keySystemStr","serverResponse","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/protection/servers/DRMToday.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * CastLabs DRMToday License Server implementation\n *\n * @implements LicenseServer\n * @class\n */\n\nimport ProtectionConstants from '../../constants/ProtectionConstants';\n\nfunction DRMToday(config) {\n\n    config = config || {};\n    const BASE64 = config.BASE64;\n\n    const keySystems = {};\n    keySystems[ProtectionConstants.WIDEVINE_KEYSTEM_STRING] = {\n        responseType: 'json',\n        getLicenseMessage: function (response) {\n            return BASE64.decodeArray(response.license);\n        },\n        getErrorResponse: function (response) {\n            return response;\n        }\n    };\n    keySystems[ProtectionConstants.PLAYREADY_KEYSTEM_STRING] = {\n        responseType: 'arraybuffer',\n        getLicenseMessage: function (response) {\n            return response;\n        },\n        getErrorResponse: function (response) {\n            return String.fromCharCode.apply(null, new Uint8Array(response));\n        }\n    };\n\n    let instance;\n\n    function checkConfig() {\n        if (!BASE64 || !BASE64.hasOwnProperty('decodeArray')) {\n            throw new Error('Missing config parameter(s)');\n        }\n    }\n\n    function getServerURLFromMessage(url /*, message, messageType*/) {\n        return url;\n    }\n\n    function getHTTPMethod(/*messageType*/) {\n        return 'POST';\n    }\n\n    function getResponseType(keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].responseType;\n    }\n\n    function getLicenseMessage(serverResponse, keySystemStr/*, messageType*/) {\n        checkConfig();\n        return keySystems[keySystemStr].getLicenseMessage(serverResponse);\n    }\n\n    function getErrorResponse(serverResponse, keySystemStr/*, messageType*/) {\n        return keySystems[keySystemStr].getErrorResponse(serverResponse);\n    }\n\n    instance = {\n        getServerURLFromMessage: getServerURLFromMessage,\n        getHTTPMethod: getHTTPMethod,\n        getResponseType: getResponseType,\n        getLicenseMessage: getLicenseMessage,\n        getErrorResponse: getErrorResponse\n    };\n\n    return instance;\n}\n\nDRMToday.__dashjs_factory_name = 'DRMToday';\nexport default dashjs.FactoryMaker.getSingletonFactory(DRMToday); /* jshint ignore:line */"]},"metadata":{},"sourceType":"script"}