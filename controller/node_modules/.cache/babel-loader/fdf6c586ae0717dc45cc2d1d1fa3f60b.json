{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.THUMBNAILS_SCHEME_ID_URIS = undefined;\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _DashConstants = require('../../dash/constants/DashConstants');\n\nvar _DashConstants2 = _interopRequireDefault(_DashConstants);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _ThumbnailTrackInfo = require('../vo/ThumbnailTrackInfo');\n\nvar _ThumbnailTrackInfo2 = _interopRequireDefault(_ThumbnailTrackInfo);\n\nvar _URLUtils = require('../../streaming/utils/URLUtils');\n\nvar _URLUtils2 = _interopRequireDefault(_URLUtils);\n\nvar _SegmentsUtils = require('../../dash/utils/SegmentsUtils');\n\nvar _Events = require('../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _BoxParser = require('../../streaming/utils/BoxParser');\n\nvar _BoxParser2 = _interopRequireDefault(_BoxParser);\n\nvar _XHRLoader = require('../../streaming/net/XHRLoader');\n\nvar _XHRLoader2 = _interopRequireDefault(_XHRLoader);\n\nvar _DashHandler = require('../../dash/DashHandler');\n\nvar _DashHandler2 = _interopRequireDefault(_DashHandler);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nvar THUMBNAILS_SCHEME_ID_URIS = exports.THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile', 'http://dashif.org/guidelines/thumbnail_tile'];\n\nfunction ThumbnailTracks(config) {\n  var context = this.context;\n  var adapter = config.adapter;\n  var baseURLController = config.baseURLController;\n  var streamInfo = config.streamInfo;\n  var timelineConverter = config.timelineConverter;\n  var debug = config.debug;\n  var eventBus = config.eventBus;\n  var events = config.events;\n  var dashConstants = config.dashConstants;\n  var urlUtils = (0, _URLUtils2.default)(context).getInstance();\n  var instance = void 0,\n      tracks = void 0,\n      indexHandler = void 0,\n      currentTrackIndex = void 0,\n      mediaInfo = void 0,\n      loader = void 0,\n      boxParser = void 0;\n\n  function initialize() {\n    reset();\n    loader = (0, _XHRLoader2.default)(context).create({});\n    boxParser = (0, _BoxParser2.default)(context).getInstance();\n    indexHandler = (0, _DashHandler2.default)(context).create({\n      streamInfo: streamInfo,\n      timelineConverter: timelineConverter,\n      baseURLController: baseURLController,\n      debug: debug,\n      eventBus: eventBus,\n      events: events,\n      dashConstants: dashConstants,\n      urlUtils: urlUtils\n    }); // initialize controllers\n\n    indexHandler.initialize(adapter ? adapter.getIsDynamic() : false); // parse representation and create tracks\n\n    addTracks();\n  }\n\n  function normalizeSegments(fragments, representation) {\n    var segments = [];\n    var count = 0;\n    var i = void 0,\n        len = void 0,\n        s = void 0,\n        seg = void 0;\n\n    for (i = 0, len = fragments.length; i < len; i++) {\n      s = fragments[i];\n      seg = (0, _SegmentsUtils.getTimeBasedSegment)(timelineConverter, adapter.getIsDynamic(), representation, s.startTime, s.duration, s.timescale, s.media, s.mediaRange, count);\n\n      if (seg) {\n        segments.push(seg);\n        seg = null;\n        count++;\n      }\n    }\n\n    return segments;\n  }\n\n  function addTracks() {\n    if (!streamInfo || !adapter) {\n      return;\n    } // Extract thumbnail tracks\n\n\n    mediaInfo = adapter.getMediaInfoForType(streamInfo, _Constants2.default.IMAGE);\n\n    if (!mediaInfo) {\n      return;\n    }\n\n    var voReps = adapter.getVoRepresentations(mediaInfo);\n\n    if (voReps && voReps.length > 0) {\n      voReps.forEach(function (rep) {\n        if (rep.segmentInfoType === _DashConstants2.default.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media || rep.segmentInfoType === _DashConstants2.default.SEGMENT_TIMELINE) {\n          createTrack(rep);\n        }\n\n        if (rep.segmentInfoType === _DashConstants2.default.SEGMENT_BASE) {\n          createTrack(rep, true);\n        }\n      });\n    }\n\n    if (tracks.length > 0) {\n      // Sort bitrates and select the lowest bitrate rendition\n      tracks.sort(function (a, b) {\n        return a.bitrate - b.bitrate;\n      });\n      currentTrackIndex = tracks.length - 1;\n    }\n  }\n\n  function createTrack(representation, useSegmentBase) {\n    var track = new _ThumbnailTrackInfo2.default();\n    track.id = representation.id;\n    track.bitrate = representation.bandwidth;\n    track.width = representation.width;\n    track.height = representation.height;\n    track.tilesHor = 1;\n    track.tilesVert = 1;\n\n    if (representation.essentialProperties) {\n      representation.essentialProperties.forEach(function (p) {\n        if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {\n          var vars = p.value.split('x');\n\n          if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\n            track.tilesHor = parseInt(vars[0], 10);\n            track.tilesVert = parseInt(vars[1], 10);\n          }\n        }\n      });\n    }\n\n    if (useSegmentBase) {\n      eventBus.trigger(_Events2.default.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\n        streamId: streamInfo.id,\n        mediaType: _Constants2.default.IMAGE,\n        mimeType: mediaInfo.mimeType,\n        representation: representation,\n        callback: function callback(streamId, mediaType, segments, representation) {\n          var cache = [];\n          segments = normalizeSegments(segments, representation);\n          track.segmentDuration = segments[0].duration; //assume all segments have the same duration\n\n          track.readThumbnail = function (time, callback) {\n            var cached = null;\n            cache.some(function (el) {\n              if (el.start <= time && el.end > time) {\n                cached = el.url;\n                return true;\n              }\n            });\n\n            if (cached) {\n              callback(cached);\n            } else {\n              segments.some(function (ss) {\n                if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {\n                  var baseURL = baseURLController.resolve(representation.path);\n                  loader.load({\n                    method: 'get',\n                    url: baseURL.url,\n                    request: {\n                      range: ss.mediaRange,\n                      responseType: 'arraybuffer'\n                    },\n                    onload: function onload(e) {\n                      var info = boxParser.getSamplesInfo(e.target.response);\n                      var blob = new Blob([e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size)], {\n                        type: 'image/jpeg'\n                      });\n                      var imageUrl = window.URL.createObjectURL(blob);\n                      cache.push({\n                        start: ss.mediaStartTime,\n                        end: ss.mediaStartTime + ss.duration,\n                        url: imageUrl\n                      });\n                      if (callback) callback(imageUrl);\n                    }\n                  });\n                  return true;\n                }\n              });\n            }\n          };\n        }\n      });\n    } else {\n      track.startNumber = representation.startNumber;\n      track.segmentDuration = representation.segmentDuration;\n      track.timescale = representation.timescale;\n      track.templateUrl = buildTemplateUrl(representation);\n    }\n\n    if (track.tilesHor > 0 && track.tilesVert > 0) {\n      // Precalculate width and heigth per tile for perf reasons\n      track.widthPerTile = track.width / track.tilesHor;\n      track.heightPerTile = track.height / track.tilesVert;\n      tracks.push(track);\n    }\n  }\n\n  function buildTemplateUrl(representation) {\n    var templateUrl = urlUtils.isRelative(representation.media) ? urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\n\n    if (!templateUrl) {\n      return '';\n    }\n\n    return (0, _SegmentsUtils.replaceIDForTemplate)(templateUrl, representation.id);\n  }\n\n  function getTracks() {\n    return tracks;\n  }\n\n  function getCurrentTrackIndex() {\n    return currentTrackIndex;\n  }\n\n  function getCurrentTrack() {\n    if (currentTrackIndex < 0) {\n      return null;\n    }\n\n    return tracks[currentTrackIndex];\n  }\n\n  function setTrackByIndex(index) {\n    if (!tracks || tracks.length === 0) {\n      return;\n    } // select highest bitrate in case selected index is higher than bitrate list length\n\n\n    if (index >= tracks.length) {\n      index = tracks.length - 1;\n    }\n\n    currentTrackIndex = index;\n  }\n\n  function getThumbnailRequestForTime(time) {\n    var currentVoRep = void 0;\n    var voReps = adapter.getVoRepresentations(mediaInfo);\n\n    for (var i = 0; i < voReps.length; i++) {\n      if (tracks[currentTrackIndex].id === voReps[i].id) {\n        currentVoRep = voReps[i];\n        break;\n      }\n    }\n\n    return indexHandler.getSegmentRequestForTime(mediaInfo, currentVoRep, time);\n  }\n\n  function reset() {\n    tracks = [];\n    currentTrackIndex = -1;\n    mediaInfo = null;\n  }\n\n  instance = {\n    initialize: initialize,\n    getTracks: getTracks,\n    reset: reset,\n    setTrackByIndex: setTrackByIndex,\n    getCurrentTrack: getCurrentTrack,\n    getCurrentTrackIndex: getCurrentTrackIndex,\n    getThumbnailRequestForTime: getThumbnailRequestForTime\n  };\n  initialize();\n  return instance;\n}\n\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\nexports.default = _FactoryMaker2.default.getClassFactory(ThumbnailTracks);","map":{"version":3,"mappings":"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","names":["THUMBNAILS_SCHEME_ID_URIS","ThumbnailTracks","config","context","adapter","baseURLController","streamInfo","timelineConverter","debug","eventBus","events","dashConstants","urlUtils","getInstance","instance","tracks","indexHandler","currentTrackIndex","mediaInfo","loader","boxParser","initialize","reset","create","getIsDynamic","addTracks","normalizeSegments","fragments","representation","segments","count","i","len","s","seg","length","startTime","duration","timescale","media","mediaRange","push","getMediaInfoForType","Constants","IMAGE","voReps","getVoRepresentations","forEach","rep","segmentInfoType","DashConstants","SEGMENT_TEMPLATE","segmentDuration","SEGMENT_TIMELINE","createTrack","SEGMENT_BASE","sort","a","b","bitrate","useSegmentBase","track","ThumbnailTrackInfo","id","bandwidth","width","height","tilesHor","tilesVert","essentialProperties","p","indexOf","schemeIdUri","value","vars","split","isNaN","parseInt","trigger","Events","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","streamId","mediaType","mimeType","callback","cache","readThumbnail","time","cached","some","el","start","end","url","ss","mediaStartTime","baseURL","resolve","path","load","method","request","range","responseType","onload","e","info","getSamplesInfo","target","response","blob","Blob","slice","sampleList","offset","size","type","imageUrl","window","URL","createObjectURL","startNumber","templateUrl","buildTemplateUrl","widthPerTile","heightPerTile","isRelative","getTracks","getCurrentTrackIndex","getCurrentTrack","setTrackByIndex","index","getThumbnailRequestForTime","currentVoRep","getSegmentRequestForTime","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/thumbnail/ThumbnailTracks.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport DashConstants from '../../dash/constants/DashConstants';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport ThumbnailTrackInfo from '../vo/ThumbnailTrackInfo';\nimport URLUtils from '../../streaming/utils/URLUtils';\nimport { replaceIDForTemplate, getTimeBasedSegment } from '../../dash/utils/SegmentsUtils';\nimport Events from '../../core/events/Events';\nimport BoxParser from '../../streaming/utils/BoxParser';\nimport XHRLoader from '../../streaming/net/XHRLoader';\nimport DashHandler from '../../dash/DashHandler';\n\nexport const THUMBNAILS_SCHEME_ID_URIS = ['http://dashif.org/thumbnail_tile',\n                                   'http://dashif.org/guidelines/thumbnail_tile'];\n\nfunction ThumbnailTracks(config) {\n    const context = this.context;\n    const adapter = config.adapter;\n    const baseURLController = config.baseURLController;\n    const streamInfo = config.streamInfo;\n    const timelineConverter = config.timelineConverter;\n    const debug = config.debug;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const dashConstants = config.dashConstants;\n\n    const urlUtils = URLUtils(context).getInstance();\n\n    let instance,\n        tracks,\n        indexHandler,\n        currentTrackIndex,\n        mediaInfo,\n        loader,\n        boxParser;\n\n    function initialize() {\n        reset();\n        loader = XHRLoader(context).create({});\n        boxParser = BoxParser(context).getInstance();\n\n        indexHandler = DashHandler(context).create({\n            streamInfo: streamInfo,\n            timelineConverter: timelineConverter,\n            baseURLController: baseURLController,\n            debug: debug,\n            eventBus: eventBus,\n            events: events,\n            dashConstants: dashConstants,\n            urlUtils: urlUtils\n        });\n\n        // initialize controllers\n        indexHandler.initialize(adapter ? adapter.getIsDynamic() : false);\n\n        // parse representation and create tracks\n        addTracks();\n    }\n\n    function normalizeSegments(fragments, representation) {\n        const segments = [];\n        let count = 0;\n\n        let i,\n            len,\n            s,\n            seg;\n\n        for (i = 0, len = fragments.length; i < len; i++) {\n            s = fragments[i];\n\n            seg = getTimeBasedSegment(\n                timelineConverter,\n                adapter.getIsDynamic(),\n                representation,\n                s.startTime,\n                s.duration,\n                s.timescale,\n                s.media,\n                s.mediaRange,\n                count);\n\n            if (seg) {\n                segments.push(seg);\n                seg = null;\n                count++;\n            }\n        }\n        return segments;\n    }\n\n    function addTracks() {\n        if (!streamInfo || !adapter) {\n            return;\n        }\n\n        // Extract thumbnail tracks\n        mediaInfo = adapter.getMediaInfoForType(streamInfo, Constants.IMAGE);\n        if (!mediaInfo) {\n            return;\n        }\n\n        const voReps = adapter.getVoRepresentations(mediaInfo);\n\n        if (voReps && voReps.length > 0) {\n            voReps.forEach((rep) => {\n                if ((rep.segmentInfoType === DashConstants.SEGMENT_TEMPLATE && rep.segmentDuration > 0 && rep.media) ||\n                     rep.segmentInfoType === DashConstants.SEGMENT_TIMELINE) {\n                    createTrack(rep);\n                }\n                if (rep.segmentInfoType === DashConstants.SEGMENT_BASE) {\n                    createTrack(rep, true);\n                }\n            });\n        }\n\n        if (tracks.length > 0) {\n            // Sort bitrates and select the lowest bitrate rendition\n            tracks.sort((a, b) => a.bitrate - b.bitrate);\n            currentTrackIndex = tracks.length - 1;\n        }\n    }\n\n    function createTrack(representation, useSegmentBase) {\n        const track = new ThumbnailTrackInfo();\n        track.id = representation.id;\n        track.bitrate = representation.bandwidth;\n        track.width = representation.width;\n        track.height = representation.height;\n        track.tilesHor = 1;\n        track.tilesVert = 1;\n\n        if (representation.essentialProperties) {\n            representation.essentialProperties.forEach((p) => {\n                if (THUMBNAILS_SCHEME_ID_URIS.indexOf(p.schemeIdUri) >= 0 && p.value) {\n                    const vars = p.value.split('x');\n                    if (vars.length === 2 && !isNaN(vars[0]) && !isNaN(vars[1])) {\n                        track.tilesHor = parseInt(vars[0], 10);\n                        track.tilesVert = parseInt(vars[1], 10);\n                    }\n                }\n            });\n        }\n\n        if (useSegmentBase) {\n            eventBus.trigger(Events.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED, {\n                streamId: streamInfo.id,\n                mediaType: Constants.IMAGE,\n                mimeType: mediaInfo.mimeType,\n                representation: representation,\n                callback: function (streamId, mediaType, segments, representation) {\n                    let cache = [];\n                    segments = normalizeSegments(segments, representation);\n                    track.segmentDuration = segments[0].duration; //assume all segments have the same duration\n                    track.readThumbnail = function (time, callback) {\n\n                        let cached = null;\n                        cache.some(el => {\n                            if (el.start <= time && el.end > time) {\n                                cached = el.url;\n                                return true;\n                            }\n                        });\n                        if (cached) {\n                            callback(cached);\n                        } else {\n                            segments.some((ss) => {\n                                if (ss.mediaStartTime <= time && ss.mediaStartTime + ss.duration > time) {\n                                    const baseURL = baseURLController.resolve(representation.path);\n                                    loader.load({\n                                        method: 'get',\n                                        url: baseURL.url,\n                                        request: {\n                                            range: ss.mediaRange,\n                                            responseType: 'arraybuffer'\n                                        },\n                                        onload: function (e) {\n                                            let info = boxParser.getSamplesInfo(e.target.response);\n                                            let blob = new Blob( [ e.target.response.slice(info.sampleList[0].offset, info.sampleList[0].offset + info.sampleList[0].size) ], { type: 'image/jpeg' } );\n                                            let imageUrl = window.URL.createObjectURL( blob );\n                                            cache.push({\n                                                start: ss.mediaStartTime,\n                                                end: ss.mediaStartTime + ss.duration,\n                                                url: imageUrl\n                                            });\n                                            if (callback)\n                                                callback(imageUrl);\n                                        }\n                                    });\n                                    return true;\n                                }\n                            });\n                        }\n                    };\n                }\n            });\n        } else {\n            track.startNumber = representation.startNumber;\n            track.segmentDuration = representation.segmentDuration;\n            track.timescale = representation.timescale;\n            track.templateUrl = buildTemplateUrl(representation);\n        }\n\n        if (track.tilesHor > 0 && track.tilesVert > 0) {\n            // Precalculate width and heigth per tile for perf reasons\n            track.widthPerTile = track.width / track.tilesHor;\n            track.heightPerTile = track.height / track.tilesVert;\n            tracks.push(track);\n        }\n    }\n\n    function buildTemplateUrl(representation) {\n        const templateUrl = urlUtils.isRelative(representation.media) ?\n            urlUtils.resolve(representation.media, baseURLController.resolve(representation.path).url) : representation.media;\n\n        if (!templateUrl) {\n            return '';\n        }\n\n        return replaceIDForTemplate(templateUrl, representation.id);\n    }\n\n    function getTracks() {\n        return tracks;\n    }\n\n    function getCurrentTrackIndex() {\n        return currentTrackIndex;\n    }\n\n    function getCurrentTrack() {\n        if (currentTrackIndex < 0) {\n            return null;\n        }\n        return tracks[currentTrackIndex];\n    }\n\n    function setTrackByIndex(index) {\n        if (!tracks || tracks.length === 0) {\n            return;\n        }\n        // select highest bitrate in case selected index is higher than bitrate list length\n        if (index >= tracks.length) {\n            index = tracks.length - 1;\n        }\n        currentTrackIndex = index;\n    }\n\n    function getThumbnailRequestForTime(time) {\n        let currentVoRep;\n        const voReps = adapter.getVoRepresentations(mediaInfo);\n        for (let i = 0; i < voReps.length; i++) {\n            if (tracks[currentTrackIndex].id === voReps[i].id) {\n                currentVoRep = voReps[i];\n                break;\n            }\n        }\n\n        return indexHandler.getSegmentRequestForTime(mediaInfo, currentVoRep, time);\n    }\n\n    function reset() {\n        tracks = [];\n        currentTrackIndex = -1;\n        mediaInfo = null;\n    }\n\n    instance = {\n        initialize: initialize,\n        getTracks: getTracks,\n        reset: reset,\n        setTrackByIndex: setTrackByIndex,\n        getCurrentTrack: getCurrentTrack,\n        getCurrentTrackIndex: getCurrentTrackIndex,\n        getThumbnailRequestForTime: getThumbnailRequestForTime\n    };\n\n    initialize();\n\n    return instance;\n}\n\nThumbnailTracks.__dashjs_factory_name = 'ThumbnailTracks';\nexport default FactoryMaker.getClassFactory(ThumbnailTracks);\n"]},"metadata":{},"sourceType":"script"}