{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* @ignore\n*/\n\nfunction MetricSerialiser() {\n  // For each entry in the top level list within the metric (in the case\n  // of the DVBErrors metric each entry corresponds to an \"error event\"\n  // described in clause 10.8.4) the Player shall:\n  function serialise(metric) {\n    var pairs = [];\n    var obj = [];\n    var key = void 0,\n        value = void 0; // Take each (key, value) pair from the metric entry and create a\n    // string consisting of the name of the key, followed by an equals\n    // ('=') character, followed by the string representation of the\n    // value. The string representation of the value is created based\n    // on the type of the value following the instructions in Table 22.\n\n    for (key in metric) {\n      if (metric.hasOwnProperty(key) && key.indexOf('_') !== 0) {\n        value = metric[key]; // we want to ensure that keys still end up in the report\n        // even if there is no value\n\n        if (value === undefined || value === null) {\n          value = '';\n        } // DVB A168 10.12.4 Table 22\n\n\n        if (Array.isArray(value)) {\n          // if trace or similar is null, do not include in output\n          if (!value.length) {\n            continue;\n          }\n\n          obj = [];\n          value.forEach(function (v) {\n            var isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\n            obj.push(isBuiltIn ? v : serialise(v));\n          });\n          value = obj.map(encodeURIComponent).join(',');\n        } else if (typeof value === 'string') {\n          value = encodeURIComponent(value);\n        } else if (value instanceof Date) {\n          value = value.toISOString();\n        } else if (typeof value === 'number') {\n          value = Math.round(value);\n        }\n\n        pairs.push(key + '=' + value);\n      }\n    } // Concatenate the strings created in the previous step with an\n    // ampersand ('&') character between each one.\n\n\n    return pairs.join('&');\n  }\n\n  return {\n    serialise: serialise\n  };\n}\n\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser);\n/* jshint ignore:line */","map":{"version":3,"mappings":";;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;AAGA,SAASA,gBAAT,GAA4B;EAExB;EACA;EACA;EACA,SAASC,SAAT,CAAmBC,MAAnB,EAA2B;IACvB,IAAIC,QAAQ,EAAZ;IACA,IAAIC,MAAM,EAAV;IACA,IAAIC,YAAJ;IAAA,IACIC,cADJ,CAHuB,CAMvB;IACA;IACA;IACA;IACA;;IACA,KAAKD,GAAL,IAAYH,MAAZ,EAAoB;MAChB,IAAIA,OAAOK,cAAPL,CAAsBG,GAAtBH,KAA+BG,IAAIG,OAAJH,CAAY,GAAZA,MAAqB,CAAxD,EAA4D;QACxDC,QAAQJ,OAAOG,GAAPH,CAARI,CADwD,CAGxD;QACA;;QACA,IAAKA,UAAUG,SAAVH,IAAyBA,UAAU,IAAxC,EAA+C;UAC3CA,QAAQ,EAARA;QAGJ,CATwD,CASxD;;;QACA,IAAII,MAAMC,OAAND,CAAcJ,KAAdI,CAAJ,EAA0B;UACtB;UACA,IAAI,CAACJ,MAAMM,MAAX,EAAmB;YACf;UAGJR;;UAAAA,MAAM,EAANA;UAEAE,MAAMO,OAANP,CAAc,UAAUQ,CAAV,EAAa;YACvB,IAAIC,YAAYC,OAAOC,SAAPD,CAAiBE,QAAjBF,CAA0BG,IAA1BH,CAA+BF,CAA/BE,EAAkCI,KAAlCJ,CAAwC,CAAxCA,EAA2C,CAAC,CAA5CA,MAAmD,QAAnE;YAEAZ,IAAIiB,IAAJjB,CAASW,YAAYD,CAAZC,GAAgBd,UAAUa,CAAVb,CAAzBG;UAHJ;UAMAE,QAAQF,IAAIkB,GAAJlB,CAAQmB,kBAARnB,EAA4BoB,IAA5BpB,CAAiC,GAAjCA,CAARE;QAdJ,OAeO,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;UAClCA,QAAQiB,mBAAmBjB,KAAnBiB,CAARjB;QADG,OAEA,IAAIA,iBAAiBmB,IAArB,EAA2B;UAC9BnB,QAAQA,MAAMoB,WAANpB,EAARA;QADG,OAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;UAClCA,QAAQqB,KAAKC,KAALD,CAAWrB,KAAXqB,CAARrB;QAGJH;;QAAAA,MAAMkB,IAANlB,CAAWE,MAAM,GAANA,GAAYC,KAAvBH;MAEP;IAED,CAjDuB,CAiDvB;IACA;;;IACA,OAAOA,MAAMqB,IAANrB,CAAW,GAAXA,CAAP;EAGJ;;EAAA,OAAO;IACHF,WAAWA;EADR,CAAP;AAKJD;;AAAAA,iBAAiB6B,qBAAjB7B,GAAyC,kBAAzCA;kBACe8B,OAAOC,YAAPD,CAAoBE,mBAApBF,CAAwC9B,gBAAxC8B,C;AAA2D","names":["MetricSerialiser","serialise","metric","pairs","obj","key","value","hasOwnProperty","indexOf","undefined","Array","isArray","length","forEach","v","isBuiltIn","Object","prototype","toString","call","slice","push","map","encodeURIComponent","join","Date","toISOString","Math","round","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/utils/MetricSerialiser.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * @ignore\n */\nfunction MetricSerialiser() {\n\n    // For each entry in the top level list within the metric (in the case\n    // of the DVBErrors metric each entry corresponds to an \"error event\"\n    // described in clause 10.8.4) the Player shall:\n    function serialise(metric) {\n        let pairs = [];\n        let obj = [];\n        let key,\n            value;\n\n        // Take each (key, value) pair from the metric entry and create a\n        // string consisting of the name of the key, followed by an equals\n        // ('=') character, followed by the string representation of the\n        // value. The string representation of the value is created based\n        // on the type of the value following the instructions in Table 22.\n        for (key in metric) {\n            if (metric.hasOwnProperty(key) && (key.indexOf('_') !== 0)) {\n                value = metric[key];\n\n                // we want to ensure that keys still end up in the report\n                // even if there is no value\n                if ((value === undefined) || (value === null)) {\n                    value = '';\n                }\n\n                // DVB A168 10.12.4 Table 22\n                if (Array.isArray(value)) {\n                    // if trace or similar is null, do not include in output\n                    if (!value.length) {\n                        continue;\n                    }\n\n                    obj = [];\n\n                    value.forEach(function (v) {\n                        let isBuiltIn = Object.prototype.toString.call(v).slice(8, -1) !== 'Object';\n\n                        obj.push(isBuiltIn ? v : serialise(v));\n                    });\n\n                    value = obj.map(encodeURIComponent).join(',');\n                } else if (typeof value === 'string') {\n                    value = encodeURIComponent(value);\n                } else if (value instanceof Date) {\n                    value = value.toISOString();\n                } else if (typeof value === 'number') {\n                    value = Math.round(value);\n                }\n\n                pairs.push(key + '=' + value);\n            }\n        }\n\n        // Concatenate the strings created in the previous step with an\n        // ampersand ('&') character between each one.\n        return pairs.join('&');\n    }\n\n    return {\n        serialise: serialise\n    };\n}\n\nMetricSerialiser.__dashjs_factory_name = 'MetricSerialiser';\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricSerialiser); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}