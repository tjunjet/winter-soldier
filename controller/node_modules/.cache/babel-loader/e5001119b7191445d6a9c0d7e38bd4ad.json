{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventBus = require('./EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('./events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _FactoryMaker = require('./FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar LOG_LEVEL_NONE = 0;\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\nvar LOG_LEVEL_FATAL = 1;\nvar LOG_LEVEL_ERROR = 2;\nvar LOG_LEVEL_WARNING = 3;\nvar LOG_LEVEL_INFO = 4;\nvar LOG_LEVEL_DEBUG = 5;\n/**\n* @module Debug\n* @param {object} config\n* @ignore\n*/\n\nfunction Debug(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var settings = config.settings;\n  var logFn = [];\n  var instance = void 0,\n      showLogTimestamp = void 0,\n      showCalleeName = void 0,\n      startTime = void 0;\n\n  function setup() {\n    showLogTimestamp = true;\n    showCalleeName = true;\n    startTime = new Date().getTime();\n\n    if (typeof window !== 'undefined' && window.console) {\n      logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\n      logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\n      logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\n      logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\n      logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\n    }\n  }\n\n  function getLogFn(fn) {\n    if (fn && fn.bind) {\n      return fn.bind(window.console);\n    } // if not define, return the default function for reporting logs\n\n\n    return window.console.log.bind(window.console);\n  }\n  /**\n  * Retrieves a logger which can be used to write logging information in browser console.\n  * @param {object} instance Object for which the logger is created. It is used\n  * to include calle object information in log messages.\n  * @memberof module:Debug\n  * @returns {Logger}\n  * @instance\n  */\n\n\n  function getLogger(instance) {\n    return {\n      fatal: fatal.bind(instance),\n      error: error.bind(instance),\n      warn: warn.bind(instance),\n      info: info.bind(instance),\n      debug: debug.bind(instance)\n    };\n  }\n  /**\n  * Prepends a timestamp in milliseconds to each log message.\n  * @param {boolean} value Set to true if you want to see a timestamp in each log message.\n  * @default LOG_LEVEL_WARNING\n  * @memberof module:Debug\n  * @instance\n  */\n\n\n  function setLogTimestampVisible(value) {\n    showLogTimestamp = value;\n  }\n  /**\n  * Prepends the callee object name, and media type if available, to each log message.\n  * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\n  * @default true\n  * @memberof module:Debug\n  * @instance\n  */\n\n\n  function setCalleeNameVisible(value) {\n    showCalleeName = value;\n  }\n\n  function fatal() {\n    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {\n      params[_key] = arguments[_key];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_FATAL, this].concat(params));\n  }\n\n  function error() {\n    for (var _len2 = arguments.length, params = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      params[_key2] = arguments[_key2];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_ERROR, this].concat(params));\n  }\n\n  function warn() {\n    for (var _len3 = arguments.length, params = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      params[_key3] = arguments[_key3];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_WARNING, this].concat(params));\n  }\n\n  function info() {\n    for (var _len4 = arguments.length, params = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      params[_key4] = arguments[_key4];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_INFO, this].concat(params));\n  }\n\n  function debug() {\n    for (var _len5 = arguments.length, params = Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      params[_key5] = arguments[_key5];\n    }\n\n    doLog.apply(undefined, [LOG_LEVEL_DEBUG, this].concat(params));\n  }\n\n  function doLog(level, _this) {\n    var message = '';\n    var logTime = null;\n\n    if (showLogTimestamp) {\n      logTime = new Date().getTime();\n      message += '[' + (logTime - startTime) + ']';\n    }\n\n    if (showCalleeName && _this && _this.getClassName) {\n      message += '[' + _this.getClassName() + ']';\n\n      if (_this.getType) {\n        message += '[' + _this.getType() + ']';\n      }\n    }\n\n    if (message.length > 0) {\n      message += ' ';\n    }\n\n    for (var _len6 = arguments.length, params = Array(_len6 > 2 ? _len6 - 2 : 0), _key6 = 2; _key6 < _len6; _key6++) {\n      params[_key6 - 2] = arguments[_key6];\n    }\n\n    Array.apply(null, params).forEach(function (item) {\n      message += item + ' ';\n    }); // log to console if the log level is high enough\n\n    if (logFn[level] && settings.get().debug.logLevel >= level) {\n      logFn[level](message);\n    } // send log event regardless of log level\n\n\n    if (settings && settings.get().debug.dispatchEvent) {\n      eventBus.trigger(_Events2.default.LOG, {\n        message: message,\n        level: level\n      });\n    }\n  }\n\n  instance = {\n    getLogger: getLogger,\n    setLogTimestampVisible: setLogTimestampVisible,\n    setCalleeNameVisible: setCalleeNameVisible\n  };\n  setup();\n  return instance;\n}\n\nDebug.__dashjs_factory_name = 'Debug';\n\nvar factory = _FactoryMaker2.default.getSingletonFactory(Debug);\n\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\n\n_FactoryMaker2.default.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\n\nexports.default = factory;","map":{"version":3,"mappings":";;;;;;AA8BA;;;;AACA;;;;AACA;;;;;;;;AAEA;;AAAA,IAAMA,iBAAiB,CAAvB;AAlCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,IAAMC,kBAAkB,CAAxB;AACA,IAAMC,kBAAkB,CAAxB;AACA,IAAMC,oBAAoB,CAA1B;AACA,IAAMC,iBAAiB,CAAvB;AACA,IAAMC,kBAAkB,CAAxB;AAEA;;;;;;AAKA,SAASC,KAAT,CAAeC,MAAf,EAAuB;EAEnBA,SAASA,UAAU,EAAnBA;EACA,IAAMC,UAAU,KAAKA,OAArB;EACA,IAAMC,WAAW,wBAASD,OAAT,EAAkBE,WAAlB,EAAjB;EACA,IAAMC,WAAWJ,OAAOI,QAAxB;EAEA,IAAMC,QAAQ,EAAd;EAEA,IAAIC,iBAAJ;EAAA,IACIC,yBADJ;EAAA,IAEIC,uBAFJ;EAAA,IAGIC,kBAHJ;;EAKA,SAASC,KAAT,GAAiB;IACbH,mBAAmB,IAAnBA;IACAC,iBAAiB,IAAjBA;IACAC,YAAY,IAAIE,IAAJ,GAAWC,OAAX,EAAZH;;IAEA,IAAI,OAAOI,MAAP,KAAkB,WAAlB,IAAiCA,OAAOC,OAA5C,EAAqD;MACjDT,MAAMX,eAANW,IAAyBU,SAASF,OAAOC,OAAPD,CAAeG,KAAxBD,CAAzBV;MACAA,MAAMV,eAANU,IAAyBU,SAASF,OAAOC,OAAPD,CAAeG,KAAxBD,CAAzBV;MACAA,MAAMT,iBAANS,IAA2BU,SAASF,OAAOC,OAAPD,CAAeI,IAAxBF,CAA3BV;MACAA,MAAMR,cAANQ,IAAwBU,SAASF,OAAOC,OAAPD,CAAeK,IAAxBH,CAAxBV;MACAA,MAAMP,eAANO,IAAyBU,SAASF,OAAOC,OAAPD,CAAeM,KAAxBJ,CAAzBV;IAEP;EAED;;EAAA,SAASU,QAAT,CAAkBK,EAAlB,EAAsB;IAClB,IAAIA,MAAMA,GAAGC,IAAb,EAAmB;MACf,OAAOD,GAAGC,IAAHD,CAAQP,OAAOC,OAAfM,CAAP;IAEJ,CAJkB,CAIlB;;;IACA,OAAOP,OAAOC,OAAPD,CAAeS,GAAfT,CAAmBQ,IAAnBR,CAAwBA,OAAOC,OAA/BD,CAAP;EAGJ;EAAA;;;;;;;;;;EAQA,SAASU,SAAT,CAAmBjB,QAAnB,EAA6B;IACzB,OAAO;MACHkB,OAAOA,MAAMH,IAANG,CAAWlB,QAAXkB,CADJ;MAEHR,OAAOA,MAAMK,IAANL,CAAWV,QAAXU,CAFJ;MAGHC,MAAMA,KAAKI,IAALJ,CAAUX,QAAVW,CAHH;MAIHC,MAAMA,KAAKG,IAALH,CAAUZ,QAAVY,CAJH;MAKHC,OAAOA,MAAME,IAANF,CAAWb,QAAXa;IALJ,CAAP;EASJ;EAAA;;;;;;;;;EAOA,SAASM,sBAAT,CAAgCC,KAAhC,EAAuC;IACnCnB,mBAAmBmB,KAAnBnB;EAGJ;EAAA;;;;;;;;;EAOA,SAASoB,oBAAT,CAA8BD,KAA9B,EAAqC;IACjClB,iBAAiBkB,KAAjBlB;EAGJ;;EAAA,SAASgB,KAAT,GAA0B;IAAA,kCAARI,MAAQ;MAARA,MAAQ,MAARA,GAAQC,eAARD;IACdE;;IAAAA,wBAAMpC,eAANoC,EAAuB,IAAvBA,SAAgCF,MAAhCE;EAGJ;;EAAA,SAASd,KAAT,GAA0B;IAAA,mCAARY,MAAQ;MAARA,MAAQ,OAARA,GAAQC,gBAARD;IACdE;;IAAAA,wBAAMnC,eAANmC,EAAuB,IAAvBA,SAAgCF,MAAhCE;EAGJ;;EAAA,SAASb,IAAT,GAAyB;IAAA,mCAARW,MAAQ;MAARA,MAAQ,OAARA,GAAQC,gBAARD;IACbE;;IAAAA,wBAAMlC,iBAANkC,EAAyB,IAAzBA,SAAkCF,MAAlCE;EAGJ;;EAAA,SAASZ,IAAT,GAAyB;IAAA,mCAARU,MAAQ;MAARA,MAAQ,OAARA,GAAQC,gBAARD;IACbE;;IAAAA,wBAAMjC,cAANiC,EAAsB,IAAtBA,SAA+BF,MAA/BE;EAGJ;;EAAA,SAASX,KAAT,GAA0B;IAAA,mCAARS,MAAQ;MAARA,MAAQ,OAARA,GAAQC,gBAARD;IACdE;;IAAAA,wBAAMhC,eAANgC,EAAuB,IAAvBA,SAAgCF,MAAhCE;EAGJ;;EAAA,SAASA,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAAwC;IACpC,IAAIC,UAAU,EAAd;IACA,IAAIC,UAAU,IAAd;;IAEA,IAAI3B,gBAAJ,EAAsB;MAClB2B,UAAU,IAAIvB,IAAJ,GAAWC,OAAX,EAAVsB;MACAD,WAAW,OAAOC,UAAUzB,SAAjB,IAA8B,GAAzCwB;IAGJ;;IAAA,IAAIzB,kBAAkBwB,KAAlBxB,IAA2BwB,MAAMG,YAArC,EAAmD;MAC/CF,WAAW,MAAMD,MAAMG,YAANH,EAAN,GAA6B,GAAxCC;;MACA,IAAID,MAAMI,OAAV,EAAmB;QACfH,WAAW,MAAMD,MAAMI,OAANJ,EAAN,GAAwB,GAAnCC;MAEP;IAED;;IAAA,IAAIA,QAAQI,MAARJ,GAAiB,CAArB,EAAwB;MACpBA,WAAW,GAAXA;IAjBgC;;IAAA,mCAARL,MAAQ;MAARA,MAAQ,WAARA,GAAQC,gBAARD;IAoB5BU;;IAAAA,MAAMC,KAAND,CAAY,IAAZA,EAAkBV,MAAlBU,EAA0BE,OAA1BF,CAAkC,UAAUG,IAAV,EAAgB;MAC9CR,WAAWQ,OAAO,GAAlBR;IADJ,GApBoC,CAwBpC;;IACA,IAAI5B,MAAM0B,KAAN1B,KAAgBD,SAASsC,GAATtC,GAAee,KAAff,CAAqBuC,QAArBvC,IAAiC2B,KAArD,EAA4D;MACxD1B,MAAM0B,KAAN1B,EAAa4B,OAAb5B;IAGJ,CA7BoC,CA6BpC;;;IACA,IAAID,YAAYA,SAASsC,GAATtC,GAAee,KAAff,CAAqBwC,aAArC,EAAoD;MAChD1C,SAAS2C,OAAT3C,CAAiB4C,iBAAOC,GAAxB7C,EAA6B;QAAE+B,SAASA,OAAX;QAAoBF,OAAOA;MAA3B,CAA7B7B;IAEP;EAEDI;;EAAAA,WAAW;IACPiB,WAAWA,SADJ;IAEPE,wBAAwBA,sBAFjB;IAGPE,sBAAsBA;EAHf,CAAXrB;EAMAI;EAEA,OAAOJ,QAAP;AAGJP;;AAAAA,MAAMiD,qBAANjD,GAA8B,OAA9BA;;AAEA,IAAMkD,UAAUC,uBAAaC,mBAAbD,CAAiCnD,KAAjCmD,CAAhB;;AACAD,QAAQxD,cAARwD,GAAyBxD,cAAzBwD;AACAA,QAAQvD,eAARuD,GAA0BvD,eAA1BuD;AACAA,QAAQtD,eAARsD,GAA0BtD,eAA1BsD;AACAA,QAAQrD,iBAARqD,GAA4BrD,iBAA5BqD;AACAA,QAAQpD,cAARoD,GAAyBpD,cAAzBoD;AACAA,QAAQnD,eAARmD,GAA0BnD,eAA1BmD;;AACAC,uBAAaE,sBAAbF,CAAoCnD,MAAMiD,qBAA1CE,EAAiED,OAAjEC;;kBACeD,O","names":["LOG_LEVEL_NONE","LOG_LEVEL_FATAL","LOG_LEVEL_ERROR","LOG_LEVEL_WARNING","LOG_LEVEL_INFO","LOG_LEVEL_DEBUG","Debug","config","context","eventBus","getInstance","settings","logFn","instance","showLogTimestamp","showCalleeName","startTime","setup","Date","getTime","window","console","getLogFn","error","warn","info","debug","fn","bind","log","getLogger","fatal","setLogTimestampVisible","value","setCalleeNameVisible","params","arguments","doLog","level","_this","message","logTime","getClassName","getType","length","Array","apply","forEach","item","get","logLevel","dispatchEvent","trigger","Events","LOG","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory","updateSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/core/Debug.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from './EventBus';\nimport Events from './events/Events';\nimport FactoryMaker from './FactoryMaker';\n\nconst LOG_LEVEL_NONE = 0;\nconst LOG_LEVEL_FATAL = 1;\nconst LOG_LEVEL_ERROR = 2;\nconst LOG_LEVEL_WARNING = 3;\nconst LOG_LEVEL_INFO = 4;\nconst LOG_LEVEL_DEBUG = 5;\n\n/**\n * @module Debug\n * @param {object} config\n * @ignore\n */\nfunction Debug(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n    const settings = config.settings;\n\n    const logFn = [];\n\n    let instance,\n        showLogTimestamp,\n        showCalleeName,\n        startTime;\n\n    function setup() {\n        showLogTimestamp = true;\n        showCalleeName = true;\n        startTime = new Date().getTime();\n\n        if (typeof window !== 'undefined' && window.console) {\n            logFn[LOG_LEVEL_FATAL] = getLogFn(window.console.error);\n            logFn[LOG_LEVEL_ERROR] = getLogFn(window.console.error);\n            logFn[LOG_LEVEL_WARNING] = getLogFn(window.console.warn);\n            logFn[LOG_LEVEL_INFO] = getLogFn(window.console.info);\n            logFn[LOG_LEVEL_DEBUG] = getLogFn(window.console.debug);\n        }\n    }\n\n    function getLogFn(fn) {\n        if (fn && fn.bind) {\n            return fn.bind(window.console);\n        }\n        // if not define, return the default function for reporting logs\n        return window.console.log.bind(window.console);\n    }\n\n    /**\n     * Retrieves a logger which can be used to write logging information in browser console.\n     * @param {object} instance Object for which the logger is created. It is used\n     * to include calle object information in log messages.\n     * @memberof module:Debug\n     * @returns {Logger}\n     * @instance\n     */\n    function getLogger(instance) {\n        return {\n            fatal: fatal.bind(instance),\n            error: error.bind(instance),\n            warn: warn.bind(instance),\n            info: info.bind(instance),\n            debug: debug.bind(instance)\n        };\n    }\n\n    /**\n     * Prepends a timestamp in milliseconds to each log message.\n     * @param {boolean} value Set to true if you want to see a timestamp in each log message.\n     * @default LOG_LEVEL_WARNING\n     * @memberof module:Debug\n     * @instance\n     */\n    function setLogTimestampVisible(value) {\n        showLogTimestamp = value;\n    }\n\n    /**\n     * Prepends the callee object name, and media type if available, to each log message.\n     * @param {boolean} value Set to true if you want to see the callee object name and media type in each log message.\n     * @default true\n     * @memberof module:Debug\n     * @instance\n     */\n    function setCalleeNameVisible(value) {\n        showCalleeName = value;\n    }\n\n    function fatal(...params) {\n        doLog(LOG_LEVEL_FATAL, this, ...params);\n    }\n\n    function error(...params) {\n        doLog(LOG_LEVEL_ERROR, this, ...params);\n    }\n\n    function warn(...params) {\n        doLog(LOG_LEVEL_WARNING, this, ...params);\n    }\n\n    function info(...params) {\n        doLog(LOG_LEVEL_INFO, this, ...params);\n    }\n\n    function debug(...params) {\n        doLog(LOG_LEVEL_DEBUG, this, ...params);\n    }\n\n    function doLog(level, _this, ...params) {\n        let message = '';\n        let logTime = null;\n\n        if (showLogTimestamp) {\n            logTime = new Date().getTime();\n            message += '[' + (logTime - startTime) + ']';\n        }\n\n        if (showCalleeName && _this && _this.getClassName) {\n            message += '[' + _this.getClassName() + ']';\n            if (_this.getType) {\n                message += '[' + _this.getType() + ']';\n            }\n        }\n\n        if (message.length > 0) {\n            message += ' ';\n        }\n\n        Array.apply(null, params).forEach(function (item) {\n            message += item + ' ';\n        });\n\n        // log to console if the log level is high enough\n        if (logFn[level] && settings.get().debug.logLevel >= level) {\n            logFn[level](message);\n        }\n\n        // send log event regardless of log level\n        if (settings && settings.get().debug.dispatchEvent) {\n            eventBus.trigger(Events.LOG, { message: message, level: level });\n        }\n    }\n\n    instance = {\n        getLogger: getLogger,\n        setLogTimestampVisible: setLogTimestampVisible,\n        setCalleeNameVisible: setCalleeNameVisible\n    };\n\n    setup();\n\n    return instance;\n}\n\nDebug.__dashjs_factory_name = 'Debug';\n\nconst factory = FactoryMaker.getSingletonFactory(Debug);\nfactory.LOG_LEVEL_NONE = LOG_LEVEL_NONE;\nfactory.LOG_LEVEL_FATAL = LOG_LEVEL_FATAL;\nfactory.LOG_LEVEL_ERROR = LOG_LEVEL_ERROR;\nfactory.LOG_LEVEL_WARNING = LOG_LEVEL_WARNING;\nfactory.LOG_LEVEL_INFO = LOG_LEVEL_INFO;\nfactory.LOG_LEVEL_DEBUG = LOG_LEVEL_DEBUG;\nFactoryMaker.updateSingletonFactory(Debug.__dashjs_factory_name, factory);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}