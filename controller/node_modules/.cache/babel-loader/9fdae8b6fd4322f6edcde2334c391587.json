{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _MediaPlayer = require('./MediaPlayer');\n\nvar _MediaPlayer2 = _interopRequireDefault(_MediaPlayer);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction MediaPlayerFactory() {\n  /**\n  * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.\n  * @type {string}\n  */\n  var SUPPORTED_MIME_TYPE = 'application/dash+xml';\n  var logger = void 0;\n  /**\n  *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,\n  *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose\n  *  type is application/dash+xml.\n  * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n  * @param {HTMLMediaElement} video\n  * @param {HTMLSourceElement} source\n  * @param {Object} context\n  * @returns {MediaPlayer|null}\n  */\n\n  function create(video, source, context) {\n    if (!video || !/^VIDEO$/i.test(video.nodeName)) return null;\n    if (video._dashjs_player) return video._dashjs_player;\n    var player = void 0;\n    var videoID = video.id || video.name || 'video element';\n    source = source || [].slice.call(video.querySelectorAll('source')).filter(function (s) {\n      return s.type == SUPPORTED_MIME_TYPE;\n    })[0];\n\n    if (!source && video.src) {\n      source = document.createElement('source');\n      source.src = video.src;\n    } else if (!source && !video.src) {\n      return null;\n    }\n\n    context = context || {};\n    player = (0, _MediaPlayer2.default)(context).create();\n    player.initialize(video, source.src, video.autoplay);\n\n    if (!logger) {\n      logger = player.getDebug().getLogger();\n    }\n\n    logger.debug('Converted ' + videoID + ' to dash.js player and added content: ' + source.src); // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its\n    // already been setup.\n\n    video._dashjs_player = player;\n    return player;\n  }\n  /**\n  * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is\n  * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.\n  * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.\n  * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.\n  * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n  * Returns an array holding all the MediaPlayer instances that were added by this method.\n  * @param {string} selector - CSS selector\n  * @param {Object} scope\n  * @returns {Array} an array of MediaPlayer objects\n  */\n\n\n  function createAll(selector, scope) {\n    var aPlayers = [];\n    selector = selector || '[data-dashjs-player]';\n    scope = scope || document;\n    var videos = scope.querySelectorAll(selector);\n\n    for (var i = 0; i < videos.length; i++) {\n      var player = create(videos[i], null);\n      aPlayers.push(player);\n    }\n\n    var sources = scope.querySelectorAll('source[type=\"' + SUPPORTED_MIME_TYPE + '\"]');\n\n    for (var _i = 0; _i < sources.length; _i++) {\n      var video = findVideo(sources[_i]);\n\n      var _player = create(video, null);\n\n      aPlayers.push(_player);\n    }\n\n    return aPlayers;\n  }\n\n  function findVideo(el) {\n    if (/^VIDEO$/i.test(el.nodeName)) {\n      return el;\n    } else {\n      return findVideo(el.parentNode);\n    }\n  }\n\n  return {\n    create: create,\n    createAll: createAll\n  };\n}\n\nvar instance = MediaPlayerFactory();\nvar loadInterval = void 0;\n\nfunction loadHandler() {\n  window.removeEventListener('load', loadHandler);\n  instance.createAll();\n}\n\nfunction loadIntervalHandler() {\n  if (window.dashjs) {\n    window.clearInterval(loadInterval);\n    instance.createAll();\n  }\n}\n\nvar avoidAutoCreate = typeof window !== 'undefined' && window && window.dashjs && window.dashjs.skipAutoCreate;\n\nif (!avoidAutoCreate && typeof window !== 'undefined' && window && window.addEventListener) {\n  if (window.document.readyState === 'complete') {\n    if (window.dashjs) {\n      instance.createAll();\n    } else {\n      // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet\n      loadInterval = window.setInterval(loadIntervalHandler, 500);\n    }\n  } else {\n    window.addEventListener('load', loadHandler);\n  }\n}\n\nexports.default = instance;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;;AAEA;;AAAA,SAASA,kBAAT,GAA8B;EAC1B;;;;EAIA,IAAMC,sBAAsB,sBAA5B;EAEA,IAAIC,eAAJ;EAEA;;;;;;;;;;;EAUA,SAASC,MAAT,CAAgBC,KAAhB,EAAuBC,MAAvB,EAA+BC,OAA/B,EAAwC;IACpC,IAAI,CAACF,KAAD,IAAU,CAAE,WAAYG,IAAZ,CAAiBH,MAAMI,QAAvB,CAAhB,EAAkD,OAAO,IAAP;IAElD,IAAIJ,MAAMK,cAAV,EAA0B,OAAOL,MAAMK,cAAb;IAE1B,IAAIC,eAAJ;IACA,IAAIC,UAAWP,MAAMQ,EAANR,IAAYA,MAAMS,IAAlBT,IAA0B,eAAzC;IAEAC,SAASA,UAAU,GAAGS,KAAH,CAASC,IAAT,CAAcX,MAAMY,gBAANZ,CAAuB,QAAvBA,CAAd,EAAgDa,MAAhD,CAAuD,UAAUC,CAAV,EAAa;MAC/E,OAAOA,EAAEC,IAAFD,IAAUjB,mBAAjB;IADW,GAEZ,CAFY,CAAnBI;;IAGA,IAAI,CAACA,MAAD,IAAWD,MAAMgB,GAArB,EAA0B;MACtBf,SAASgB,SAASC,aAATD,CAAuB,QAAvBA,CAAThB;MACAA,OAAOe,GAAPf,GAAaD,MAAMgB,GAAnBf;IAFJ,OAGO,IAAI,CAACA,MAAD,IAAW,CAACD,MAAMgB,GAAtB,EAA2B;MAC9B,OAAO,IAAP;IAGJd;;IAAAA,UAAUA,WAAW,EAArBA;IACAI,SAAS,2BAAYJ,OAAZ,EAAqBH,MAArB,EAATO;IACAA,OAAOa,UAAPb,CAAkBN,KAAlBM,EAAyBL,OAAOe,GAAhCV,EAAqCN,MAAMoB,QAA3Cd;;IAEA,IAAI,CAACR,MAAL,EAAa;MACTA,SAASQ,OAAOe,QAAPf,GAAkBgB,SAAlBhB,EAATR;IAEJA;;IAAAA,OAAOyB,KAAPzB,CAAa,eAAeS,OAAf,GAAyB,wCAAzB,GAAoEN,OAAOe,GAAxFlB,EAzBoC,CA2BpC;IACA;;IACAE,MAAMK,cAANL,GAAuBM,MAAvBN;IAEA,OAAOM,MAAP;EAGJ;EAAA;;;;;;;;;;;;;EAWA,SAASkB,SAAT,CAAmBC,QAAnB,EAA6BC,KAA7B,EAAoC;IAChC,IAAIC,WAAW,EAAf;IACAF,WAAWA,YAAY,sBAAvBA;IACAC,QAAQA,SAAST,QAAjBS;IACA,IAAIE,SAASF,MAAMd,gBAANc,CAAuBD,QAAvBC,CAAb;;IACA,KAAK,IAAIG,IAAI,CAAb,EAAgBA,IAAID,OAAOE,MAA3B,EAAmCD,GAAnC,EAAwC;MACpC,IAAIvB,SAASP,OAAO6B,OAAOC,CAAPD,CAAP7B,EAAkB,IAAlBA,CAAb;MACA4B,SAASI,IAATJ,CAAcrB,MAAdqB;IAGJ;;IAAA,IAAIK,UAAUN,MAAMd,gBAANc,CAAuB,kBAAkB7B,mBAAlB,GAAwC,IAA/D6B,CAAd;;IACA,KAAK,IAAIG,KAAI,CAAb,EAAgBA,KAAIG,QAAQF,MAA5B,EAAoCD,IAApC,EAAyC;MACrC,IAAI7B,QAAQiC,UAAUD,QAAQH,EAARG,CAAVC,CAAZ;;MACA,IAAI3B,UAASP,OAAOC,KAAPD,EAAc,IAAdA,CAAb;;MACA4B,SAASI,IAATJ,CAAcrB,OAAdqB;IAGJ;;IAAA,OAAOA,QAAP;EAGJ;;EAAA,SAASM,SAAT,CAAmBC,EAAnB,EAAuB;IACnB,IAAK,WAAY/B,IAAZ,CAAiB+B,GAAG9B,QAApB,CAAL,EAAoC;MAChC,OAAO8B,EAAP;IADJ,OAEO;MACH,OAAOD,UAAUC,GAAGC,UAAbF,CAAP;IAEP;EAED;;EAAA,OAAO;IACHlC,QAAQA,MADL;IAEHyB,WAAWA;EAFR,CAAP;AAMJ;;AAAA,IAAIY,WAAWxC,oBAAf;AACA,IAAIyC,qBAAJ;;AAEA,SAASC,WAAT,GAAuB;EACnBC,OAAOC,mBAAPD,CAA2B,MAA3BA,EAAmCD,WAAnCC;EACAH,SAASZ,SAATY;AAGJ;;AAAA,SAASK,mBAAT,GAA+B;EAC3B,IAAIF,OAAOG,MAAX,EAAmB;IACfH,OAAOI,aAAPJ,CAAqBF,YAArBE;IACAH,SAASZ,SAATY;EAEP;AAED;;AAAA,IAAIQ,kBAAkB,OAAOL,MAAP,KAAkB,WAAlB,IAAiCA,MAAjC,IAA2CA,OAAOG,MAAlD,IAA4DH,OAAOG,MAAPH,CAAcM,cAAhG;;AAEA,IAAI,CAACD,eAAD,IAAoB,OAAOL,MAAP,KAAkB,WAAtC,IAAqDA,MAArD,IAA+DA,OAAOO,gBAA1E,EAA4F;EACxF,IAAIP,OAAOtB,QAAPsB,CAAgBQ,UAAhBR,KAA+B,UAAnC,EAA+C;IAC3C,IAAIA,OAAOG,MAAX,EAAmB;MACfN,SAASZ,SAATY;IADJ,OAEO;MACH;MACAC,eAAeE,OAAOS,WAAPT,CAAmBE,mBAAnBF,EAAwC,GAAxCA,CAAfF;IAEP;EAPD,OAOO;IACHE,OAAOO,gBAAPP,CAAwB,MAAxBA,EAAgCD,WAAhCC;EAEP;;;kBAEcH,Q","names":["MediaPlayerFactory","SUPPORTED_MIME_TYPE","logger","create","video","source","context","test","nodeName","_dashjs_player","player","videoID","id","name","slice","call","querySelectorAll","filter","s","type","src","document","createElement","initialize","autoplay","getDebug","getLogger","debug","createAll","selector","scope","aPlayers","videos","i","length","push","sources","findVideo","el","parentNode","instance","loadInterval","loadHandler","window","removeEventListener","loadIntervalHandler","dashjs","clearInterval","avoidAutoCreate","skipAutoCreate","addEventListener","readyState","setInterval"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/MediaPlayerFactory.js"],"sourcesContent":["import MediaPlayer from './MediaPlayer';\n\nfunction MediaPlayerFactory() {\n    /**\n     * mime-type identifier for any source content to be accepted as a dash manifest by the create() method.\n     * @type {string}\n     */\n    const SUPPORTED_MIME_TYPE = 'application/dash+xml';\n\n    let logger;\n\n    /**\n     *  A new MediaPlayer is instantiated for the supplied videoElement and optional source and context.  If no context is provided,\n     *  a default DashContext is used. If no source is provided, the videoElement is interrogated to extract the first source whose\n     *  type is application/dash+xml.\n     * The autoplay property of the videoElement is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n     * @param {HTMLMediaElement} video\n     * @param {HTMLSourceElement} source\n     * @param {Object} context\n     * @returns {MediaPlayer|null}\n     */\n    function create(video, source, context) {\n        if (!video || !(/^VIDEO$/i).test(video.nodeName)) return null;\n\n        if (video._dashjs_player) return video._dashjs_player;\n\n        let player;\n        let videoID = (video.id || video.name || 'video element');\n\n        source = source || [].slice.call(video.querySelectorAll('source')).filter(function (s) {\n                return s.type == SUPPORTED_MIME_TYPE;\n            })[0];\n        if (!source && video.src) {\n            source = document.createElement('source');\n            source.src = video.src;\n        } else if (!source && !video.src) {\n            return null;\n        }\n\n        context = context || {};\n        player = MediaPlayer(context).create();\n        player.initialize(video, source.src, video.autoplay);\n\n        if (!logger) {\n            logger = player.getDebug().getLogger();\n        }\n        logger.debug('Converted ' + videoID + ' to dash.js player and added content: ' + source.src);\n\n        // Store a reference to the player on the video element so it can be gotten at for debugging and so we know its\n        // already been setup.\n        video._dashjs_player = player;\n\n        return player;\n    }\n\n    /**\n     * Searches the provided scope for all instances of the indicated selector. If no scope is provided, document is used. If no selector is\n     * specified, [data-dashjs-player] is used. The declarative setup also looks for source elements with the type attribute set to 'application/dash+xml'.\n     * It then looks for those video elements which have a source element defined with a type matching 'application/dash+xml'.\n     * A new MediaPlayer is instantiated for each matching video element and the appropriate source is assigned.\n     * The autoplay property of the video element is preserved. Any preload attribute is ignored. This method should be called after the page onLoad event is dispatched.\n     * Returns an array holding all the MediaPlayer instances that were added by this method.\n     * @param {string} selector - CSS selector\n     * @param {Object} scope\n     * @returns {Array} an array of MediaPlayer objects\n     */\n    function createAll(selector, scope) {\n        let aPlayers = [];\n        selector = selector || '[data-dashjs-player]';\n        scope = scope || document;\n        let videos = scope.querySelectorAll(selector);\n        for (let i = 0; i < videos.length; i++) {\n            let player = create(videos[i], null);\n            aPlayers.push(player);\n        }\n\n        let sources = scope.querySelectorAll('source[type=\"' + SUPPORTED_MIME_TYPE + '\"]');\n        for (let i = 0; i < sources.length; i++) {\n            let video = findVideo(sources[i]);\n            let player = create(video, null);\n            aPlayers.push(player);\n        }\n\n        return aPlayers;\n    }\n\n    function findVideo(el) {\n        if ((/^VIDEO$/i).test(el.nodeName)) {\n            return el;\n        } else {\n            return findVideo(el.parentNode);\n        }\n    }\n\n    return {\n        create: create,\n        createAll: createAll\n    };\n}\n\nlet instance = MediaPlayerFactory();\nlet loadInterval;\n\nfunction loadHandler() {\n    window.removeEventListener('load', loadHandler);\n    instance.createAll();\n}\n\nfunction loadIntervalHandler() {\n    if (window.dashjs) {\n        window.clearInterval(loadInterval);\n        instance.createAll();\n    }\n}\n\nlet avoidAutoCreate = typeof window !== 'undefined' && window && window.dashjs && window.dashjs.skipAutoCreate;\n\nif (!avoidAutoCreate && typeof window !== 'undefined' && window && window.addEventListener) {\n    if (window.document.readyState === 'complete') {\n        if (window.dashjs) {\n            instance.createAll();\n        } else {\n            // If loaded asynchronously, window.readyState may be 'complete' even if dashjs hasn't loaded yet\n            loadInterval = window.setInterval(loadIntervalHandler, 500);\n        }\n    } else {\n        window.addEventListener('load', loadHandler);\n    }\n}\n\nexport default instance;\n"]},"metadata":{},"sourceType":"script"}