{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ProtectionKeyController = require('../controllers/ProtectionKeyController');\n\nvar _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController);\n\nvar _NeedKey = require('../vo/NeedKey');\n\nvar _NeedKey2 = _interopRequireDefault(_NeedKey);\n\nvar _DashJSError = require('../../vo/DashJSError');\n\nvar _DashJSError2 = _interopRequireDefault(_DashJSError);\n\nvar _KeyMessage = require('../vo/KeyMessage');\n\nvar _KeyMessage2 = _interopRequireDefault(_KeyMessage);\n\nvar _KeySystemConfiguration = require('../vo/KeySystemConfiguration');\n\nvar _KeySystemConfiguration2 = _interopRequireDefault(_KeySystemConfiguration);\n\nvar _KeySystemAccess = require('../vo/KeySystemAccess');\n\nvar _KeySystemAccess2 = _interopRequireDefault(_KeySystemAccess);\n\nvar _ProtectionErrors = require('../errors/ProtectionErrors');\n\nvar _ProtectionErrors2 = _interopRequireDefault(_ProtectionErrors);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ProtectionModel_01b(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = config.eventBus; //Need to pass in here so we can use same instance since this is optional module\n\n  var events = config.events;\n  var debug = config.debug;\n  var api = config.api;\n  var errHandler = config.errHandler;\n  var instance = void 0,\n      logger = void 0,\n      videoElement = void 0,\n      keySystem = void 0,\n      protectionKeyController = void 0,\n      // With this version of the EME APIs, sessionIDs are not assigned to\n  // sessions until the first key message is received.  We are assuming\n  // that in the case of multiple sessions, key messages will be received\n  // in the order that generateKeyRequest() is called.\n  // Holding spot for newly-created sessions until we determine whether or\n  // not the CDM supports sessionIDs\n  pendingSessions = void 0,\n      // List of sessions that have been initialized.  Only the first position will\n  // be used in the case that the CDM does not support sessionIDs\n  sessions = void 0,\n      // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n  // there is no way for us to differentiate between sessions, therefore\n  // we must only allow a single session.  Once we receive the first key\n  // message we can set this flag to determine if more sessions are allowed\n  moreSessionsAllowed = void 0,\n      // This is our main event handler for all desired HTMLMediaElement events\n  // related to EME.  These events are translated into our API-independent\n  // versions of the same events\n  eventHandler = void 0;\n\n  function setup() {\n    logger = debug.getLogger(instance);\n    videoElement = null;\n    keySystem = null;\n    pendingSessions = [];\n    sessions = [];\n    protectionKeyController = (0, _ProtectionKeyController2.default)(context).getInstance();\n    eventHandler = createEventHandler();\n  }\n\n  function reset() {\n    if (videoElement) {\n      removeEventListeners();\n    }\n\n    for (var i = 0; i < sessions.length; i++) {\n      closeKeySession(sessions[i]);\n    }\n\n    eventBus.trigger(events.TEARDOWN_COMPLETE);\n  }\n\n  function getKeySystem() {\n    return keySystem;\n  }\n\n  function getAllInitData() {\n    var retVal = [];\n\n    for (var i = 0; i < pendingSessions.length; i++) {\n      retVal.push(pendingSessions[i].initData);\n    }\n\n    for (var _i = 0; _i < sessions.length; _i++) {\n      retVal.push(sessions[_i].initData);\n    }\n\n    return retVal;\n  }\n\n  function requestKeySystemAccess(ksConfigurations) {\n    var ve = videoElement;\n\n    if (!ve) {\n      // Must have a video element to do this capability tests\n      ve = document.createElement('video');\n    } // Try key systems in order, first one with supported key system configuration\n    // is used\n\n\n    var found = false;\n\n    for (var ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n      var systemString = ksConfigurations[ksIdx].ks.systemString;\n      var configs = ksConfigurations[ksIdx].configs;\n      var supportedAudio = null;\n      var supportedVideo = null; // Try key system configs in order, first one with supported audio/video\n      // is used\n\n      for (var configIdx = 0; configIdx < configs.length; configIdx++) {\n        //let audios = configs[configIdx].audioCapabilities;\n        var videos = configs[configIdx].videoCapabilities; // Look for supported video container/codecs\n\n        if (videos && videos.length !== 0) {\n          supportedVideo = []; // Indicates that we have a requested video config\n\n          for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n            if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n              supportedVideo.push(videos[videoIdx]);\n            }\n          }\n        } // No supported audio or video in this configuration OR we have\n        // requested audio or video configuration that is not supported\n\n\n        if (!supportedAudio && !supportedVideo || supportedAudio && supportedAudio.length === 0 || supportedVideo && supportedVideo.length === 0) {\n          continue;\n        } // This configuration is supported\n\n\n        found = true;\n        var ksConfig = new _KeySystemConfiguration2.default(supportedAudio, supportedVideo);\n        var ks = protectionKeyController.getKeySystemBySystemString(systemString);\n        eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {\n          data: new _KeySystemAccess2.default(ks, ksConfig)\n        });\n        break;\n      }\n    }\n\n    if (!found) {\n      eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {\n        error: 'Key system access denied! -- No valid audio/video content configurations detected!'\n      });\n    }\n  }\n\n  function selectKeySystem(keySystemAccess) {\n    keySystem = keySystemAccess.keySystem;\n    eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n  }\n\n  function setMediaElement(mediaElement) {\n    if (videoElement === mediaElement) {\n      return;\n    } // Replacing the previous element\n\n\n    if (videoElement) {\n      removeEventListeners(); // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\n\n      for (var i = 0; i < sessions.length; i++) {\n        closeKeySession(sessions[i]);\n      }\n\n      sessions = [];\n    }\n\n    videoElement = mediaElement; // Only if we are not detaching from the existing element\n\n    if (videoElement) {\n      videoElement.addEventListener(api.keyerror, eventHandler);\n      videoElement.addEventListener(api.needkey, eventHandler);\n      videoElement.addEventListener(api.keymessage, eventHandler);\n      videoElement.addEventListener(api.keyadded, eventHandler);\n      eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n    }\n  }\n\n  function createKeySession(initData\n  /*, protData, keySystemType */\n  ) {\n    if (!keySystem) {\n      throw new Error('Can not create sessions until you have selected a key system');\n    } // Determine if creating a new session is allowed\n\n\n    if (moreSessionsAllowed || sessions.length === 0) {\n      var newSession = {\n        // Implements SessionToken\n        sessionID: null,\n        initData: initData,\n        getSessionID: function getSessionID() {\n          return this.sessionID;\n        },\n        getExpirationTime: function getExpirationTime() {\n          return NaN;\n        },\n        getSessionType: function getSessionType() {\n          return 'temporary';\n        }\n      };\n      pendingSessions.push(newSession); // Send our request to the CDM\n\n      videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n      return newSession;\n    } else {\n      throw new Error('Multiple sessions not allowed!');\n    }\n  }\n\n  function updateKeySession(sessionToken, message) {\n    var sessionID = sessionToken.sessionID;\n\n    if (!protectionKeyController.isClearKey(keySystem)) {\n      // Send our request to the CDM\n      videoElement[api.addKey](keySystem.systemString, new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n    } else {\n      // For clearkey, message is a ClearKeyKeySet\n      for (var i = 0; i < message.keyPairs.length; i++) {\n        videoElement[api.addKey](keySystem.systemString, message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n      }\n    }\n  }\n\n  function closeKeySession(sessionToken) {\n    // Send our request to the CDM\n    try {\n      videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n    } catch (error) {\n      eventBus.trigger(events.KEY_SESSION_CLOSED, {\n        data: null,\n        error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message\n      });\n    }\n  }\n\n  function setServerCertificate()\n  /*serverCertificate*/\n  {\n    /* Not supported */\n  }\n\n  function loadKeySession()\n  /*sessionID*/\n  {\n    /* Not supported */\n  }\n\n  function removeKeySession()\n  /*sessionToken*/\n  {\n    /* Not supported */\n  }\n\n  function createEventHandler() {\n    return {\n      handleEvent: function handleEvent(event) {\n        var sessionToken = null;\n\n        switch (event.type) {\n          case api.needkey:\n            var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n            eventBus.trigger(events.NEED_KEY, {\n              key: new _NeedKey2.default(initData, 'cenc')\n            });\n            break;\n\n          case api.keyerror:\n            sessionToken = findSessionByID(sessions, event.sessionId);\n\n            if (!sessionToken) {\n              sessionToken = findSessionByID(pendingSessions, event.sessionId);\n            }\n\n            if (sessionToken) {\n              var code = _ProtectionErrors2.default.MEDIA_KEYERR_CODE;\n              var msg = '';\n\n              switch (event.errorCode.code) {\n                case 1:\n                  code = _ProtectionErrors2.default.MEDIA_KEYERR_UNKNOWN_CODE;\n                  msg += 'MEDIA_KEYERR_UNKNOWN - ' + _ProtectionErrors2.default.MEDIA_KEYERR_UNKNOWN_MESSAGE;\n                  break;\n\n                case 2:\n                  code = _ProtectionErrors2.default.MEDIA_KEYERR_CLIENT_CODE;\n                  msg += 'MEDIA_KEYERR_CLIENT - ' + _ProtectionErrors2.default.MEDIA_KEYERR_CLIENT_MESSAGE;\n                  break;\n\n                case 3:\n                  code = _ProtectionErrors2.default.MEDIA_KEYERR_SERVICE_CODE;\n                  msg += 'MEDIA_KEYERR_SERVICE - ' + _ProtectionErrors2.default.MEDIA_KEYERR_SERVICE_MESSAGE;\n                  break;\n\n                case 4:\n                  code = _ProtectionErrors2.default.MEDIA_KEYERR_OUTPUT_CODE;\n                  msg += 'MEDIA_KEYERR_OUTPUT - ' + _ProtectionErrors2.default.MEDIA_KEYERR_OUTPUT_MESSAGE;\n                  break;\n\n                case 5:\n                  code = _ProtectionErrors2.default.MEDIA_KEYERR_HARDWARECHANGE_CODE;\n                  msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + _ProtectionErrors2.default.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\n                  break;\n\n                case 6:\n                  code = _ProtectionErrors2.default.MEDIA_KEYERR_DOMAIN_CODE;\n                  msg += 'MEDIA_KEYERR_DOMAIN - ' + _ProtectionErrors2.default.MEDIA_KEYERR_DOMAIN_MESSAGE;\n                  break;\n              }\n\n              msg += '  System Code = ' + event.systemCode; // TODO: Build error string based on key error\n\n              eventBus.trigger(events.KEY_ERROR, {\n                data: new _DashJSError2.default(code, msg, sessionToken)\n              });\n            } else {\n              logger.error('No session token found for key error');\n            }\n\n            break;\n\n          case api.keyadded:\n            sessionToken = findSessionByID(sessions, event.sessionId);\n\n            if (!sessionToken) {\n              sessionToken = findSessionByID(pendingSessions, event.sessionId);\n            }\n\n            if (sessionToken) {\n              logger.debug('DRM: Key added.');\n              eventBus.trigger(events.KEY_ADDED, {\n                data: sessionToken\n              }); //TODO not sure anything is using sessionToken? why there?\n            } else {\n              logger.debug('No session token found for key added');\n            }\n\n            break;\n\n          case api.keymessage:\n            // If this CDM does not support session IDs, we will be limited\n            // to a single session\n            moreSessionsAllowed = event.sessionId !== null && event.sessionId !== undefined; // SessionIDs supported\n\n            if (moreSessionsAllowed) {\n              // Attempt to find an uninitialized token with this sessionID\n              sessionToken = findSessionByID(sessions, event.sessionId);\n\n              if (!sessionToken && pendingSessions.length > 0) {\n                // This is the first message for our latest session, so set the\n                // sessionID and add it to our list\n                sessionToken = pendingSessions.shift();\n                sessions.push(sessionToken);\n                sessionToken.sessionID = event.sessionId;\n                eventBus.trigger(events.KEY_SESSION_CREATED, {\n                  data: sessionToken\n                });\n              }\n            } else if (pendingSessions.length > 0) {\n              // SessionIDs not supported\n              sessionToken = pendingSessions.shift();\n              sessions.push(sessionToken);\n\n              if (pendingSessions.length !== 0) {\n                errHandler.error(new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEY_MESSAGE_ERROR_CODE, _ProtectionErrors2.default.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\n              }\n            }\n\n            if (sessionToken) {\n              var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message; // For ClearKey, the spec mandates that you pass this message to the\n              // addKey method, so we always save it to the token since there is no\n              // way to tell which key system is in use\n\n              sessionToken.keyMessage = message;\n              eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {\n                data: new _KeyMessage2.default(sessionToken, message, event.defaultURL)\n              });\n            } else {\n              logger.warn('No session token found for key message');\n            }\n\n            break;\n        }\n      }\n    };\n  }\n  /**\n  * Helper function to retrieve the stored session token based on a given\n  * sessionID value\n  *\n  * @param {Array} sessionArray - the array of sessions to search\n  * @param {*} sessionID - the sessionID to search for\n  * @returns {*} the session token with the given sessionID\n  */\n\n\n  function findSessionByID(sessionArray, sessionID) {\n    if (!sessionID || !sessionArray) {\n      return null;\n    } else {\n      var len = sessionArray.length;\n\n      for (var i = 0; i < len; i++) {\n        if (sessionArray[i].sessionID == sessionID) {\n          return sessionArray[i];\n        }\n      }\n\n      return null;\n    }\n  }\n\n  function removeEventListeners() {\n    videoElement.removeEventListener(api.keyerror, eventHandler);\n    videoElement.removeEventListener(api.needkey, eventHandler);\n    videoElement.removeEventListener(api.keymessage, eventHandler);\n    videoElement.removeEventListener(api.keyadded, eventHandler);\n  }\n\n  instance = {\n    getAllInitData: getAllInitData,\n    requestKeySystemAccess: requestKeySystemAccess,\n    getKeySystem: getKeySystem,\n    selectKeySystem: selectKeySystem,\n    setMediaElement: setMediaElement,\n    createKeySession: createKeySession,\n    updateKeySession: updateKeySession,\n    closeKeySession: closeKeySession,\n    setServerCertificate: setServerCertificate,\n    loadKeySession: loadKeySession,\n    removeKeySession: removeKeySession,\n    stop: reset,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* Initial implementation of EME\n*\n* Implemented by Google Chrome prior to v36\n*\n* @implements ProtectionModel\n* @class\n*/\n\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexports.default = dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b);\n/* jshint ignore:line */","map":{"version":3,"mappings":"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","names":["ProtectionModel_01b","config","context","eventBus","events","debug","api","errHandler","instance","logger","videoElement","keySystem","protectionKeyController","pendingSessions","sessions","moreSessionsAllowed","eventHandler","setup","getLogger","getInstance","createEventHandler","reset","removeEventListeners","i","length","closeKeySession","trigger","TEARDOWN_COMPLETE","getKeySystem","getAllInitData","retVal","push","initData","requestKeySystemAccess","ksConfigurations","ve","document","createElement","found","ksIdx","systemString","ks","configs","supportedAudio","supportedVideo","configIdx","videos","videoCapabilities","videoIdx","canPlayType","contentType","ksConfig","KeySystemConfiguration","getKeySystemBySystemString","KEY_SYSTEM_ACCESS_COMPLETE","data","KeySystemAccess","error","selectKeySystem","keySystemAccess","INTERNAL_KEY_SYSTEM_SELECTED","setMediaElement","mediaElement","addEventListener","keyerror","needkey","keymessage","keyadded","VIDEO_ELEMENT_SELECTED","createKeySession","Error","newSession","sessionID","getSessionID","getExpirationTime","NaN","getSessionType","generateKeyRequest","Uint8Array","updateKeySession","sessionToken","message","isClearKey","addKey","keyPairs","key","keyID","cancelKeyRequest","KEY_SESSION_CLOSED","setServerCertificate","loadKeySession","removeKeySession","handleEvent","event","type","ArrayBuffer","isView","buffer","NEED_KEY","NeedKey","findSessionByID","sessionId","code","ProtectionErrors","MEDIA_KEYERR_CODE","msg","errorCode","MEDIA_KEYERR_UNKNOWN_CODE","MEDIA_KEYERR_UNKNOWN_MESSAGE","MEDIA_KEYERR_CLIENT_CODE","MEDIA_KEYERR_CLIENT_MESSAGE","MEDIA_KEYERR_SERVICE_CODE","MEDIA_KEYERR_SERVICE_MESSAGE","MEDIA_KEYERR_OUTPUT_CODE","MEDIA_KEYERR_OUTPUT_MESSAGE","MEDIA_KEYERR_HARDWARECHANGE_CODE","MEDIA_KEYERR_HARDWARECHANGE_MESSAGE","MEDIA_KEYERR_DOMAIN_CODE","MEDIA_KEYERR_DOMAIN_MESSAGE","systemCode","KEY_ERROR","DashJSError","KEY_ADDED","undefined","shift","KEY_SESSION_CREATED","MEDIA_KEY_MESSAGE_ERROR_CODE","MEDIA_KEY_MESSAGE_ERROR_MESSAGE","keyMessage","INTERNAL_KEY_MESSAGE","KeyMessage","defaultURL","warn","sessionArray","len","removeEventListener","stop","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/protection/models/ProtectionModel_01b.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Initial implementation of EME\n *\n * Implemented by Google Chrome prior to v36\n *\n * @implements ProtectionModel\n * @class\n */\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\nimport ProtectionErrors from '../errors/ProtectionErrors';\n\nfunction ProtectionModel_01b(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n    const errHandler = config.errHandler;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        protectionKeyController,\n\n        // With this version of the EME APIs, sessionIDs are not assigned to\n        // sessions until the first key message is received.  We are assuming\n        // that in the case of multiple sessions, key messages will be received\n        // in the order that generateKeyRequest() is called.\n        // Holding spot for newly-created sessions until we determine whether or\n        // not the CDM supports sessionIDs\n        pendingSessions,\n\n        // List of sessions that have been initialized.  Only the first position will\n        // be used in the case that the CDM does not support sessionIDs\n        sessions,\n\n        // Not all CDMs support the notion of sessionIDs.  Without sessionIDs\n        // there is no way for us to differentiate between sessions, therefore\n        // we must only allow a single session.  Once we receive the first key\n        // message we can set this flag to determine if more sessions are allowed\n        moreSessionsAllowed,\n\n        // This is our main event handler for all desired HTMLMediaElement events\n        // related to EME.  These events are translated into our API-independent\n        // versions of the same events\n        eventHandler;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        pendingSessions = [];\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        if (videoElement) {\n            removeEventListeners();\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            closeKeySession(sessions[i]);\n        }\n        eventBus.trigger(events.TEARDOWN_COMPLETE);\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < pendingSessions.length; i++) {\n            retVal.push(pendingSessions[i].initData);\n        }\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n        let ve = videoElement;\n        if (!ve) { // Must have a video element to do this capability tests\n            ve = document.createElement('video');\n        }\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                //let audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (ve.canPlayType(videos[videoIdx].contentType, systemString) !== '') {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(keySystemAccess) {\n        keySystem = keySystemAccess.keySystem;\n        eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement) {\n            return;\n        }\n\n        // Replacing the previous element\n        if (videoElement) {\n            removeEventListeners();\n\n            // Close any open sessions - avoids memory leak on LG webOS 2016/2017 TVs\n            for (var i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            sessions = [];\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.keyerror, eventHandler);\n            videoElement.addEventListener(api.needkey, eventHandler);\n            videoElement.addEventListener(api.keymessage, eventHandler);\n            videoElement.addEventListener(api.keyadded, eventHandler);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        }\n    }\n\n    function createKeySession(initData /*, protData, keySystemType */) {\n        if (!keySystem) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Determine if creating a new session is allowed\n        if (moreSessionsAllowed || sessions.length === 0) {\n            const newSession = { // Implements SessionToken\n                sessionID: null,\n                initData: initData,\n                getSessionID: function () {\n                    return this.sessionID;\n                },\n\n                getExpirationTime: function () {\n                    return NaN;\n                },\n\n                getSessionType: function () {\n                    return 'temporary';\n                }\n            };\n            pendingSessions.push(newSession);\n\n            // Send our request to the CDM\n            videoElement[api.generateKeyRequest](keySystem.systemString, new Uint8Array(initData));\n\n            return newSession;\n\n        } else {\n            throw new Error('Multiple sessions not allowed!');\n        }\n\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const sessionID = sessionToken.sessionID;\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the CDM\n            videoElement[api.addKey](keySystem.systemString,\n                new Uint8Array(message), new Uint8Array(sessionToken.initData), sessionID);\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            for (let i = 0; i < message.keyPairs.length; i++) {\n                videoElement[api.addKey](keySystem.systemString,\n                    message.keyPairs[i].key, message.keyPairs[i].keyID, sessionID);\n            }\n        }\n    }\n\n    function closeKeySession(sessionToken) {\n        // Send our request to the CDM\n        try {\n            videoElement[api.cancelKeyRequest](keySystem.systemString, sessionToken.sessionID);\n        } catch (error) {\n            eventBus.trigger(events.KEY_SESSION_CLOSED, { data: null, error: 'Error closing session (' + sessionToken.sessionID + ') ' + error.message });\n        }\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                let sessionToken = null;\n                switch (event.type) {\n                    case api.needkey:\n                        let initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                        eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        break;\n\n                    case api.keyerror:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            let code = ProtectionErrors.MEDIA_KEYERR_CODE;\n                            let msg = '';\n                            switch (event.errorCode.code) {\n                                case 1:\n                                    code = ProtectionErrors.MEDIA_KEYERR_UNKNOWN_CODE;\n                                    msg += 'MEDIA_KEYERR_UNKNOWN - ' + ProtectionErrors.MEDIA_KEYERR_UNKNOWN_MESSAGE;\n                                    break;\n                                case 2:\n                                    code = ProtectionErrors.MEDIA_KEYERR_CLIENT_CODE;\n                                    msg += 'MEDIA_KEYERR_CLIENT - ' + ProtectionErrors.MEDIA_KEYERR_CLIENT_MESSAGE;\n                                    break;\n                                case 3:\n                                    code = ProtectionErrors.MEDIA_KEYERR_SERVICE_CODE;\n                                    msg += 'MEDIA_KEYERR_SERVICE - ' + ProtectionErrors.MEDIA_KEYERR_SERVICE_MESSAGE;\n                                    break;\n                                case 4:\n                                    code = ProtectionErrors.MEDIA_KEYERR_OUTPUT_CODE;\n                                    msg += 'MEDIA_KEYERR_OUTPUT - ' + ProtectionErrors.MEDIA_KEYERR_OUTPUT_MESSAGE;\n                                    break;\n                                case 5:\n                                    code = ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_CODE;\n                                    msg += 'MEDIA_KEYERR_HARDWARECHANGE - ' + ProtectionErrors.MEDIA_KEYERR_HARDWARECHANGE_MESSAGE;\n                                    break;\n                                case 6:\n                                    code = ProtectionErrors.MEDIA_KEYERR_DOMAIN_CODE;\n                                    msg += 'MEDIA_KEYERR_DOMAIN - ' + ProtectionErrors.MEDIA_KEYERR_DOMAIN_MESSAGE;\n                                    break;\n                            }\n                            msg += '  System Code = ' + event.systemCode;\n                            // TODO: Build error string based on key error\n                            eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(code, msg, sessionToken) });\n                        } else {\n                            logger.error('No session token found for key error');\n                        }\n                        break;\n\n                    case api.keyadded:\n                        sessionToken = findSessionByID(sessions, event.sessionId);\n                        if (!sessionToken) {\n                            sessionToken = findSessionByID(pendingSessions, event.sessionId);\n                        }\n\n                        if (sessionToken) {\n                            logger.debug('DRM: Key added.');\n                            eventBus.trigger(events.KEY_ADDED, { data: sessionToken });//TODO not sure anything is using sessionToken? why there?\n                        } else {\n                            logger.debug('No session token found for key added');\n                        }\n                        break;\n\n                    case api.keymessage:\n                        // If this CDM does not support session IDs, we will be limited\n                        // to a single session\n                        moreSessionsAllowed = (event.sessionId !== null) && (event.sessionId !== undefined);\n\n                        // SessionIDs supported\n                        if (moreSessionsAllowed) {\n                            // Attempt to find an uninitialized token with this sessionID\n                            sessionToken = findSessionByID(sessions, event.sessionId);\n                            if (!sessionToken && pendingSessions.length > 0) {\n\n                                // This is the first message for our latest session, so set the\n                                // sessionID and add it to our list\n                                sessionToken = pendingSessions.shift();\n                                sessions.push(sessionToken);\n                                sessionToken.sessionID = event.sessionId;\n\n                                eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n                            }\n                        } else if (pendingSessions.length > 0) { // SessionIDs not supported\n                            sessionToken = pendingSessions.shift();\n                            sessions.push(sessionToken);\n\n                            if (pendingSessions.length !== 0) {\n                                errHandler.error(new DashJSError(ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_CODE, ProtectionErrors.MEDIA_KEY_MESSAGE_ERROR_MESSAGE));\n                            }\n                        }\n\n                        if (sessionToken) {\n                            let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n\n                            // For ClearKey, the spec mandates that you pass this message to the\n                            // addKey method, so we always save it to the token since there is no\n                            // way to tell which key system is in use\n                            sessionToken.keyMessage = message;\n                            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(sessionToken, message, event.defaultURL) });\n\n                        } else {\n                            logger.warn('No session token found for key message');\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    /**\n     * Helper function to retrieve the stored session token based on a given\n     * sessionID value\n     *\n     * @param {Array} sessionArray - the array of sessions to search\n     * @param {*} sessionID - the sessionID to search for\n     * @returns {*} the session token with the given sessionID\n     */\n    function findSessionByID(sessionArray, sessionID) {\n        if (!sessionID || !sessionArray) {\n            return null;\n        } else {\n            const len = sessionArray.length;\n            for (let i = 0; i < len; i++) {\n                if (sessionArray[i].sessionID == sessionID) {\n                    return sessionArray[i];\n                }\n            }\n            return null;\n        }\n    }\n\n    function removeEventListeners() {\n        videoElement.removeEventListener(api.keyerror, eventHandler);\n        videoElement.removeEventListener(api.needkey, eventHandler);\n        videoElement.removeEventListener(api.keymessage, eventHandler);\n        videoElement.removeEventListener(api.keyadded, eventHandler);\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_01b.__dashjs_factory_name = 'ProtectionModel_01b';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_01b); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}