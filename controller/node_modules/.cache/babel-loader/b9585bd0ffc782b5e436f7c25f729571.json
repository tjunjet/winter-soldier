{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Constants = require('../../streaming/constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _SegmentsUtils = require('./SegmentsUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ListSegmentsGetter(config, isDynamic) {\n  config = config || {};\n  var timelineConverter = config.timelineConverter;\n  var instance = void 0;\n\n  function checkConfig() {\n    if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n\n  function getSegmentByIndex(representation, index) {\n    checkConfig();\n\n    if (!representation) {\n      return null;\n    }\n\n    var list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\n    var len = list.SegmentURL_asArray.length;\n    var startNumber = representation && !isNaN(representation.startNumber) ? representation.startNumber : 1;\n    var offsetToSubtract = Math.max(startNumber - 1, 0);\n    var relativeIndex = Math.max(index - offsetToSubtract, 0);\n    var segment = null;\n\n    if (relativeIndex < len) {\n      var s = list.SegmentURL_asArray[relativeIndex];\n      segment = (0, _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, index);\n\n      if (segment) {\n        segment.replacementTime = (startNumber + index - 1) * representation.segmentDuration;\n        segment.media = s.media ? s.media : '';\n        segment.mediaRange = s.mediaRange;\n        segment.index = index;\n        segment.indexRange = s.indexRange;\n      }\n    }\n\n    representation.availableSegmentsNumber = len;\n    return segment;\n  }\n\n  function getSegmentByTime(representation, requestedTime) {\n    checkConfig();\n\n    if (!representation) {\n      return null;\n    }\n\n    var duration = representation.segmentDuration;\n\n    if (isNaN(duration)) {\n      return null;\n    }\n\n    var periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\n    var index = Math.floor(periodTime / duration);\n    return getSegmentByIndex(representation, index);\n  }\n\n  instance = {\n    getSegmentByIndex: getSegmentByIndex,\n    getSegmentByTime: getSegmentByTime\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';\n\nvar factory = _FactoryMaker2.default.getClassFactory(ListSegmentsGetter);\n\nexports.default = factory;","map":{"version":3,"mappings":"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","names":["ListSegmentsGetter","config","isDynamic","timelineConverter","instance","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getSegmentByIndex","representation","index","list","adaptation","period","mpd","manifest","Period_asArray","AdaptationSet_asArray","Representation_asArray","SegmentList","len","SegmentURL_asArray","length","startNumber","isNaN","offsetToSubtract","Math","max","relativeIndex","segment","s","replacementTime","segmentDuration","media","mediaRange","indexRange","availableSegmentsNumber","getSegmentByTime","requestedTime","duration","periodTime","calcPeriodRelativeTimeFromMpdRelativeTime","floor","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/dash/utils/ListSegmentsGetter.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../../streaming/constants/Constants';\n\nimport {getIndexBasedSegment} from './SegmentsUtils';\n\nfunction ListSegmentsGetter(config, isDynamic) {\n\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSegmentByIndex(representation, index) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const list = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentList;\n        const len = list.SegmentURL_asArray.length;\n\n        const startNumber = representation && !isNaN(representation.startNumber) ? representation.startNumber : 1;\n        const offsetToSubtract = Math.max(startNumber - 1, 0);\n\n        const relativeIndex = Math.max(index - offsetToSubtract, 0);\n\n        let segment = null;\n        if (relativeIndex < len) {\n            const s = list.SegmentURL_asArray[relativeIndex];\n\n            segment = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\n            if (segment) {\n                segment.replacementTime = (startNumber + index - 1) * representation.segmentDuration;\n                segment.media = s.media ? s.media : '';\n                segment.mediaRange = s.mediaRange;\n                segment.index = index;\n                segment.indexRange = s.indexRange;\n            }\n        }\n\n        representation.availableSegmentsNumber = len;\n\n        return segment;\n    }\n\n    function getSegmentByTime(representation, requestedTime) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const duration = representation.segmentDuration;\n\n        if (isNaN(duration)) {\n            return null;\n        }\n\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\n        const index = Math.floor(periodTime / duration);\n\n        return getSegmentByIndex(representation, index);\n    }\n\n    instance = {\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    return instance;\n}\n\nListSegmentsGetter.__dashjs_factory_name = 'ListSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(ListSegmentsGetter);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}