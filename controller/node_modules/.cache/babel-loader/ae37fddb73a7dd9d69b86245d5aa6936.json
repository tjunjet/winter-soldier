{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _BufferLevelHandler = require('./handlers/BufferLevelHandler');\n\nvar _BufferLevelHandler2 = _interopRequireDefault(_BufferLevelHandler);\n\nvar _DVBErrorsHandler = require('./handlers/DVBErrorsHandler');\n\nvar _DVBErrorsHandler2 = _interopRequireDefault(_DVBErrorsHandler);\n\nvar _HttpListHandler = require('./handlers/HttpListHandler');\n\nvar _HttpListHandler2 = _interopRequireDefault(_HttpListHandler);\n\nvar _GenericMetricHandler = require('./handlers/GenericMetricHandler');\n\nvar _GenericMetricHandler2 = _interopRequireDefault(_GenericMetricHandler);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction MetricsHandlerFactory(config) {\n  config = config || {};\n  var instance = void 0;\n  var logger = config.debug ? config.debug.getLogger(instance) : {}; // group 1: key, [group 3: n [, group 5: type]]\n\n  var keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\n  var context = this.context;\n  var knownFactoryProducts = {\n    BufferLevel: _BufferLevelHandler2.default,\n    DVBErrors: _DVBErrorsHandler2.default,\n    HttpList: _HttpListHandler2.default,\n    PlayList: _GenericMetricHandler2.default,\n    RepSwitchList: _GenericMetricHandler2.default,\n    TcpList: _GenericMetricHandler2.default\n  };\n\n  function create(listType, reportingController) {\n    var matches = listType.match(keyRegex);\n    var handler;\n\n    if (!matches) {\n      return;\n    }\n\n    try {\n      handler = knownFactoryProducts[matches[1]](context).create({\n        eventBus: config.eventBus,\n        metricsConstants: config.metricsConstants\n      });\n      handler.initialize(matches[1], reportingController, matches[3], matches[5]);\n    } catch (e) {\n      handler = null;\n      logger.error('MetricsHandlerFactory: Could not create handler for type ' + matches[1] + ' with args ' + matches[3] + ', ' + matches[5] + ' (' + e.message + ')');\n    }\n\n    return handler;\n  }\n\n  function register(key, handler) {\n    knownFactoryProducts[key] = handler;\n  }\n\n  function unregister(key) {\n    delete knownFactoryProducts[key];\n  }\n\n  instance = {\n    create: create,\n    register: register,\n    unregister: unregister\n  };\n  return instance;\n}\n\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory);\n/* jshint ignore:line */","map":{"version":3,"mappings":";;;;;;AA+BA;;;;AACA;;;;AACA;;;;AACA;;;;;;;;AAlCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoCA,SAASA,qBAAT,CAA+BC,MAA/B,EAAuC;EAEnCA,SAASA,UAAU,EAAnBA;EACA,IAAIC,iBAAJ;EACA,IAAMC,SAASF,OAAOG,KAAPH,GAAeA,OAAOG,KAAPH,CAAaI,SAAbJ,CAAuBC,QAAvBD,CAAfA,GAAkD,EAAjE,CAJmC,CAMnC;;EACA,IAAIK,WAAW,+CAAf;EAEA,IAAMC,UAAU,KAAKA,OAArB;EACA,IAAIC,uBAAuB;IACvBC,aAAgBA,4BADO;IAEvBC,WAAgBA,0BAFO;IAGvBC,UAAgBA,yBAHO;IAIvBC,UAAgBC,8BAJO;IAKvBC,eAAgBD,8BALO;IAMvBE,SAAgBF;EANO,CAA3B;;EASA,SAASG,MAAT,CAAgBC,QAAhB,EAA0BC,mBAA1B,EAA+C;IAC3C,IAAIC,UAAUF,SAASG,KAATH,CAAeX,QAAfW,CAAd;IACA,IAAII,OAAJ;;IAEA,IAAI,CAACF,OAAL,EAAc;MACV;IAGJ;;IAAA,IAAI;MACAE,UAAUb,qBAAqBW,QAAQ,CAARA,CAArBX,EAAiCD,OAAjCC,EAA0CQ,MAA1CR,CAAiD;QACvDc,UAAUrB,OAAOqB,QADsC;QAEvDC,kBAAkBtB,OAAOsB;MAF8B,CAAjDf,CAAVa;MAKAA,QAAQG,UAARH,CACIF,QAAQ,CAARA,CADJE,EAEIH,mBAFJG,EAGIF,QAAQ,CAARA,CAHJE,EAIIF,QAAQ,CAARA,CAJJE;IAMF,CAZF,CAYE,OAAOI,CAAP,EAAU;MACRJ,UAAU,IAAVA;MACAlB,OAAOuB,KAAPvB,+DAAyEgB,QAAQ,CAARA,CAAzE,mBAAiGA,QAAQ,CAARA,CAAjG,UAAgHA,QAAQ,CAARA,CAAhH,UAA+HM,EAAEE,OAAjI;IAGJ;;IAAA,OAAON,OAAP;EAGJ;;EAAA,SAASO,QAAT,CAAkBC,GAAlB,EAAuBR,OAAvB,EAAgC;IAC5Bb,qBAAqBqB,GAArBrB,IAA4Ba,OAA5Bb;EAGJ;;EAAA,SAASsB,UAAT,CAAoBD,GAApB,EAAyB;IACrB,OAAOrB,qBAAqBqB,GAArBrB,CAAP;EAGJN;;EAAAA,WAAW;IACPc,QAAYA,MADL;IAEPY,UAAYA,QAFL;IAGPE,YAAYA;EAHL,CAAX5B;EAMA,OAAOA,QAAP;AAGJF;;AAAAA,sBAAsB+B,qBAAtB/B,GAA8C,uBAA9CA;kBACegC,OAAOC,YAAPD,CAAoBE,mBAApBF,CAAwChC,qBAAxCgC,C;AAAgE","names":["MetricsHandlerFactory","config","instance","logger","debug","getLogger","keyRegex","context","knownFactoryProducts","BufferLevel","DVBErrors","HttpList","PlayList","GenericMetricHandler","RepSwitchList","TcpList","create","listType","reportingController","matches","match","handler","eventBus","metricsConstants","initialize","e","error","message","register","key","unregister","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/metrics/MetricsHandlerFactory.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport BufferLevel from './handlers/BufferLevelHandler';\nimport DVBErrors from './handlers/DVBErrorsHandler';\nimport HttpList from './handlers/HttpListHandler';\nimport GenericMetricHandler from './handlers/GenericMetricHandler';\n\nfunction MetricsHandlerFactory(config) {\n\n    config = config || {};\n    let instance;\n    const logger = config.debug ? config.debug.getLogger(instance) : {};\n\n    // group 1: key, [group 3: n [, group 5: type]]\n    let keyRegex = /([a-zA-Z]*)(\\(([0-9]*)(\\,\\s*([a-zA-Z]*))?\\))?/;\n\n    const context = this.context;\n    let knownFactoryProducts = {\n        BufferLevel:    BufferLevel,\n        DVBErrors:      DVBErrors,\n        HttpList:       HttpList,\n        PlayList:       GenericMetricHandler,\n        RepSwitchList:  GenericMetricHandler,\n        TcpList:        GenericMetricHandler\n    };\n\n    function create(listType, reportingController) {\n        var matches = listType.match(keyRegex);\n        var handler;\n\n        if (!matches) {\n            return;\n        }\n\n        try {\n            handler = knownFactoryProducts[matches[1]](context).create({\n                eventBus: config.eventBus,\n                metricsConstants: config.metricsConstants\n            });\n\n            handler.initialize(\n                matches[1],\n                reportingController,\n                matches[3],\n                matches[5]\n            );\n        } catch (e) {\n            handler = null;\n            logger.error(`MetricsHandlerFactory: Could not create handler for type ${matches[1]} with args ${matches[3]}, ${matches[5]} (${e.message})`);\n        }\n\n        return handler;\n    }\n\n    function register(key, handler) {\n        knownFactoryProducts[key] = handler;\n    }\n\n    function unregister(key) {\n        delete knownFactoryProducts[key];\n    }\n\n    instance = {\n        create:     create,\n        register:   register,\n        unregister: unregister\n    };\n\n    return instance;\n}\n\nMetricsHandlerFactory.__dashjs_factory_name = 'MetricsHandlerFactory';\nexport default dashjs.FactoryMaker.getSingletonFactory(MetricsHandlerFactory); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}