{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* Constants declaration\n* @class\n* @ignore\n* @hideconstructor\n*/\n\n\nvar Constants = function () {\n  _createClass(Constants, [{\n    key: 'init',\n    value: function init() {\n      /**\n      *  @constant {string} STREAM Stream media type. Mainly used to report metrics relative to the full stream\n      *  @memberof Constants#\n      *  @static\n      */\n      this.STREAM = 'stream';\n      /**\n      *  @constant {string} VIDEO Video media type\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.VIDEO = 'video';\n      /**\n      *  @constant {string} AUDIO Audio media type\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.AUDIO = 'audio';\n      /**\n      *  @constant {string} TEXT Text media type\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.TEXT = 'text';\n      /**\n      *  @constant {string} FRAGMENTED_TEXT Fragmented text media type\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.FRAGMENTED_TEXT = 'fragmentedText';\n      /**\n      *  @constant {string} EMBEDDED_TEXT Embedded text media type\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.EMBEDDED_TEXT = 'embeddedText';\n      /**\n      *  @constant {string} MUXED Muxed (video/audio in the same chunk) media type\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.MUXED = 'muxed';\n      /**\n      *  @constant {string} IMAGE Image media type\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.IMAGE = 'image';\n      /**\n      *  @constant {string} STPP STTP Subtitles format\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.STPP = 'stpp';\n      /**\n      *  @constant {string} TTML STTP Subtitles format\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.TTML = 'ttml';\n      /**\n      *  @constant {string} VTT STTP Subtitles format\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.VTT = 'vtt';\n      /**\n      *  @constant {string} WVTT STTP Subtitles format\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.WVTT = 'wvtt';\n      /**\n      *  @constant {string} ABR_STRATEGY_DYNAMIC Dynamic Adaptive bitrate algorithm\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\n      /**\n      *  @constant {string} ABR_STRATEGY_BOLA Adaptive bitrate algorithm based on Bola (buffer level)\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.ABR_STRATEGY_BOLA = 'abrBola';\n      /**\n      *  @constant {string} ABR_STRATEGY_L2A Adaptive bitrate algorithm based on L2A (online learning)\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.ABR_STRATEGY_L2A = 'abrL2A';\n      /**\n      *  @constant {string} ABR_STRATEGY_LoLP Adaptive bitrate algorithm based on LoL+\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.ABR_STRATEGY_LoLP = 'abrLoLP';\n      /**\n      *  @constant {string} ABR_STRATEGY_THROUGHPUT Adaptive bitrate algorithm based on throughput\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\n      /**\n      *  @constant {string} ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA Throughput calculation based on downloaded data array\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA = 'abrFetchThroughputCalculationDownloadedData';\n      /**\n      *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING Throughput calculation based on moof parsing\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING = 'abrFetchThroughputCalculationMoofParsing';\n      /**\n      *  @constant {string} LIVE_CATCHUP_MODE_DEFAULT Throughput calculation based on moof parsing\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.LIVE_CATCHUP_MODE_DEFAULT = 'liveCatchupModeDefault';\n      /**\n      *  @constant {string} LIVE_CATCHUP_MODE_LOLP Throughput calculation based on moof parsing\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.LIVE_CATCHUP_MODE_LOLP = 'liveCatchupModeLoLP';\n      /**\n      *  @constant {string} MOVING_AVERAGE_SLIDING_WINDOW Moving average sliding window\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\n      /**\n      *  @constant {string} EWMA Exponential moving average\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.MOVING_AVERAGE_EWMA = 'ewma';\n      /**\n      *  @constant {string} BAD_ARGUMENT_ERROR Invalid Arguments type of error\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\n      /**\n      *  @constant {string} MISSING_CONFIG_ERROR Missing configuration parameters type of error\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\n      /**\n      *  @constant {string} TRACK_SWITCH_MODE_ALWAYS_REPLACE used to clear the buffered data (prior to current playback position) after track switch. Default for audio\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\n      /**\n      *  @constant {string} TRACK_SWITCH_MODE_NEVER_REPLACE used to forbid clearing the buffered data (prior to current playback position) after track switch. Defers to fastSwitchEnabled for placement of new data. Default for video\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\n      /**\n      *  @constant {string} TRACK_SELECTION_MODE_FIRST_TRACK makes the player select the first track found in the manifest.\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.TRACK_SELECTION_MODE_FIRST_TRACK = 'firstTrack';\n      /**\n      *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_BITRATE makes the player select the track with a highest bitrate. This mode is a default mode.\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\n      /**\n      *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY makes the player select the track with the lowest bitrate per pixel average.\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY = 'highestEfficiency';\n      /**\n      *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE makes the player select the track with a widest range of bitrates.\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\n      /**\n      *  @constant {string} CMCD_MODE_QUERY specifies to attach CMCD metrics as query parameters.\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.CMCD_MODE_QUERY = 'query';\n      /**\n      *  @constant {string} CMCD_MODE_HEADER specifies to attach CMCD metrics as HTTP headers.\n      *  @memberof Constants#\n      *  @static\n      */\n\n      this.CMCD_MODE_HEADER = 'header';\n      this.LOCATION = 'Location';\n      this.INITIALIZE = 'initialize';\n      this.TEXT_SHOWING = 'showing';\n      this.TEXT_HIDDEN = 'hidden';\n      this.CC1 = 'CC1';\n      this.CC3 = 'CC3';\n      this.UTF8 = 'utf-8';\n      this.SCHEME_ID_URI = 'schemeIdUri';\n      this.START_TIME = 'starttime';\n      this.SERVICE_DESCRIPTION_LL_SCHEME = 'urn:dvb:dash:lowlatency:scope:2019';\n      this.SUPPLEMENTAL_PROPERTY_LL_SCHEME = 'urn:dvb:dash:lowlatency:critical:2019';\n      this.XML = 'XML';\n      this.ARRAY_BUFFER = 'ArrayBuffer';\n      this.DVB_REPORTING_URL = 'dvb:reportingUrl';\n      this.DVB_PROBABILITY = 'dvb:probability';\n    }\n  }]);\n\n  function Constants() {\n    _classCallCheck(this, Constants);\n\n    this.init();\n  }\n\n  return Constants;\n}();\n\nvar constants = new Constants();\nexports.default = constants;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;IAMMA,S;;;2BAEK;MACH;;;;;MAKA,KAAKC,MAAL,GAAc,QAAd;MAEA;;;;;;MAKA,KAAKC,KAAL,GAAa,OAAb;MAEA;;;;;;MAKA,KAAKC,KAAL,GAAa,OAAb;MAEA;;;;;;MAKA,KAAKC,IAAL,GAAY,MAAZ;MAEA;;;;;;MAKA,KAAKC,eAAL,GAAuB,gBAAvB;MAEA;;;;;;MAKA,KAAKC,aAAL,GAAqB,cAArB;MAEA;;;;;;MAKA,KAAKC,KAAL,GAAa,OAAb;MAEA;;;;;;MAKA,KAAKC,KAAL,GAAa,OAAb;MAEA;;;;;;MAKA,KAAKC,IAAL,GAAY,MAAZ;MAEA;;;;;;MAKA,KAAKC,IAAL,GAAY,MAAZ;MAEA;;;;;;MAKA,KAAKC,GAAL,GAAW,KAAX;MAEA;;;;;;MAKA,KAAKC,IAAL,GAAY,MAAZ;MAEA;;;;;;MAKA,KAAKC,oBAAL,GAA4B,YAA5B;MAEA;;;;;;MAKA,KAAKC,iBAAL,GAAyB,SAAzB;MAEA;;;;;;MAKA,KAAKC,gBAAL,GAAwB,QAAxB;MAEA;;;;;;MAKA,KAAKC,iBAAL,GAAyB,SAAzB;MAEA;;;;;;MAKA,KAAKC,uBAAL,GAA+B,eAA/B;MAEA;;;;;;MAKA,KAAKC,gDAAL,GAAwD,6CAAxD;MAEA;;;;;;MAKA,KAAKC,6CAAL,GAAqD,0CAArD;MAEA;;;;;;MAKA,KAAKC,yBAAL,GAAiC,wBAAjC;MAEA;;;;;;MAKA,KAAKC,sBAAL,GAA8B,qBAA9B;MAEA;;;;;;MAKA,KAAKC,6BAAL,GAAqC,eAArC;MAEA;;;;;;MAKA,KAAKC,mBAAL,GAA2B,MAA3B;MAEA;;;;;;MAKA,KAAKC,kBAAL,GAA0B,mBAA1B;MAEA;;;;;;MAKA,KAAKC,oBAAL,GAA4B,6BAA5B;MAEA;;;;;;MAKA,KAAKC,gCAAL,GAAwC,eAAxC;MAEA;;;;;;MAKA,KAAKC,+BAAL,GAAuC,cAAvC;MAEA;;;;;;MAKA,KAAKC,gCAAL,GAAwC,YAAxC;MAEA;;;;;;MAKA,KAAKC,oCAAL,GAA4C,gBAA5C;MAEA;;;;;;MAKA,KAAKC,uCAAL,GAA+C,mBAA/C;MAEA;;;;;;MAKA,KAAKC,iCAAL,GAAyC,aAAzC;MAEA;;;;;;MAKA,KAAKC,eAAL,GAAuB,OAAvB;MAEA;;;;;;MAKA,KAAKC,gBAAL,GAAwB,QAAxB;MAGA,KAAKC,QAAL,GAAgB,UAAhB;MACA,KAAKC,UAAL,GAAkB,YAAlB;MACA,KAAKC,YAAL,GAAoB,SAApB;MACA,KAAKC,WAAL,GAAmB,QAAnB;MACA,KAAKC,GAAL,GAAW,KAAX;MACA,KAAKC,GAAL,GAAW,KAAX;MACA,KAAKC,IAAL,GAAY,OAAZ;MACA,KAAKC,aAAL,GAAqB,aAArB;MACA,KAAKC,UAAL,GAAkB,WAAlB;MACA,KAAKC,6BAAL,GAAqC,oCAArC;MACA,KAAKC,+BAAL,GAAuC,uCAAvC;MACA,KAAKC,GAAL,GAAW,KAAX;MACA,KAAKC,YAAL,GAAoB,aAApB;MACA,KAAKC,iBAAL,GAAyB,kBAAzB;MACA,KAAKC,eAAL,GAAuB,iBAAvB;;;;EAGJ,qBAAc;IAAAC;;IACV,KAAKC,IAAL;;;;;;AAIR,IAAMC,YAAY,IAAInD,SAAJ,EAAlB;kBACemD,S","names":["Constants","STREAM","VIDEO","AUDIO","TEXT","FRAGMENTED_TEXT","EMBEDDED_TEXT","MUXED","IMAGE","STPP","TTML","VTT","WVTT","ABR_STRATEGY_DYNAMIC","ABR_STRATEGY_BOLA","ABR_STRATEGY_L2A","ABR_STRATEGY_LoLP","ABR_STRATEGY_THROUGHPUT","ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA","ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING","LIVE_CATCHUP_MODE_DEFAULT","LIVE_CATCHUP_MODE_LOLP","MOVING_AVERAGE_SLIDING_WINDOW","MOVING_AVERAGE_EWMA","BAD_ARGUMENT_ERROR","MISSING_CONFIG_ERROR","TRACK_SWITCH_MODE_ALWAYS_REPLACE","TRACK_SWITCH_MODE_NEVER_REPLACE","TRACK_SELECTION_MODE_FIRST_TRACK","TRACK_SELECTION_MODE_HIGHEST_BITRATE","TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY","TRACK_SELECTION_MODE_WIDEST_RANGE","CMCD_MODE_QUERY","CMCD_MODE_HEADER","LOCATION","INITIALIZE","TEXT_SHOWING","TEXT_HIDDEN","CC1","CC3","UTF8","SCHEME_ID_URI","START_TIME","SERVICE_DESCRIPTION_LL_SCHEME","SUPPLEMENTAL_PROPERTY_LL_SCHEME","XML","ARRAY_BUFFER","DVB_REPORTING_URL","DVB_PROBABILITY","_classCallCheck","init","constants"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/constants/Constants.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Constants declaration\n * @class\n * @ignore\n * @hideconstructor\n */\nclass Constants {\n\n    init() {\n        /**\n         *  @constant {string} STREAM Stream media type. Mainly used to report metrics relative to the full stream\n         *  @memberof Constants#\n         *  @static\n         */\n        this.STREAM = 'stream';\n\n        /**\n         *  @constant {string} VIDEO Video media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.VIDEO = 'video';\n\n        /**\n         *  @constant {string} AUDIO Audio media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.AUDIO = 'audio';\n\n        /**\n         *  @constant {string} TEXT Text media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TEXT = 'text';\n\n        /**\n         *  @constant {string} FRAGMENTED_TEXT Fragmented text media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.FRAGMENTED_TEXT = 'fragmentedText';\n\n        /**\n         *  @constant {string} EMBEDDED_TEXT Embedded text media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.EMBEDDED_TEXT = 'embeddedText';\n\n        /**\n         *  @constant {string} MUXED Muxed (video/audio in the same chunk) media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MUXED = 'muxed';\n\n        /**\n         *  @constant {string} IMAGE Image media type\n         *  @memberof Constants#\n         *  @static\n         */\n        this.IMAGE = 'image';\n\n        /**\n         *  @constant {string} STPP STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.STPP = 'stpp';\n\n        /**\n         *  @constant {string} TTML STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TTML = 'ttml';\n\n        /**\n         *  @constant {string} VTT STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.VTT = 'vtt';\n\n        /**\n         *  @constant {string} WVTT STTP Subtitles format\n         *  @memberof Constants#\n         *  @static\n         */\n        this.WVTT = 'wvtt';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_DYNAMIC Dynamic Adaptive bitrate algorithm\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_DYNAMIC = 'abrDynamic';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_BOLA Adaptive bitrate algorithm based on Bola (buffer level)\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_BOLA = 'abrBola';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_L2A Adaptive bitrate algorithm based on L2A (online learning)\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_L2A = 'abrL2A';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_LoLP Adaptive bitrate algorithm based on LoL+\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_LoLP = 'abrLoLP';\n\n        /**\n         *  @constant {string} ABR_STRATEGY_THROUGHPUT Adaptive bitrate algorithm based on throughput\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_STRATEGY_THROUGHPUT = 'abrThroughput';\n\n        /**\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALUCUALTION_DOWNLOADED_DATA Throughput calculation based on downloaded data array\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_DOWNLOADED_DATA = 'abrFetchThroughputCalculationDownloadedData';\n\n        /**\n         *  @constant {string} ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING Throughput calculation based on moof parsing\n         *  @memberof Constants#\n         *  @static\n         */\n        this.ABR_FETCH_THROUGHPUT_CALCULATION_MOOF_PARSING = 'abrFetchThroughputCalculationMoofParsing';\n\n        /**\n         *  @constant {string} LIVE_CATCHUP_MODE_DEFAULT Throughput calculation based on moof parsing\n         *  @memberof Constants#\n         *  @static\n         */\n        this.LIVE_CATCHUP_MODE_DEFAULT = 'liveCatchupModeDefault';\n\n        /**\n         *  @constant {string} LIVE_CATCHUP_MODE_LOLP Throughput calculation based on moof parsing\n         *  @memberof Constants#\n         *  @static\n         */\n        this.LIVE_CATCHUP_MODE_LOLP = 'liveCatchupModeLoLP';\n\n        /**\n         *  @constant {string} MOVING_AVERAGE_SLIDING_WINDOW Moving average sliding window\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MOVING_AVERAGE_SLIDING_WINDOW = 'slidingWindow';\n\n        /**\n         *  @constant {string} EWMA Exponential moving average\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MOVING_AVERAGE_EWMA = 'ewma';\n\n        /**\n         *  @constant {string} BAD_ARGUMENT_ERROR Invalid Arguments type of error\n         *  @memberof Constants#\n         *  @static\n         */\n        this.BAD_ARGUMENT_ERROR = 'Invalid Arguments';\n\n        /**\n         *  @constant {string} MISSING_CONFIG_ERROR Missing configuration parameters type of error\n         *  @memberof Constants#\n         *  @static\n         */\n        this.MISSING_CONFIG_ERROR = 'Missing config parameter(s)';\n\n        /**\n         *  @constant {string} TRACK_SWITCH_MODE_ALWAYS_REPLACE used to clear the buffered data (prior to current playback position) after track switch. Default for audio\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SWITCH_MODE_ALWAYS_REPLACE = 'alwaysReplace';\n\n        /**\n         *  @constant {string} TRACK_SWITCH_MODE_NEVER_REPLACE used to forbid clearing the buffered data (prior to current playback position) after track switch. Defers to fastSwitchEnabled for placement of new data. Default for video\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SWITCH_MODE_NEVER_REPLACE = 'neverReplace';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_FIRST_TRACK makes the player select the first track found in the manifest.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_FIRST_TRACK = 'firstTrack';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_BITRATE makes the player select the track with a highest bitrate. This mode is a default mode.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_HIGHEST_BITRATE = 'highestBitrate';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY makes the player select the track with the lowest bitrate per pixel average.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_HIGHEST_EFFICIENCY = 'highestEfficiency';\n\n        /**\n         *  @constant {string} TRACK_SELECTION_MODE_WIDEST_RANGE makes the player select the track with a widest range of bitrates.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.TRACK_SELECTION_MODE_WIDEST_RANGE = 'widestRange';\n\n        /**\n         *  @constant {string} CMCD_MODE_QUERY specifies to attach CMCD metrics as query parameters.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.CMCD_MODE_QUERY = 'query';\n\n        /**\n         *  @constant {string} CMCD_MODE_HEADER specifies to attach CMCD metrics as HTTP headers.\n         *  @memberof Constants#\n         *  @static\n         */\n        this.CMCD_MODE_HEADER = 'header';\n\n\n        this.LOCATION = 'Location';\n        this.INITIALIZE = 'initialize';\n        this.TEXT_SHOWING = 'showing';\n        this.TEXT_HIDDEN = 'hidden';\n        this.CC1 = 'CC1';\n        this.CC3 = 'CC3';\n        this.UTF8 = 'utf-8';\n        this.SCHEME_ID_URI = 'schemeIdUri';\n        this.START_TIME = 'starttime';\n        this.SERVICE_DESCRIPTION_LL_SCHEME = 'urn:dvb:dash:lowlatency:scope:2019';\n        this.SUPPLEMENTAL_PROPERTY_LL_SCHEME = 'urn:dvb:dash:lowlatency:critical:2019';\n        this.XML = 'XML';\n        this.ARRAY_BUFFER = 'ArrayBuffer';\n        this.DVB_REPORTING_URL = 'dvb:reportingUrl';\n        this.DVB_PROBABILITY = 'dvb:probability';\n    }\n\n    constructor() {\n        this.init();\n    }\n}\n\nconst constants = new Constants();\nexport default constants;\n"]},"metadata":{},"sourceType":"script"}