{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _HandlerHelpers = require('../../utils/HandlerHelpers');\n\nvar _HandlerHelpers2 = _interopRequireDefault(_HandlerHelpers);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction HttpListHandler(config) {\n  config = config || {};\n  var instance = void 0,\n      reportingController = void 0,\n      n = void 0,\n      type = void 0,\n      name = void 0,\n      interval = void 0;\n  var storedVos = [];\n  var handlerHelpers = (0, _HandlerHelpers2.default)(this.context).getInstance();\n  var metricsConstants = config.metricsConstants;\n\n  function intervalCallback() {\n    var vos = storedVos;\n\n    if (vos.length) {\n      if (reportingController) {\n        reportingController.report(name, vos);\n      }\n    }\n\n    storedVos = [];\n  }\n\n  function initialize(basename, rc, n_ms, requestType) {\n    if (rc) {\n      // this will throw if n is invalid, to be\n      // caught by the initialize caller.\n      n = handlerHelpers.validateN(n_ms);\n      reportingController = rc;\n\n      if (requestType && requestType.length) {\n        type = requestType;\n      }\n\n      name = handlerHelpers.reconstructFullMetricName(basename, n_ms, requestType);\n      interval = setInterval(intervalCallback, n);\n    }\n  }\n\n  function reset() {\n    clearInterval(interval);\n    interval = null;\n    n = null;\n    type = null;\n    storedVos = [];\n    reportingController = null;\n  }\n\n  function handleNewMetric(metric, vo) {\n    if (metric === metricsConstants.HTTP_REQUEST) {\n      if (!type || type === vo.type) {\n        storedVos.push(vo);\n      }\n    }\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset,\n    handleNewMetric: handleNewMetric\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\nexports.default = dashjs.FactoryMaker.getClassFactory(HttpListHandler);\n/* jshint ignore:line */","map":{"version":3,"mappings":";;;;;;AA+BA;;;;;;;;AAEA;;AAAA,SAASA,eAAT,CAAyBC,MAAzB,EAAiC;EAE7BA,SAASA,UAAU,EAAnBA;EACA,IAAIC,iBAAJ;EAAA,IACIC,4BADJ;EAAA,IAEIC,UAFJ;EAAA,IAGIC,aAHJ;EAAA,IAIIC,aAJJ;EAAA,IAKIC,iBALJ;EAOA,IAAIC,YAAY,EAAhB;EAEA,IAAIC,iBAAiB,8BAAe,KAAKC,OAApB,EAA6BC,WAA7B,EAArB;EAEA,IAAMC,mBAAmBX,OAAOW,gBAAhC;;EAEA,SAASC,gBAAT,GAA4B;IACxB,IAAIC,MAAMN,SAAV;;IAEA,IAAIM,IAAIC,MAAR,EAAgB;MACZ,IAAIZ,mBAAJ,EAAyB;QACrBA,oBAAoBa,MAApBb,CAA2BG,IAA3BH,EAAiCW,GAAjCX;MAEP;IAEDK;;IAAAA,YAAY,EAAZA;EAGJ;;EAAA,SAASS,UAAT,CAAoBC,QAApB,EAA8BC,EAA9B,EAAkCC,IAAlC,EAAwCC,WAAxC,EAAqD;IACjD,IAAIF,EAAJ,EAAQ;MAEJ;MACA;MACAf,IAAIK,eAAea,SAAfb,CAAyBW,IAAzBX,CAAJL;MAEAD,sBAAsBgB,EAAtBhB;;MAEA,IAAIkB,eAAeA,YAAYN,MAA/B,EAAuC;QACnCV,OAAOgB,WAAPhB;MAGJC;;MAAAA,OAAOG,eAAec,yBAAfd,CACHS,QADGT,EAEHW,IAFGX,EAGHY,WAHGZ,CAAPH;MAMAC,WAAWiB,YAAYX,gBAAZW,EAA8BpB,CAA9BoB,CAAXjB;IAEP;EAED;;EAAA,SAASkB,KAAT,GAAiB;IACbC,cAAcnB,QAAdmB;IACAnB,WAAW,IAAXA;IACAH,IAAI,IAAJA;IACAC,OAAO,IAAPA;IACAG,YAAY,EAAZA;IACAL,sBAAsB,IAAtBA;EAGJ;;EAAA,SAASwB,eAAT,CAAyBC,MAAzB,EAAiCC,EAAjC,EAAqC;IACjC,IAAID,WAAWhB,iBAAiBkB,YAAhC,EAA8C;MAC1C,IAAI,CAACzB,IAAD,IAAUA,SAASwB,GAAGxB,IAA1B,EAAiC;QAC7BG,UAAUuB,IAAVvB,CAAeqB,EAAfrB;MAEP;IACJ;EAEDN;;EAAAA,WAAW;IACPe,YAAoBA,UADb;IAEPQ,OAAoBA,KAFb;IAGPE,iBAAoBA;EAHb,CAAXzB;EAMA,OAAOA,QAAP;AA3GJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8GAF,gBAAgBgC,qBAAhBhC,GAAwC,iBAAxCA;kBACeiC,OAAOC,YAAPD,CAAoBE,eAApBF,CAAoCjC,eAApCiC,C;AAAsD","names":["HttpListHandler","config","instance","reportingController","n","type","name","interval","storedVos","handlerHelpers","context","getInstance","metricsConstants","intervalCallback","vos","length","report","initialize","basename","rc","n_ms","requestType","validateN","reconstructFullMetricName","setInterval","reset","clearInterval","handleNewMetric","metric","vo","HTTP_REQUEST","push","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/metrics/handlers/HttpListHandler.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction HttpListHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        type,\n        name,\n        interval;\n\n    let storedVos = [];\n\n    let handlerHelpers = HandlerHelpers(this.context).getInstance();\n\n    const metricsConstants = config.metricsConstants;\n\n    function intervalCallback() {\n        var vos = storedVos;\n\n        if (vos.length) {\n            if (reportingController) {\n                reportingController.report(name, vos);\n            }\n        }\n\n        storedVos = [];\n    }\n\n    function initialize(basename, rc, n_ms, requestType) {\n        if (rc) {\n\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n\n            reportingController = rc;\n\n            if (requestType && requestType.length) {\n                type = requestType;\n            }\n\n            name = handlerHelpers.reconstructFullMetricName(\n                basename,\n                n_ms,\n                requestType\n            );\n\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = null;\n        type = null;\n        storedVos = [];\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        if (metric === metricsConstants.HTTP_REQUEST) {\n            if (!type || (type === vo.type)) {\n                storedVos.push(vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nHttpListHandler.__dashjs_factory_name = 'HttpListHandler';\nexport default dashjs.FactoryMaker.getClassFactory(HttpListHandler); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}