{"ast":null,"code":";\n\n(function (sax) {\n  // wrapper for non-node envs\n  sax.parser = function (strict, opt) {\n    return new SAXParser(strict, opt);\n  };\n\n  sax.SAXParser = SAXParser;\n  sax.SAXStream = SAXStream;\n  sax.createStream = createStream; // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n\n  sax.MAX_BUFFER_LENGTH = 64 * 1024;\n  var buffers = ['comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype', 'procInstName', 'procInstBody', 'entity', 'attribName', 'attribValue', 'cdata', 'script'];\n  sax.EVENTS = ['text', 'processinginstruction', 'sgmldeclaration', 'doctype', 'comment', 'opentagstart', 'attribute', 'opentag', 'closetag', 'opencdata', 'cdata', 'closecdata', 'error', 'end', 'ready', 'script', 'opennamespace', 'closenamespace'];\n\n  function SAXParser(strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt);\n    }\n\n    var parser = this;\n    clearBuffers(parser);\n    parser.q = parser.c = '';\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;\n    parser.opt = opt || {};\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase';\n    parser.tags = [];\n    parser.closed = parser.closedRoot = parser.sawRoot = false;\n    parser.tag = parser.error = null;\n    parser.strict = !!strict;\n    parser.noscript = !!(strict || parser.opt.noscript);\n    parser.state = S.BEGIN;\n    parser.strictEntities = parser.opt.strictEntities;\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);\n    parser.attribList = []; // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS);\n    } // mostly just for error reporting\n\n\n    parser.trackPosition = parser.opt.position !== false;\n\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0;\n    }\n\n    emit(parser, 'onready');\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F() {}\n\n      F.prototype = o;\n      var newf = new F();\n      return newf;\n    };\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = [];\n\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i);\n\n      return a;\n    };\n  }\n\n  function checkBufferLength(parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);\n    var maxActual = 0;\n\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length;\n\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser);\n            break;\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata);\n            parser.cdata = '';\n            break;\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script);\n            parser.script = '';\n            break;\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i]);\n        }\n      }\n\n      maxActual = Math.max(maxActual, len);\n    } // schedule the next check for the earliest possible buffer overrun.\n\n\n    var m = sax.MAX_BUFFER_LENGTH - maxActual;\n    parser.bufferCheckPosition = m + parser.position;\n  }\n\n  function clearBuffers(parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = '';\n    }\n  }\n\n  function flushBuffers(parser) {\n    closeText(parser);\n\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata);\n      parser.cdata = '';\n    }\n\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script);\n      parser.script = '';\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () {\n      end(this);\n    },\n    write: write,\n    resume: function () {\n      this.error = null;\n      return this;\n    },\n    close: function () {\n      return this.write(null);\n    },\n    flush: function () {\n      flushBuffers(this);\n    }\n  };\n  var Stream;\n\n  try {\n    Stream = require('stream').Stream;\n  } catch (ex) {\n    Stream = function () {};\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end';\n  });\n\n  function createStream(strict, opt) {\n    return new SAXStream(strict, opt);\n  }\n\n  function SAXStream(strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt);\n    }\n\n    Stream.apply(this);\n    this._parser = new SAXParser(strict, opt);\n    this.writable = true;\n    this.readable = true;\n    var me = this;\n\n    this._parser.onend = function () {\n      me.emit('end');\n    };\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er); // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n\n      me._parser.error = null;\n    };\n\n    this._decoder = null;\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev];\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev);\n            me._parser['on' + ev] = h;\n            return h;\n          }\n\n          me.on(ev, h);\n        },\n        enumerable: true,\n        configurable: false\n      });\n    });\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  });\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' && typeof Buffer.isBuffer === 'function' && Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder;\n\n        this._decoder = new SD('utf8');\n      }\n\n      data = this._decoder.write(data);\n    }\n\n    this._parser.write(data.toString());\n\n    this.emit('data', data);\n    return true;\n  };\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk);\n    }\n\n    this._parser.end();\n\n    return true;\n  };\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this;\n\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);\n        args.splice(0, 0, ev);\n        me.emit.apply(me, args);\n      };\n    }\n\n    return Stream.prototype.on.call(me, ev, handler);\n  }; // character classes and tokens\n\n\n  var whitespace = '\\r\\n\\t '; // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n\n  var number = '0124356789';\n  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'; // (Letter | \"_\" | \":\")\n\n  var quote = '\\'\"';\n  var attribEnd = whitespace + '>';\n  var CDATA = '[CDATA[';\n  var DOCTYPE = 'DOCTYPE';\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace';\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/';\n  var rootNS = {\n    xml: XML_NAMESPACE,\n    xmlns: XMLNS_NAMESPACE\n  }; // turn all the string character sets into character class objects.\n\n  whitespace = charClass(whitespace);\n  number = charClass(number);\n  letter = charClass(letter); // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/;\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/;\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/;\n  quote = charClass(quote);\n  attribEnd = charClass(attribEnd);\n\n  function charClass(str) {\n    return str.split('').reduce(function (s, c) {\n      s[c] = true;\n      return s;\n    }, {});\n  }\n\n  function isRegExp(c) {\n    return Object.prototype.toString.call(c) === '[object RegExp]';\n  }\n\n  function is(charclass, c) {\n    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c];\n  }\n\n  function not(charclass, c) {\n    return !is(charclass, c);\n  }\n\n  var S = 0;\n  sax.STATE = {\n    BEGIN: S++,\n    // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++,\n    // leading whitespace\n    TEXT: S++,\n    // general stuff\n    TEXT_ENTITY: S++,\n    // &amp and such.\n    OPEN_WAKA: S++,\n    // <\n    SGML_DECL: S++,\n    // <!BLARG\n    SGML_DECL_QUOTED: S++,\n    // <!BLARG foo \"bar\n    DOCTYPE: S++,\n    // <!DOCTYPE\n    DOCTYPE_QUOTED: S++,\n    // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++,\n    // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++,\n    // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++,\n    // <!-\n    COMMENT: S++,\n    // <!--\n    COMMENT_ENDING: S++,\n    // <!-- blah -\n    COMMENT_ENDED: S++,\n    // <!-- blah --\n    CDATA: S++,\n    // <![CDATA[ something\n    CDATA_ENDING: S++,\n    // ]\n    CDATA_ENDING_2: S++,\n    // ]]\n    PROC_INST: S++,\n    // <?hi\n    PROC_INST_BODY: S++,\n    // <?hi there\n    PROC_INST_ENDING: S++,\n    // <?hi \"there\" ?\n    OPEN_TAG: S++,\n    // <strong\n    OPEN_TAG_SLASH: S++,\n    // <strong /\n    ATTRIB: S++,\n    // <a\n    ATTRIB_NAME: S++,\n    // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++,\n    // <a foo _\n    ATTRIB_VALUE: S++,\n    // <a foo=\n    ATTRIB_VALUE_QUOTED: S++,\n    // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++,\n    // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++,\n    // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++,\n    // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++,\n    // <foo bar=&quot\n    CLOSE_TAG: S++,\n    // </a\n    CLOSE_TAG_SAW_WHITE: S++,\n    // </a   >\n    SCRIPT: S++,\n    // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n\n  };\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  };\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  };\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key];\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e;\n    sax.ENTITIES[key] = s;\n  });\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s;\n  } // shorthand\n\n\n  S = sax.STATE;\n\n  function emit(parser, event, data) {\n    parser[event] && parser[event](data);\n  }\n\n  function emitNode(parser, nodeType, data) {\n    if (parser.textNode) closeText(parser);\n    emit(parser, nodeType, data);\n  }\n\n  function closeText(parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode);\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode);\n    parser.textNode = '';\n  }\n\n  function textopts(opt, text) {\n    if (opt.trim) text = text.trim();\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ');\n    return text;\n  }\n\n  function error(parser, er) {\n    closeText(parser);\n\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line + '\\nColumn: ' + parser.column + '\\nChar: ' + parser.c;\n    }\n\n    er = new Error(er);\n    parser.error = er;\n    emit(parser, 'onerror', er);\n    return parser;\n  }\n\n  function end(parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag');\n\n    if (parser.state !== S.BEGIN && parser.state !== S.BEGIN_WHITESPACE && parser.state !== S.TEXT) {\n      error(parser, 'Unexpected end');\n    }\n\n    closeText(parser);\n    parser.c = '';\n    parser.closed = true;\n    emit(parser, 'onend');\n    SAXParser.call(parser, parser.strict, parser.opt);\n    return parser;\n  }\n\n  function strictFail(parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail');\n    }\n\n    if (parser.strict) {\n      error(parser, message);\n    }\n  }\n\n  function newTag(parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();\n    var parent = parser.tags[parser.tags.length - 1] || parser;\n    var tag = parser.tag = {\n      name: parser.tagName,\n      attributes: {}\n    }; // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns;\n    }\n\n    parser.attribList.length = 0;\n    emitNode(parser, 'onopentagstart', tag);\n  }\n\n  function qname(name, attribute) {\n    var i = name.indexOf(':');\n    var qualName = i < 0 ? ['', name] : name.split(':');\n    var prefix = qualName[0];\n    var local = qualName[1]; // <x \"xmlns\"=\"http://foo\">\n\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns';\n      local = '';\n    }\n\n    return {\n      prefix: prefix,\n      local: local\n    };\n  }\n\n  function attrib(parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]();\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = '';\n      return;\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true);\n      var prefix = qn.prefix;\n      var local = qn.local;\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser, 'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' + 'Actual: ' + parser.attribValue);\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser, 'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' + 'Actual: ' + parser.attribValue);\n        } else {\n          var tag = parser.tag;\n          var parent = parser.tags[parser.tags.length - 1] || parser;\n\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns);\n          }\n\n          tag.ns[local] = parser.attribValue;\n        }\n      } // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n\n\n      parser.attribList.push([parser.attribName, parser.attribValue]);\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue;\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      });\n    }\n\n    parser.attribName = parser.attribValue = '';\n  }\n\n  function openTag(parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag; // add namespace info to tag\n\n      var qn = qname(parser.tagName);\n      tag.prefix = qn.prefix;\n      tag.local = qn.local;\n      tag.uri = tag.ns[qn.prefix] || '';\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(parser.tagName));\n        tag.uri = qn.prefix;\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          });\n        });\n      } // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n\n\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i];\n        var name = nv[0];\n        var value = nv[1];\n        var qualName = qname(name, true);\n        var prefix = qualName.prefix;\n        var local = qualName.local;\n        var uri = prefix === '' ? '' : tag.ns[prefix] || '';\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }; // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' + JSON.stringify(prefix));\n          a.uri = prefix;\n        }\n\n        parser.tag.attributes[name] = a;\n        emitNode(parser, 'onattribute', a);\n      }\n\n      parser.attribList.length = 0;\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing; // process the tag\n\n    parser.sawRoot = true;\n    parser.tags.push(parser.tag);\n    emitNode(parser, 'onopentag', parser.tag);\n\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT;\n      } else {\n        parser.state = S.TEXT;\n      }\n\n      parser.tag = null;\n      parser.tagName = '';\n    }\n\n    parser.attribName = parser.attribValue = '';\n    parser.attribList.length = 0;\n  }\n\n  function closeTag(parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.');\n      parser.textNode += '</>';\n      parser.state = S.TEXT;\n      return;\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>';\n        parser.tagName = '';\n        parser.state = S.SCRIPT;\n        return;\n      }\n\n      emitNode(parser, 'onscript', parser.script);\n      parser.script = '';\n    } // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n\n\n    var t = parser.tags.length;\n    var tagName = parser.tagName;\n\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]();\n    }\n\n    var closeTo = tagName;\n\n    while (t--) {\n      var close = parser.tags[t];\n\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag');\n      } else {\n        break;\n      }\n    } // didn't find it.  we already failed for strict, so just abort.\n\n\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName);\n      parser.textNode += '</' + parser.tagName + '>';\n      parser.state = S.TEXT;\n      return;\n    }\n\n    parser.tagName = tagName;\n    var s = parser.tags.length;\n\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop();\n      parser.tagName = parser.tag.name;\n      emitNode(parser, 'onclosetag', parser.tagName);\n      var x = {};\n\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i];\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser;\n\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p];\n          emitNode(parser, 'onclosenamespace', {\n            prefix: p,\n            uri: n\n          });\n        });\n      }\n    }\n\n    if (t === 0) parser.closedRoot = true;\n    parser.tagName = parser.attribValue = parser.attribName = '';\n    parser.attribList.length = 0;\n    parser.state = S.TEXT;\n  }\n\n  function parseEntity(parser) {\n    var entity = parser.entity;\n    var entityLC = entity.toLowerCase();\n    var num;\n    var numStr = '';\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity];\n    }\n\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC];\n    }\n\n    entity = entityLC;\n\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2);\n        num = parseInt(entity, 16);\n        numStr = num.toString(16);\n      } else {\n        entity = entity.slice(1);\n        num = parseInt(entity, 10);\n        numStr = num.toString(10);\n      }\n    }\n\n    entity = entity.replace(/^0+/, '');\n\n    if (numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity');\n      return '&' + parser.entity + ';';\n    }\n\n    return String.fromCodePoint(num);\n  }\n\n  function beginWhiteSpace(parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA;\n      parser.startTagPosition = parser.position;\n    } else if (not(whitespace, c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.');\n      parser.textNode = c;\n      parser.state = S.TEXT;\n    }\n  }\n\n  function charAt(chunk, i) {\n    var result = '';\n\n    if (i < chunk.length) {\n      result = chunk.charAt(i);\n    }\n\n    return result;\n  }\n\n  function write(chunk) {\n    var parser = this;\n\n    if (this.error) {\n      throw this.error;\n    }\n\n    if (parser.closed) {\n      return error(parser, 'Cannot write after close. Assign an onready handler.');\n    }\n\n    if (chunk === null) {\n      return end(parser);\n    }\n\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString();\n    }\n\n    var i = 0;\n    var c = '';\n\n    while (true) {\n      c = charAt(chunk, i++);\n      parser.c = c;\n\n      if (!c) {\n        break;\n      }\n\n      if (parser.trackPosition) {\n        parser.position++;\n\n        if (c === '\\n') {\n          parser.line++;\n          parser.column = 0;\n        } else {\n          parser.column++;\n        }\n      }\n\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE;\n\n          if (c === '\\uFEFF') {\n            continue;\n          }\n\n          beginWhiteSpace(parser, c);\n          continue;\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c);\n          continue;\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1;\n\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++);\n\n              if (c && parser.trackPosition) {\n                parser.position++;\n\n                if (c === '\\n') {\n                  parser.line++;\n                  parser.column = 0;\n                } else {\n                  parser.column++;\n                }\n              }\n            }\n\n            parser.textNode += chunk.substring(starti, i - 1);\n          }\n\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA;\n            parser.startTagPosition = parser.position;\n          } else {\n            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.');\n            }\n\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY;\n            } else {\n              parser.textNode += c;\n            }\n          }\n\n          continue;\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING;\n          } else {\n            parser.script += c;\n          }\n\n          continue;\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG;\n          } else {\n            parser.script += '<' + c;\n            parser.state = S.SCRIPT;\n          }\n\n          continue;\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL;\n            parser.sgmlDecl = '';\n          } else if (is(whitespace, c)) {// wait for it...\n          } else if (is(nameStart, c)) {\n            parser.state = S.OPEN_TAG;\n            parser.tagName = c;\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG;\n            parser.tagName = '';\n          } else if (c === '?') {\n            parser.state = S.PROC_INST;\n            parser.procInstName = parser.procInstBody = '';\n          } else {\n            strictFail(parser, 'Unencoded <'); // if there was some whitespace, then add that in.\n\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition;\n              c = new Array(pad).join(' ') + c;\n            }\n\n            parser.textNode += '<' + c;\n            parser.state = S.TEXT;\n          }\n\n          continue;\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata');\n            parser.state = S.CDATA;\n            parser.sgmlDecl = '';\n            parser.cdata = '';\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT;\n            parser.comment = '';\n            parser.sgmlDecl = '';\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE;\n\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser, 'Inappropriately located doctype declaration');\n            }\n\n            parser.doctype = '';\n            parser.sgmlDecl = '';\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl);\n            parser.sgmlDecl = '';\n            parser.state = S.TEXT;\n          } else if (is(quote, c)) {\n            parser.state = S.SGML_DECL_QUOTED;\n            parser.sgmlDecl += c;\n          } else {\n            parser.sgmlDecl += c;\n          }\n\n          continue;\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL;\n            parser.q = '';\n          }\n\n          parser.sgmlDecl += c;\n          continue;\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT;\n            emitNode(parser, 'ondoctype', parser.doctype);\n            parser.doctype = true; // just remember that we saw it.\n          } else {\n            parser.doctype += c;\n\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD;\n            } else if (is(quote, c)) {\n              parser.state = S.DOCTYPE_QUOTED;\n              parser.q = c;\n            }\n          }\n\n          continue;\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c;\n\n          if (c === parser.q) {\n            parser.q = '';\n            parser.state = S.DOCTYPE;\n          }\n\n          continue;\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c;\n\n          if (c === ']') {\n            parser.state = S.DOCTYPE;\n          } else if (is(quote, c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED;\n            parser.q = c;\n          }\n\n          continue;\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c;\n\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD;\n            parser.q = '';\n          }\n\n          continue;\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING;\n          } else {\n            parser.comment += c;\n          }\n\n          continue;\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED;\n            parser.comment = textopts(parser.opt, parser.comment);\n\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment);\n            }\n\n            parser.comment = '';\n          } else {\n            parser.comment += '-' + c;\n            parser.state = S.COMMENT;\n          }\n\n          continue;\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment'); // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n\n            parser.comment += '--' + c;\n            parser.state = S.COMMENT;\n          } else {\n            parser.state = S.TEXT;\n          }\n\n          continue;\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING;\n          } else {\n            parser.cdata += c;\n          }\n\n          continue;\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2;\n          } else {\n            parser.cdata += ']' + c;\n            parser.state = S.CDATA;\n          }\n\n          continue;\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata);\n            }\n\n            emitNode(parser, 'onclosecdata');\n            parser.cdata = '';\n            parser.state = S.TEXT;\n          } else if (c === ']') {\n            parser.cdata += ']';\n          } else {\n            parser.cdata += ']]' + c;\n            parser.state = S.CDATA;\n          }\n\n          continue;\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING;\n          } else if (is(whitespace, c)) {\n            parser.state = S.PROC_INST_BODY;\n          } else {\n            parser.procInstName += c;\n          }\n\n          continue;\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && is(whitespace, c)) {\n            continue;\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING;\n          } else {\n            parser.procInstBody += c;\n          }\n\n          continue;\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            });\n            parser.procInstName = parser.procInstBody = '';\n            parser.state = S.TEXT;\n          } else {\n            parser.procInstBody += '?' + c;\n            parser.state = S.PROC_INST_BODY;\n          }\n\n          continue;\n\n        case S.OPEN_TAG:\n          if (is(nameBody, c)) {\n            parser.tagName += c;\n          } else {\n            newTag(parser);\n\n            if (c === '>') {\n              openTag(parser);\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH;\n            } else {\n              if (not(whitespace, c)) {\n                strictFail(parser, 'Invalid character in tag name');\n              }\n\n              parser.state = S.ATTRIB;\n            }\n          }\n\n          continue;\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true);\n            closeTag(parser);\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >');\n            parser.state = S.ATTRIB;\n          }\n\n          continue;\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (is(whitespace, c)) {\n            continue;\n          } else if (c === '>') {\n            openTag(parser);\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH;\n          } else if (is(nameStart, c)) {\n            parser.attribName = c;\n            parser.attribValue = '';\n            parser.state = S.ATTRIB_NAME;\n          } else {\n            strictFail(parser, 'Invalid attribute name');\n          }\n\n          continue;\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE;\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value');\n            parser.attribValue = parser.attribName;\n            attrib(parser);\n            openTag(parser);\n          } else if (is(whitespace, c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE;\n          } else if (is(nameBody, c)) {\n            parser.attribName += c;\n          } else {\n            strictFail(parser, 'Invalid attribute name');\n          }\n\n          continue;\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE;\n          } else if (is(whitespace, c)) {\n            continue;\n          } else {\n            strictFail(parser, 'Attribute without value');\n            parser.tag.attributes[parser.attribName] = '';\n            parser.attribValue = '';\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            });\n            parser.attribName = '';\n\n            if (c === '>') {\n              openTag(parser);\n            } else if (is(nameStart, c)) {\n              parser.attribName = c;\n              parser.state = S.ATTRIB_NAME;\n            } else {\n              strictFail(parser, 'Invalid attribute name');\n              parser.state = S.ATTRIB;\n            }\n          }\n\n          continue;\n\n        case S.ATTRIB_VALUE:\n          if (is(whitespace, c)) {\n            continue;\n          } else if (is(quote, c)) {\n            parser.q = c;\n            parser.state = S.ATTRIB_VALUE_QUOTED;\n          } else {\n            strictFail(parser, 'Unquoted attribute value');\n            parser.state = S.ATTRIB_VALUE_UNQUOTED;\n            parser.attribValue = c;\n          }\n\n          continue;\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q;\n            } else {\n              parser.attribValue += c;\n            }\n\n            continue;\n          }\n\n          attrib(parser);\n          parser.q = '';\n          parser.state = S.ATTRIB_VALUE_CLOSED;\n          continue;\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (is(whitespace, c)) {\n            parser.state = S.ATTRIB;\n          } else if (c === '>') {\n            openTag(parser);\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH;\n          } else if (is(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes');\n            parser.attribName = c;\n            parser.attribValue = '';\n            parser.state = S.ATTRIB_NAME;\n          } else {\n            strictFail(parser, 'Invalid attribute name');\n          }\n\n          continue;\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (not(attribEnd, c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U;\n            } else {\n              parser.attribValue += c;\n            }\n\n            continue;\n          }\n\n          attrib(parser);\n\n          if (c === '>') {\n            openTag(parser);\n          } else {\n            parser.state = S.ATTRIB;\n          }\n\n          continue;\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (is(whitespace, c)) {\n              continue;\n            } else if (not(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c;\n                parser.state = S.SCRIPT;\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.');\n              }\n            } else {\n              parser.tagName = c;\n            }\n          } else if (c === '>') {\n            closeTag(parser);\n          } else if (is(nameBody, c)) {\n            parser.tagName += c;\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName;\n            parser.tagName = '';\n            parser.state = S.SCRIPT;\n          } else {\n            if (not(whitespace, c)) {\n              strictFail(parser, 'Invalid tagname in closing tag');\n            }\n\n            parser.state = S.CLOSE_TAG_SAW_WHITE;\n          }\n\n          continue;\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (is(whitespace, c)) {\n            continue;\n          }\n\n          if (c === '>') {\n            closeTag(parser);\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag');\n          }\n\n          continue;\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState;\n          var buffer;\n\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT;\n              buffer = 'textNode';\n              break;\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED;\n              buffer = 'attribValue';\n              break;\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED;\n              buffer = 'attribValue';\n              break;\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser);\n            parser.entity = '';\n            parser.state = returnState;\n          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c;\n          } else {\n            strictFail(parser, 'Invalid character in entity name');\n            parser[buffer] += '&' + parser.entity + c;\n            parser.entity = '';\n            parser.state = returnState;\n          }\n\n          continue;\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state);\n      }\n    } // while\n\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser);\n    }\n\n    return parser;\n  }\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n\n\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode;\n      var floor = Math.floor;\n\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000;\n        var codeUnits = [];\n        var highSurrogate;\n        var lowSurrogate;\n        var index = -1;\n        var length = arguments.length;\n\n        if (!length) {\n          return '';\n        }\n\n        var result = '';\n\n        while (++index < length) {\n          var codePoint = Number(arguments[index]);\n\n          if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n          codePoint < 0 || // not a valid Unicode code point\n          codePoint > 0x10FFFF || // not a valid Unicode code point\n          floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint);\n          }\n\n          if (codePoint <= 0xFFFF) {\n            // BMP code point\n            codeUnits.push(codePoint);\n          } else {\n            // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000;\n            highSurrogate = (codePoint >> 10) + 0xD800;\n            lowSurrogate = codePoint % 0x400 + 0xDC00;\n            codeUnits.push(highSurrogate, lowSurrogate);\n          }\n\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits);\n            codeUnits.length = 0;\n          }\n        }\n\n        return result;\n      };\n\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        });\n      } else {\n        String.fromCodePoint = fromCodePoint;\n      }\n    })();\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports);","map":{"version":3,"names":["sax","parser","strict","opt","SAXParser","SAXStream","createStream","MAX_BUFFER_LENGTH","buffers","EVENTS","clearBuffers","q","c","bufferCheckPosition","lowercase","lowercasetags","looseCase","tags","closed","closedRoot","sawRoot","tag","error","noscript","state","S","BEGIN","strictEntities","ENTITIES","Object","create","XML_ENTITIES","attribList","xmlns","ns","rootNS","trackPosition","position","line","column","emit","o","F","prototype","newf","keys","a","i","hasOwnProperty","push","checkBufferLength","maxAllowed","Math","max","maxActual","l","length","len","closeText","emitNode","cdata","script","m","flushBuffers","end","write","resume","close","flush","Stream","require","ex","streamWraps","filter","ev","apply","_parser","writable","readable","me","onend","onerror","er","_decoder","forEach","defineProperty","get","set","h","removeAllListeners","on","enumerable","configurable","constructor","value","data","Buffer","isBuffer","SD","StringDecoder","toString","chunk","handler","indexOf","args","arguments","Array","splice","call","whitespace","number","letter","quote","attribEnd","CDATA","DOCTYPE","XML_NAMESPACE","XMLNS_NAMESPACE","xml","charClass","nameStart","nameBody","entityStart","entityBody","str","split","reduce","s","isRegExp","is","charclass","match","not","STATE","BEGIN_WHITESPACE","TEXT","TEXT_ENTITY","OPEN_WAKA","SGML_DECL","SGML_DECL_QUOTED","DOCTYPE_QUOTED","DOCTYPE_DTD","DOCTYPE_DTD_QUOTED","COMMENT_STARTING","COMMENT","COMMENT_ENDING","COMMENT_ENDED","CDATA_ENDING","CDATA_ENDING_2","PROC_INST","PROC_INST_BODY","PROC_INST_ENDING","OPEN_TAG","OPEN_TAG_SLASH","ATTRIB","ATTRIB_NAME","ATTRIB_NAME_SAW_WHITE","ATTRIB_VALUE","ATTRIB_VALUE_QUOTED","ATTRIB_VALUE_CLOSED","ATTRIB_VALUE_UNQUOTED","ATTRIB_VALUE_ENTITY_Q","ATTRIB_VALUE_ENTITY_U","CLOSE_TAG","CLOSE_TAG_SAW_WHITE","SCRIPT","SCRIPT_ENDING","key","e","String","fromCharCode","event","nodeType","textNode","textopts","text","trim","normalize","replace","Error","strictFail","message","newTag","tagName","parent","name","attributes","qname","attribute","qualName","prefix","local","attrib","attribName","attribValue","qn","openTag","selfClosing","uri","JSON","stringify","p","nv","isSelfClosing","toLowerCase","closeTag","t","closeTo","pop","x","n","parseEntity","entity","entityLC","num","numStr","charAt","slice","parseInt","fromCodePoint","beginWhiteSpace","startTagPosition","result","starti","substring","sgmlDecl","procInstName","procInstBody","pad","join","toUpperCase","comment","doctype","body","returnState","buffer","stringFromCharCode","floor","MAX_SIZE","codeUnits","highSurrogate","lowSurrogate","index","codePoint","Number","isFinite","RangeError","exports"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/imsc/node_modules/sax/lib/sax.js"],"sourcesContent":[";(function (sax) { // wrapper for non-node envs\n  sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }\n  sax.SAXParser = SAXParser\n  sax.SAXStream = SAXStream\n  sax.createStream = createStream\n\n  // When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.\n  // When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),\n  // since that's the earliest that a buffer overrun could occur.  This way, checks are\n  // as rare as required, but as often as necessary to ensure never crossing this bound.\n  // Furthermore, buffers are only tested at most once per write(), so passing a very\n  // large string into write() might have undesirable effects, but this is manageable by\n  // the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme\n  // edge case, result in creating at most one complete copy of the string passed in.\n  // Set to Infinity to have unlimited buffers.\n  sax.MAX_BUFFER_LENGTH = 64 * 1024\n\n  var buffers = [\n    'comment', 'sgmlDecl', 'textNode', 'tagName', 'doctype',\n    'procInstName', 'procInstBody', 'entity', 'attribName',\n    'attribValue', 'cdata', 'script'\n  ]\n\n  sax.EVENTS = [\n    'text',\n    'processinginstruction',\n    'sgmldeclaration',\n    'doctype',\n    'comment',\n    'opentagstart',\n    'attribute',\n    'opentag',\n    'closetag',\n    'opencdata',\n    'cdata',\n    'closecdata',\n    'error',\n    'end',\n    'ready',\n    'script',\n    'opennamespace',\n    'closenamespace'\n  ]\n\n  function SAXParser (strict, opt) {\n    if (!(this instanceof SAXParser)) {\n      return new SAXParser(strict, opt)\n    }\n\n    var parser = this\n    clearBuffers(parser)\n    parser.q = parser.c = ''\n    parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH\n    parser.opt = opt || {}\n    parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags\n    parser.looseCase = parser.opt.lowercase ? 'toLowerCase' : 'toUpperCase'\n    parser.tags = []\n    parser.closed = parser.closedRoot = parser.sawRoot = false\n    parser.tag = parser.error = null\n    parser.strict = !!strict\n    parser.noscript = !!(strict || parser.opt.noscript)\n    parser.state = S.BEGIN\n    parser.strictEntities = parser.opt.strictEntities\n    parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES)\n    parser.attribList = []\n\n    // namespaces form a prototype chain.\n    // it always points at the current tag,\n    // which protos to its parent tag.\n    if (parser.opt.xmlns) {\n      parser.ns = Object.create(rootNS)\n    }\n\n    // mostly just for error reporting\n    parser.trackPosition = parser.opt.position !== false\n    if (parser.trackPosition) {\n      parser.position = parser.line = parser.column = 0\n    }\n    emit(parser, 'onready')\n  }\n\n  if (!Object.create) {\n    Object.create = function (o) {\n      function F () {}\n      F.prototype = o\n      var newf = new F()\n      return newf\n    }\n  }\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      var a = []\n      for (var i in o) if (o.hasOwnProperty(i)) a.push(i)\n      return a\n    }\n  }\n\n  function checkBufferLength (parser) {\n    var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)\n    var maxActual = 0\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      var len = parser[buffers[i]].length\n      if (len > maxAllowed) {\n        // Text/cdata nodes can get big, and since they're buffered,\n        // we can get here under normal conditions.\n        // Avoid issues by emitting the text node now,\n        // so at least it won't get any bigger.\n        switch (buffers[i]) {\n          case 'textNode':\n            closeText(parser)\n            break\n\n          case 'cdata':\n            emitNode(parser, 'oncdata', parser.cdata)\n            parser.cdata = ''\n            break\n\n          case 'script':\n            emitNode(parser, 'onscript', parser.script)\n            parser.script = ''\n            break\n\n          default:\n            error(parser, 'Max buffer length exceeded: ' + buffers[i])\n        }\n      }\n      maxActual = Math.max(maxActual, len)\n    }\n    // schedule the next check for the earliest possible buffer overrun.\n    var m = sax.MAX_BUFFER_LENGTH - maxActual\n    parser.bufferCheckPosition = m + parser.position\n  }\n\n  function clearBuffers (parser) {\n    for (var i = 0, l = buffers.length; i < l; i++) {\n      parser[buffers[i]] = ''\n    }\n  }\n\n  function flushBuffers (parser) {\n    closeText(parser)\n    if (parser.cdata !== '') {\n      emitNode(parser, 'oncdata', parser.cdata)\n      parser.cdata = ''\n    }\n    if (parser.script !== '') {\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n  }\n\n  SAXParser.prototype = {\n    end: function () { end(this) },\n    write: write,\n    resume: function () { this.error = null; return this },\n    close: function () { return this.write(null) },\n    flush: function () { flushBuffers(this) }\n  }\n\n  var Stream\n  try {\n    Stream = require('stream').Stream\n  } catch (ex) {\n    Stream = function () {}\n  }\n\n  var streamWraps = sax.EVENTS.filter(function (ev) {\n    return ev !== 'error' && ev !== 'end'\n  })\n\n  function createStream (strict, opt) {\n    return new SAXStream(strict, opt)\n  }\n\n  function SAXStream (strict, opt) {\n    if (!(this instanceof SAXStream)) {\n      return new SAXStream(strict, opt)\n    }\n\n    Stream.apply(this)\n\n    this._parser = new SAXParser(strict, opt)\n    this.writable = true\n    this.readable = true\n\n    var me = this\n\n    this._parser.onend = function () {\n      me.emit('end')\n    }\n\n    this._parser.onerror = function (er) {\n      me.emit('error', er)\n\n      // if didn't throw, then means error was handled.\n      // go ahead and clear error, so we can write again.\n      me._parser.error = null\n    }\n\n    this._decoder = null\n\n    streamWraps.forEach(function (ev) {\n      Object.defineProperty(me, 'on' + ev, {\n        get: function () {\n          return me._parser['on' + ev]\n        },\n        set: function (h) {\n          if (!h) {\n            me.removeAllListeners(ev)\n            me._parser['on' + ev] = h\n            return h\n          }\n          me.on(ev, h)\n        },\n        enumerable: true,\n        configurable: false\n      })\n    })\n  }\n\n  SAXStream.prototype = Object.create(Stream.prototype, {\n    constructor: {\n      value: SAXStream\n    }\n  })\n\n  SAXStream.prototype.write = function (data) {\n    if (typeof Buffer === 'function' &&\n      typeof Buffer.isBuffer === 'function' &&\n      Buffer.isBuffer(data)) {\n      if (!this._decoder) {\n        var SD = require('string_decoder').StringDecoder\n        this._decoder = new SD('utf8')\n      }\n      data = this._decoder.write(data)\n    }\n\n    this._parser.write(data.toString())\n    this.emit('data', data)\n    return true\n  }\n\n  SAXStream.prototype.end = function (chunk) {\n    if (chunk && chunk.length) {\n      this.write(chunk)\n    }\n    this._parser.end()\n    return true\n  }\n\n  SAXStream.prototype.on = function (ev, handler) {\n    var me = this\n    if (!me._parser['on' + ev] && streamWraps.indexOf(ev) !== -1) {\n      me._parser['on' + ev] = function () {\n        var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments)\n        args.splice(0, 0, ev)\n        me.emit.apply(me, args)\n      }\n    }\n\n    return Stream.prototype.on.call(me, ev, handler)\n  }\n\n  // character classes and tokens\n  var whitespace = '\\r\\n\\t '\n\n  // this really needs to be replaced with character classes.\n  // XML allows all manner of ridiculous numbers and digits.\n  var number = '0124356789'\n  var letter = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\n  // (Letter | \"_\" | \":\")\n  var quote = '\\'\"'\n  var attribEnd = whitespace + '>'\n  var CDATA = '[CDATA['\n  var DOCTYPE = 'DOCTYPE'\n  var XML_NAMESPACE = 'http://www.w3.org/XML/1998/namespace'\n  var XMLNS_NAMESPACE = 'http://www.w3.org/2000/xmlns/'\n  var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }\n\n  // turn all the string character sets into character class objects.\n  whitespace = charClass(whitespace)\n  number = charClass(number)\n  letter = charClass(letter)\n\n  // http://www.w3.org/TR/REC-xml/#NT-NameStartChar\n  // This implementation works on strings, a single character at a time\n  // as such, it cannot ever support astral-plane characters (10000-EFFFF)\n  // without a significant breaking change to either this  parser, or the\n  // JavaScript language.  Implementation of an emoji-capable xml parser\n  // is left as an exercise for the reader.\n  var nameStart = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n\n  var nameBody = /[:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/\n\n  var entityStart = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/\n  var entityBody = /[#:_A-Za-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\u00B7\\u0300-\\u036F\\u203F-\\u2040\\.\\d-]/\n\n  quote = charClass(quote)\n  attribEnd = charClass(attribEnd)\n\n  function charClass (str) {\n    return str.split('').reduce(function (s, c) {\n      s[c] = true\n      return s\n    }, {})\n  }\n\n  function isRegExp (c) {\n    return Object.prototype.toString.call(c) === '[object RegExp]'\n  }\n\n  function is (charclass, c) {\n    return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]\n  }\n\n  function not (charclass, c) {\n    return !is(charclass, c)\n  }\n\n  var S = 0\n  sax.STATE = {\n    BEGIN: S++, // leading byte order mark or whitespace\n    BEGIN_WHITESPACE: S++, // leading whitespace\n    TEXT: S++, // general stuff\n    TEXT_ENTITY: S++, // &amp and such.\n    OPEN_WAKA: S++, // <\n    SGML_DECL: S++, // <!BLARG\n    SGML_DECL_QUOTED: S++, // <!BLARG foo \"bar\n    DOCTYPE: S++, // <!DOCTYPE\n    DOCTYPE_QUOTED: S++, // <!DOCTYPE \"//blah\n    DOCTYPE_DTD: S++, // <!DOCTYPE \"//blah\" [ ...\n    DOCTYPE_DTD_QUOTED: S++, // <!DOCTYPE \"//blah\" [ \"foo\n    COMMENT_STARTING: S++, // <!-\n    COMMENT: S++, // <!--\n    COMMENT_ENDING: S++, // <!-- blah -\n    COMMENT_ENDED: S++, // <!-- blah --\n    CDATA: S++, // <![CDATA[ something\n    CDATA_ENDING: S++, // ]\n    CDATA_ENDING_2: S++, // ]]\n    PROC_INST: S++, // <?hi\n    PROC_INST_BODY: S++, // <?hi there\n    PROC_INST_ENDING: S++, // <?hi \"there\" ?\n    OPEN_TAG: S++, // <strong\n    OPEN_TAG_SLASH: S++, // <strong /\n    ATTRIB: S++, // <a\n    ATTRIB_NAME: S++, // <a foo\n    ATTRIB_NAME_SAW_WHITE: S++, // <a foo _\n    ATTRIB_VALUE: S++, // <a foo=\n    ATTRIB_VALUE_QUOTED: S++, // <a foo=\"bar\n    ATTRIB_VALUE_CLOSED: S++, // <a foo=\"bar\"\n    ATTRIB_VALUE_UNQUOTED: S++, // <a foo=bar\n    ATTRIB_VALUE_ENTITY_Q: S++, // <foo bar=\"&quot;\"\n    ATTRIB_VALUE_ENTITY_U: S++, // <foo bar=&quot\n    CLOSE_TAG: S++, // </a\n    CLOSE_TAG_SAW_WHITE: S++, // </a   >\n    SCRIPT: S++, // <script> ...\n    SCRIPT_ENDING: S++ // <script> ... <\n  }\n\n  sax.XML_ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\"\n  }\n\n  sax.ENTITIES = {\n    'amp': '&',\n    'gt': '>',\n    'lt': '<',\n    'quot': '\"',\n    'apos': \"'\",\n    'AElig': 198,\n    'Aacute': 193,\n    'Acirc': 194,\n    'Agrave': 192,\n    'Aring': 197,\n    'Atilde': 195,\n    'Auml': 196,\n    'Ccedil': 199,\n    'ETH': 208,\n    'Eacute': 201,\n    'Ecirc': 202,\n    'Egrave': 200,\n    'Euml': 203,\n    'Iacute': 205,\n    'Icirc': 206,\n    'Igrave': 204,\n    'Iuml': 207,\n    'Ntilde': 209,\n    'Oacute': 211,\n    'Ocirc': 212,\n    'Ograve': 210,\n    'Oslash': 216,\n    'Otilde': 213,\n    'Ouml': 214,\n    'THORN': 222,\n    'Uacute': 218,\n    'Ucirc': 219,\n    'Ugrave': 217,\n    'Uuml': 220,\n    'Yacute': 221,\n    'aacute': 225,\n    'acirc': 226,\n    'aelig': 230,\n    'agrave': 224,\n    'aring': 229,\n    'atilde': 227,\n    'auml': 228,\n    'ccedil': 231,\n    'eacute': 233,\n    'ecirc': 234,\n    'egrave': 232,\n    'eth': 240,\n    'euml': 235,\n    'iacute': 237,\n    'icirc': 238,\n    'igrave': 236,\n    'iuml': 239,\n    'ntilde': 241,\n    'oacute': 243,\n    'ocirc': 244,\n    'ograve': 242,\n    'oslash': 248,\n    'otilde': 245,\n    'ouml': 246,\n    'szlig': 223,\n    'thorn': 254,\n    'uacute': 250,\n    'ucirc': 251,\n    'ugrave': 249,\n    'uuml': 252,\n    'yacute': 253,\n    'yuml': 255,\n    'copy': 169,\n    'reg': 174,\n    'nbsp': 160,\n    'iexcl': 161,\n    'cent': 162,\n    'pound': 163,\n    'curren': 164,\n    'yen': 165,\n    'brvbar': 166,\n    'sect': 167,\n    'uml': 168,\n    'ordf': 170,\n    'laquo': 171,\n    'not': 172,\n    'shy': 173,\n    'macr': 175,\n    'deg': 176,\n    'plusmn': 177,\n    'sup1': 185,\n    'sup2': 178,\n    'sup3': 179,\n    'acute': 180,\n    'micro': 181,\n    'para': 182,\n    'middot': 183,\n    'cedil': 184,\n    'ordm': 186,\n    'raquo': 187,\n    'frac14': 188,\n    'frac12': 189,\n    'frac34': 190,\n    'iquest': 191,\n    'times': 215,\n    'divide': 247,\n    'OElig': 338,\n    'oelig': 339,\n    'Scaron': 352,\n    'scaron': 353,\n    'Yuml': 376,\n    'fnof': 402,\n    'circ': 710,\n    'tilde': 732,\n    'Alpha': 913,\n    'Beta': 914,\n    'Gamma': 915,\n    'Delta': 916,\n    'Epsilon': 917,\n    'Zeta': 918,\n    'Eta': 919,\n    'Theta': 920,\n    'Iota': 921,\n    'Kappa': 922,\n    'Lambda': 923,\n    'Mu': 924,\n    'Nu': 925,\n    'Xi': 926,\n    'Omicron': 927,\n    'Pi': 928,\n    'Rho': 929,\n    'Sigma': 931,\n    'Tau': 932,\n    'Upsilon': 933,\n    'Phi': 934,\n    'Chi': 935,\n    'Psi': 936,\n    'Omega': 937,\n    'alpha': 945,\n    'beta': 946,\n    'gamma': 947,\n    'delta': 948,\n    'epsilon': 949,\n    'zeta': 950,\n    'eta': 951,\n    'theta': 952,\n    'iota': 953,\n    'kappa': 954,\n    'lambda': 955,\n    'mu': 956,\n    'nu': 957,\n    'xi': 958,\n    'omicron': 959,\n    'pi': 960,\n    'rho': 961,\n    'sigmaf': 962,\n    'sigma': 963,\n    'tau': 964,\n    'upsilon': 965,\n    'phi': 966,\n    'chi': 967,\n    'psi': 968,\n    'omega': 969,\n    'thetasym': 977,\n    'upsih': 978,\n    'piv': 982,\n    'ensp': 8194,\n    'emsp': 8195,\n    'thinsp': 8201,\n    'zwnj': 8204,\n    'zwj': 8205,\n    'lrm': 8206,\n    'rlm': 8207,\n    'ndash': 8211,\n    'mdash': 8212,\n    'lsquo': 8216,\n    'rsquo': 8217,\n    'sbquo': 8218,\n    'ldquo': 8220,\n    'rdquo': 8221,\n    'bdquo': 8222,\n    'dagger': 8224,\n    'Dagger': 8225,\n    'bull': 8226,\n    'hellip': 8230,\n    'permil': 8240,\n    'prime': 8242,\n    'Prime': 8243,\n    'lsaquo': 8249,\n    'rsaquo': 8250,\n    'oline': 8254,\n    'frasl': 8260,\n    'euro': 8364,\n    'image': 8465,\n    'weierp': 8472,\n    'real': 8476,\n    'trade': 8482,\n    'alefsym': 8501,\n    'larr': 8592,\n    'uarr': 8593,\n    'rarr': 8594,\n    'darr': 8595,\n    'harr': 8596,\n    'crarr': 8629,\n    'lArr': 8656,\n    'uArr': 8657,\n    'rArr': 8658,\n    'dArr': 8659,\n    'hArr': 8660,\n    'forall': 8704,\n    'part': 8706,\n    'exist': 8707,\n    'empty': 8709,\n    'nabla': 8711,\n    'isin': 8712,\n    'notin': 8713,\n    'ni': 8715,\n    'prod': 8719,\n    'sum': 8721,\n    'minus': 8722,\n    'lowast': 8727,\n    'radic': 8730,\n    'prop': 8733,\n    'infin': 8734,\n    'ang': 8736,\n    'and': 8743,\n    'or': 8744,\n    'cap': 8745,\n    'cup': 8746,\n    'int': 8747,\n    'there4': 8756,\n    'sim': 8764,\n    'cong': 8773,\n    'asymp': 8776,\n    'ne': 8800,\n    'equiv': 8801,\n    'le': 8804,\n    'ge': 8805,\n    'sub': 8834,\n    'sup': 8835,\n    'nsub': 8836,\n    'sube': 8838,\n    'supe': 8839,\n    'oplus': 8853,\n    'otimes': 8855,\n    'perp': 8869,\n    'sdot': 8901,\n    'lceil': 8968,\n    'rceil': 8969,\n    'lfloor': 8970,\n    'rfloor': 8971,\n    'lang': 9001,\n    'rang': 9002,\n    'loz': 9674,\n    'spades': 9824,\n    'clubs': 9827,\n    'hearts': 9829,\n    'diams': 9830\n  }\n\n  Object.keys(sax.ENTITIES).forEach(function (key) {\n    var e = sax.ENTITIES[key]\n    var s = typeof e === 'number' ? String.fromCharCode(e) : e\n    sax.ENTITIES[key] = s\n  })\n\n  for (var s in sax.STATE) {\n    sax.STATE[sax.STATE[s]] = s\n  }\n\n  // shorthand\n  S = sax.STATE\n\n  function emit (parser, event, data) {\n    parser[event] && parser[event](data)\n  }\n\n  function emitNode (parser, nodeType, data) {\n    if (parser.textNode) closeText(parser)\n    emit(parser, nodeType, data)\n  }\n\n  function closeText (parser) {\n    parser.textNode = textopts(parser.opt, parser.textNode)\n    if (parser.textNode) emit(parser, 'ontext', parser.textNode)\n    parser.textNode = ''\n  }\n\n  function textopts (opt, text) {\n    if (opt.trim) text = text.trim()\n    if (opt.normalize) text = text.replace(/\\s+/g, ' ')\n    return text\n  }\n\n  function error (parser, er) {\n    closeText(parser)\n    if (parser.trackPosition) {\n      er += '\\nLine: ' + parser.line +\n        '\\nColumn: ' + parser.column +\n        '\\nChar: ' + parser.c\n    }\n    er = new Error(er)\n    parser.error = er\n    emit(parser, 'onerror', er)\n    return parser\n  }\n\n  function end (parser) {\n    if (parser.sawRoot && !parser.closedRoot) strictFail(parser, 'Unclosed root tag')\n    if ((parser.state !== S.BEGIN) &&\n      (parser.state !== S.BEGIN_WHITESPACE) &&\n      (parser.state !== S.TEXT)) {\n      error(parser, 'Unexpected end')\n    }\n    closeText(parser)\n    parser.c = ''\n    parser.closed = true\n    emit(parser, 'onend')\n    SAXParser.call(parser, parser.strict, parser.opt)\n    return parser\n  }\n\n  function strictFail (parser, message) {\n    if (typeof parser !== 'object' || !(parser instanceof SAXParser)) {\n      throw new Error('bad call to strictFail')\n    }\n    if (parser.strict) {\n      error(parser, message)\n    }\n  }\n\n  function newTag (parser) {\n    if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()\n    var parent = parser.tags[parser.tags.length - 1] || parser\n    var tag = parser.tag = { name: parser.tagName, attributes: {} }\n\n    // will be overridden if tag contails an xmlns=\"foo\" or xmlns:foo=\"bar\"\n    if (parser.opt.xmlns) {\n      tag.ns = parent.ns\n    }\n    parser.attribList.length = 0\n    emitNode(parser, 'onopentagstart', tag)\n  }\n\n  function qname (name, attribute) {\n    var i = name.indexOf(':')\n    var qualName = i < 0 ? [ '', name ] : name.split(':')\n    var prefix = qualName[0]\n    var local = qualName[1]\n\n    // <x \"xmlns\"=\"http://foo\">\n    if (attribute && name === 'xmlns') {\n      prefix = 'xmlns'\n      local = ''\n    }\n\n    return { prefix: prefix, local: local }\n  }\n\n  function attrib (parser) {\n    if (!parser.strict) {\n      parser.attribName = parser.attribName[parser.looseCase]()\n    }\n\n    if (parser.attribList.indexOf(parser.attribName) !== -1 ||\n      parser.tag.attributes.hasOwnProperty(parser.attribName)) {\n      parser.attribName = parser.attribValue = ''\n      return\n    }\n\n    if (parser.opt.xmlns) {\n      var qn = qname(parser.attribName, true)\n      var prefix = qn.prefix\n      var local = qn.local\n\n      if (prefix === 'xmlns') {\n        // namespace binding attribute. push the binding into scope\n        if (local === 'xml' && parser.attribValue !== XML_NAMESPACE) {\n          strictFail(parser,\n            'xml: prefix must be bound to ' + XML_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else if (local === 'xmlns' && parser.attribValue !== XMLNS_NAMESPACE) {\n          strictFail(parser,\n            'xmlns: prefix must be bound to ' + XMLNS_NAMESPACE + '\\n' +\n            'Actual: ' + parser.attribValue)\n        } else {\n          var tag = parser.tag\n          var parent = parser.tags[parser.tags.length - 1] || parser\n          if (tag.ns === parent.ns) {\n            tag.ns = Object.create(parent.ns)\n          }\n          tag.ns[local] = parser.attribValue\n        }\n      }\n\n      // defer onattribute events until all attributes have been seen\n      // so any new bindings can take effect. preserve attribute order\n      // so deferred events can be emitted in document order\n      parser.attribList.push([parser.attribName, parser.attribValue])\n    } else {\n      // in non-xmlns mode, we can emit the event right away\n      parser.tag.attributes[parser.attribName] = parser.attribValue\n      emitNode(parser, 'onattribute', {\n        name: parser.attribName,\n        value: parser.attribValue\n      })\n    }\n\n    parser.attribName = parser.attribValue = ''\n  }\n\n  function openTag (parser, selfClosing) {\n    if (parser.opt.xmlns) {\n      // emit namespace binding events\n      var tag = parser.tag\n\n      // add namespace info to tag\n      var qn = qname(parser.tagName)\n      tag.prefix = qn.prefix\n      tag.local = qn.local\n      tag.uri = tag.ns[qn.prefix] || ''\n\n      if (tag.prefix && !tag.uri) {\n        strictFail(parser, 'Unbound namespace prefix: ' +\n          JSON.stringify(parser.tagName))\n        tag.uri = qn.prefix\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (tag.ns && parent.ns !== tag.ns) {\n        Object.keys(tag.ns).forEach(function (p) {\n          emitNode(parser, 'onopennamespace', {\n            prefix: p,\n            uri: tag.ns[p]\n          })\n        })\n      }\n\n      // handle deferred onattribute events\n      // Note: do not apply default ns to attributes:\n      //   http://www.w3.org/TR/REC-xml-names/#defaulting\n      for (var i = 0, l = parser.attribList.length; i < l; i++) {\n        var nv = parser.attribList[i]\n        var name = nv[0]\n        var value = nv[1]\n        var qualName = qname(name, true)\n        var prefix = qualName.prefix\n        var local = qualName.local\n        var uri = prefix === '' ? '' : (tag.ns[prefix] || '')\n        var a = {\n          name: name,\n          value: value,\n          prefix: prefix,\n          local: local,\n          uri: uri\n        }\n\n        // if there's any attributes with an undefined namespace,\n        // then fail on them now.\n        if (prefix && prefix !== 'xmlns' && !uri) {\n          strictFail(parser, 'Unbound namespace prefix: ' +\n            JSON.stringify(prefix))\n          a.uri = prefix\n        }\n        parser.tag.attributes[name] = a\n        emitNode(parser, 'onattribute', a)\n      }\n      parser.attribList.length = 0\n    }\n\n    parser.tag.isSelfClosing = !!selfClosing\n\n    // process the tag\n    parser.sawRoot = true\n    parser.tags.push(parser.tag)\n    emitNode(parser, 'onopentag', parser.tag)\n    if (!selfClosing) {\n      // special case for <script> in non-strict mode.\n      if (!parser.noscript && parser.tagName.toLowerCase() === 'script') {\n        parser.state = S.SCRIPT\n      } else {\n        parser.state = S.TEXT\n      }\n      parser.tag = null\n      parser.tagName = ''\n    }\n    parser.attribName = parser.attribValue = ''\n    parser.attribList.length = 0\n  }\n\n  function closeTag (parser) {\n    if (!parser.tagName) {\n      strictFail(parser, 'Weird empty close tag.')\n      parser.textNode += '</>'\n      parser.state = S.TEXT\n      return\n    }\n\n    if (parser.script) {\n      if (parser.tagName !== 'script') {\n        parser.script += '</' + parser.tagName + '>'\n        parser.tagName = ''\n        parser.state = S.SCRIPT\n        return\n      }\n      emitNode(parser, 'onscript', parser.script)\n      parser.script = ''\n    }\n\n    // first make sure that the closing tag actually exists.\n    // <a><b></c></b></a> will close everything, otherwise.\n    var t = parser.tags.length\n    var tagName = parser.tagName\n    if (!parser.strict) {\n      tagName = tagName[parser.looseCase]()\n    }\n    var closeTo = tagName\n    while (t--) {\n      var close = parser.tags[t]\n      if (close.name !== closeTo) {\n        // fail the first time in strict mode\n        strictFail(parser, 'Unexpected close tag')\n      } else {\n        break\n      }\n    }\n\n    // didn't find it.  we already failed for strict, so just abort.\n    if (t < 0) {\n      strictFail(parser, 'Unmatched closing tag: ' + parser.tagName)\n      parser.textNode += '</' + parser.tagName + '>'\n      parser.state = S.TEXT\n      return\n    }\n    parser.tagName = tagName\n    var s = parser.tags.length\n    while (s-- > t) {\n      var tag = parser.tag = parser.tags.pop()\n      parser.tagName = parser.tag.name\n      emitNode(parser, 'onclosetag', parser.tagName)\n\n      var x = {}\n      for (var i in tag.ns) {\n        x[i] = tag.ns[i]\n      }\n\n      var parent = parser.tags[parser.tags.length - 1] || parser\n      if (parser.opt.xmlns && tag.ns !== parent.ns) {\n        // remove namespace bindings introduced by tag\n        Object.keys(tag.ns).forEach(function (p) {\n          var n = tag.ns[p]\n          emitNode(parser, 'onclosenamespace', { prefix: p, uri: n })\n        })\n      }\n    }\n    if (t === 0) parser.closedRoot = true\n    parser.tagName = parser.attribValue = parser.attribName = ''\n    parser.attribList.length = 0\n    parser.state = S.TEXT\n  }\n\n  function parseEntity (parser) {\n    var entity = parser.entity\n    var entityLC = entity.toLowerCase()\n    var num\n    var numStr = ''\n\n    if (parser.ENTITIES[entity]) {\n      return parser.ENTITIES[entity]\n    }\n    if (parser.ENTITIES[entityLC]) {\n      return parser.ENTITIES[entityLC]\n    }\n    entity = entityLC\n    if (entity.charAt(0) === '#') {\n      if (entity.charAt(1) === 'x') {\n        entity = entity.slice(2)\n        num = parseInt(entity, 16)\n        numStr = num.toString(16)\n      } else {\n        entity = entity.slice(1)\n        num = parseInt(entity, 10)\n        numStr = num.toString(10)\n      }\n    }\n    entity = entity.replace(/^0+/, '')\n    if (numStr.toLowerCase() !== entity) {\n      strictFail(parser, 'Invalid character entity')\n      return '&' + parser.entity + ';'\n    }\n\n    return String.fromCodePoint(num)\n  }\n\n  function beginWhiteSpace (parser, c) {\n    if (c === '<') {\n      parser.state = S.OPEN_WAKA\n      parser.startTagPosition = parser.position\n    } else if (not(whitespace, c)) {\n      // have to process this as a text node.\n      // weird, but happens.\n      strictFail(parser, 'Non-whitespace before first tag.')\n      parser.textNode = c\n      parser.state = S.TEXT\n    }\n  }\n\n  function charAt (chunk, i) {\n    var result = ''\n    if (i < chunk.length) {\n      result = chunk.charAt(i)\n    }\n    return result\n  }\n\n  function write (chunk) {\n    var parser = this\n    if (this.error) {\n      throw this.error\n    }\n    if (parser.closed) {\n      return error(parser,\n        'Cannot write after close. Assign an onready handler.')\n    }\n    if (chunk === null) {\n      return end(parser)\n    }\n    if (typeof chunk === 'object') {\n      chunk = chunk.toString()\n    }\n    var i = 0\n    var c = ''\n    while (true) {\n      c = charAt(chunk, i++)\n      parser.c = c\n      if (!c) {\n        break\n      }\n      if (parser.trackPosition) {\n        parser.position++\n        if (c === '\\n') {\n          parser.line++\n          parser.column = 0\n        } else {\n          parser.column++\n        }\n      }\n      switch (parser.state) {\n        case S.BEGIN:\n          parser.state = S.BEGIN_WHITESPACE\n          if (c === '\\uFEFF') {\n            continue\n          }\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.BEGIN_WHITESPACE:\n          beginWhiteSpace(parser, c)\n          continue\n\n        case S.TEXT:\n          if (parser.sawRoot && !parser.closedRoot) {\n            var starti = i - 1\n            while (c && c !== '<' && c !== '&') {\n              c = charAt(chunk, i++)\n              if (c && parser.trackPosition) {\n                parser.position++\n                if (c === '\\n') {\n                  parser.line++\n                  parser.column = 0\n                } else {\n                  parser.column++\n                }\n              }\n            }\n            parser.textNode += chunk.substring(starti, i - 1)\n          }\n          if (c === '<' && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {\n            parser.state = S.OPEN_WAKA\n            parser.startTagPosition = parser.position\n          } else {\n            if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot)) {\n              strictFail(parser, 'Text data outside of root node.')\n            }\n            if (c === '&') {\n              parser.state = S.TEXT_ENTITY\n            } else {\n              parser.textNode += c\n            }\n          }\n          continue\n\n        case S.SCRIPT:\n          // only non-strict\n          if (c === '<') {\n            parser.state = S.SCRIPT_ENDING\n          } else {\n            parser.script += c\n          }\n          continue\n\n        case S.SCRIPT_ENDING:\n          if (c === '/') {\n            parser.state = S.CLOSE_TAG\n          } else {\n            parser.script += '<' + c\n            parser.state = S.SCRIPT\n          }\n          continue\n\n        case S.OPEN_WAKA:\n          // either a /, ?, !, or text is coming next.\n          if (c === '!') {\n            parser.state = S.SGML_DECL\n            parser.sgmlDecl = ''\n          } else if (is(whitespace, c)) {\n            // wait for it...\n          } else if (is(nameStart, c)) {\n            parser.state = S.OPEN_TAG\n            parser.tagName = c\n          } else if (c === '/') {\n            parser.state = S.CLOSE_TAG\n            parser.tagName = ''\n          } else if (c === '?') {\n            parser.state = S.PROC_INST\n            parser.procInstName = parser.procInstBody = ''\n          } else {\n            strictFail(parser, 'Unencoded <')\n            // if there was some whitespace, then add that in.\n            if (parser.startTagPosition + 1 < parser.position) {\n              var pad = parser.position - parser.startTagPosition\n              c = new Array(pad).join(' ') + c\n            }\n            parser.textNode += '<' + c\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.SGML_DECL:\n          if ((parser.sgmlDecl + c).toUpperCase() === CDATA) {\n            emitNode(parser, 'onopencdata')\n            parser.state = S.CDATA\n            parser.sgmlDecl = ''\n            parser.cdata = ''\n          } else if (parser.sgmlDecl + c === '--') {\n            parser.state = S.COMMENT\n            parser.comment = ''\n            parser.sgmlDecl = ''\n          } else if ((parser.sgmlDecl + c).toUpperCase() === DOCTYPE) {\n            parser.state = S.DOCTYPE\n            if (parser.doctype || parser.sawRoot) {\n              strictFail(parser,\n                'Inappropriately located doctype declaration')\n            }\n            parser.doctype = ''\n            parser.sgmlDecl = ''\n          } else if (c === '>') {\n            emitNode(parser, 'onsgmldeclaration', parser.sgmlDecl)\n            parser.sgmlDecl = ''\n            parser.state = S.TEXT\n          } else if (is(quote, c)) {\n            parser.state = S.SGML_DECL_QUOTED\n            parser.sgmlDecl += c\n          } else {\n            parser.sgmlDecl += c\n          }\n          continue\n\n        case S.SGML_DECL_QUOTED:\n          if (c === parser.q) {\n            parser.state = S.SGML_DECL\n            parser.q = ''\n          }\n          parser.sgmlDecl += c\n          continue\n\n        case S.DOCTYPE:\n          if (c === '>') {\n            parser.state = S.TEXT\n            emitNode(parser, 'ondoctype', parser.doctype)\n            parser.doctype = true // just remember that we saw it.\n          } else {\n            parser.doctype += c\n            if (c === '[') {\n              parser.state = S.DOCTYPE_DTD\n            } else if (is(quote, c)) {\n              parser.state = S.DOCTYPE_QUOTED\n              parser.q = c\n            }\n          }\n          continue\n\n        case S.DOCTYPE_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.q = ''\n            parser.state = S.DOCTYPE\n          }\n          continue\n\n        case S.DOCTYPE_DTD:\n          parser.doctype += c\n          if (c === ']') {\n            parser.state = S.DOCTYPE\n          } else if (is(quote, c)) {\n            parser.state = S.DOCTYPE_DTD_QUOTED\n            parser.q = c\n          }\n          continue\n\n        case S.DOCTYPE_DTD_QUOTED:\n          parser.doctype += c\n          if (c === parser.q) {\n            parser.state = S.DOCTYPE_DTD\n            parser.q = ''\n          }\n          continue\n\n        case S.COMMENT:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDING\n          } else {\n            parser.comment += c\n          }\n          continue\n\n        case S.COMMENT_ENDING:\n          if (c === '-') {\n            parser.state = S.COMMENT_ENDED\n            parser.comment = textopts(parser.opt, parser.comment)\n            if (parser.comment) {\n              emitNode(parser, 'oncomment', parser.comment)\n            }\n            parser.comment = ''\n          } else {\n            parser.comment += '-' + c\n            parser.state = S.COMMENT\n          }\n          continue\n\n        case S.COMMENT_ENDED:\n          if (c !== '>') {\n            strictFail(parser, 'Malformed comment')\n            // allow <!-- blah -- bloo --> in non-strict mode,\n            // which is a comment of \" blah -- bloo \"\n            parser.comment += '--' + c\n            parser.state = S.COMMENT\n          } else {\n            parser.state = S.TEXT\n          }\n          continue\n\n        case S.CDATA:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING\n          } else {\n            parser.cdata += c\n          }\n          continue\n\n        case S.CDATA_ENDING:\n          if (c === ']') {\n            parser.state = S.CDATA_ENDING_2\n          } else {\n            parser.cdata += ']' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.CDATA_ENDING_2:\n          if (c === '>') {\n            if (parser.cdata) {\n              emitNode(parser, 'oncdata', parser.cdata)\n            }\n            emitNode(parser, 'onclosecdata')\n            parser.cdata = ''\n            parser.state = S.TEXT\n          } else if (c === ']') {\n            parser.cdata += ']'\n          } else {\n            parser.cdata += ']]' + c\n            parser.state = S.CDATA\n          }\n          continue\n\n        case S.PROC_INST:\n          if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else if (is(whitespace, c)) {\n            parser.state = S.PROC_INST_BODY\n          } else {\n            parser.procInstName += c\n          }\n          continue\n\n        case S.PROC_INST_BODY:\n          if (!parser.procInstBody && is(whitespace, c)) {\n            continue\n          } else if (c === '?') {\n            parser.state = S.PROC_INST_ENDING\n          } else {\n            parser.procInstBody += c\n          }\n          continue\n\n        case S.PROC_INST_ENDING:\n          if (c === '>') {\n            emitNode(parser, 'onprocessinginstruction', {\n              name: parser.procInstName,\n              body: parser.procInstBody\n            })\n            parser.procInstName = parser.procInstBody = ''\n            parser.state = S.TEXT\n          } else {\n            parser.procInstBody += '?' + c\n            parser.state = S.PROC_INST_BODY\n          }\n          continue\n\n        case S.OPEN_TAG:\n          if (is(nameBody, c)) {\n            parser.tagName += c\n          } else {\n            newTag(parser)\n            if (c === '>') {\n              openTag(parser)\n            } else if (c === '/') {\n              parser.state = S.OPEN_TAG_SLASH\n            } else {\n              if (not(whitespace, c)) {\n                strictFail(parser, 'Invalid character in tag name')\n              }\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.OPEN_TAG_SLASH:\n          if (c === '>') {\n            openTag(parser, true)\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Forward-slash in opening tag not followed by >')\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.ATTRIB:\n          // haven't read the attribute name yet.\n          if (is(whitespace, c)) {\n            continue\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (is(nameStart, c)) {\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (c === '>') {\n            strictFail(parser, 'Attribute without value')\n            parser.attribValue = parser.attribName\n            attrib(parser)\n            openTag(parser)\n          } else if (is(whitespace, c)) {\n            parser.state = S.ATTRIB_NAME_SAW_WHITE\n          } else if (is(nameBody, c)) {\n            parser.attribName += c\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_NAME_SAW_WHITE:\n          if (c === '=') {\n            parser.state = S.ATTRIB_VALUE\n          } else if (is(whitespace, c)) {\n            continue\n          } else {\n            strictFail(parser, 'Attribute without value')\n            parser.tag.attributes[parser.attribName] = ''\n            parser.attribValue = ''\n            emitNode(parser, 'onattribute', {\n              name: parser.attribName,\n              value: ''\n            })\n            parser.attribName = ''\n            if (c === '>') {\n              openTag(parser)\n            } else if (is(nameStart, c)) {\n              parser.attribName = c\n              parser.state = S.ATTRIB_NAME\n            } else {\n              strictFail(parser, 'Invalid attribute name')\n              parser.state = S.ATTRIB\n            }\n          }\n          continue\n\n        case S.ATTRIB_VALUE:\n          if (is(whitespace, c)) {\n            continue\n          } else if (is(quote, c)) {\n            parser.q = c\n            parser.state = S.ATTRIB_VALUE_QUOTED\n          } else {\n            strictFail(parser, 'Unquoted attribute value')\n            parser.state = S.ATTRIB_VALUE_UNQUOTED\n            parser.attribValue = c\n          }\n          continue\n\n        case S.ATTRIB_VALUE_QUOTED:\n          if (c !== parser.q) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_Q\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          parser.q = ''\n          parser.state = S.ATTRIB_VALUE_CLOSED\n          continue\n\n        case S.ATTRIB_VALUE_CLOSED:\n          if (is(whitespace, c)) {\n            parser.state = S.ATTRIB\n          } else if (c === '>') {\n            openTag(parser)\n          } else if (c === '/') {\n            parser.state = S.OPEN_TAG_SLASH\n          } else if (is(nameStart, c)) {\n            strictFail(parser, 'No whitespace between attributes')\n            parser.attribName = c\n            parser.attribValue = ''\n            parser.state = S.ATTRIB_NAME\n          } else {\n            strictFail(parser, 'Invalid attribute name')\n          }\n          continue\n\n        case S.ATTRIB_VALUE_UNQUOTED:\n          if (not(attribEnd, c)) {\n            if (c === '&') {\n              parser.state = S.ATTRIB_VALUE_ENTITY_U\n            } else {\n              parser.attribValue += c\n            }\n            continue\n          }\n          attrib(parser)\n          if (c === '>') {\n            openTag(parser)\n          } else {\n            parser.state = S.ATTRIB\n          }\n          continue\n\n        case S.CLOSE_TAG:\n          if (!parser.tagName) {\n            if (is(whitespace, c)) {\n              continue\n            } else if (not(nameStart, c)) {\n              if (parser.script) {\n                parser.script += '</' + c\n                parser.state = S.SCRIPT\n              } else {\n                strictFail(parser, 'Invalid tagname in closing tag.')\n              }\n            } else {\n              parser.tagName = c\n            }\n          } else if (c === '>') {\n            closeTag(parser)\n          } else if (is(nameBody, c)) {\n            parser.tagName += c\n          } else if (parser.script) {\n            parser.script += '</' + parser.tagName\n            parser.tagName = ''\n            parser.state = S.SCRIPT\n          } else {\n            if (not(whitespace, c)) {\n              strictFail(parser, 'Invalid tagname in closing tag')\n            }\n            parser.state = S.CLOSE_TAG_SAW_WHITE\n          }\n          continue\n\n        case S.CLOSE_TAG_SAW_WHITE:\n          if (is(whitespace, c)) {\n            continue\n          }\n          if (c === '>') {\n            closeTag(parser)\n          } else {\n            strictFail(parser, 'Invalid characters in closing tag')\n          }\n          continue\n\n        case S.TEXT_ENTITY:\n        case S.ATTRIB_VALUE_ENTITY_Q:\n        case S.ATTRIB_VALUE_ENTITY_U:\n          var returnState\n          var buffer\n          switch (parser.state) {\n            case S.TEXT_ENTITY:\n              returnState = S.TEXT\n              buffer = 'textNode'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_Q:\n              returnState = S.ATTRIB_VALUE_QUOTED\n              buffer = 'attribValue'\n              break\n\n            case S.ATTRIB_VALUE_ENTITY_U:\n              returnState = S.ATTRIB_VALUE_UNQUOTED\n              buffer = 'attribValue'\n              break\n          }\n\n          if (c === ';') {\n            parser[buffer] += parseEntity(parser)\n            parser.entity = ''\n            parser.state = returnState\n          } else if (is(parser.entity.length ? entityBody : entityStart, c)) {\n            parser.entity += c\n          } else {\n            strictFail(parser, 'Invalid character in entity name')\n            parser[buffer] += '&' + parser.entity + c\n            parser.entity = ''\n            parser.state = returnState\n          }\n\n          continue\n\n        default:\n          throw new Error(parser, 'Unknown state: ' + parser.state)\n      }\n    } // while\n\n    if (parser.position >= parser.bufferCheckPosition) {\n      checkBufferLength(parser)\n    }\n    return parser\n  }\n\n  /*! http://mths.be/fromcodepoint v0.1.0 by @mathias */\n  if (!String.fromCodePoint) {\n    (function () {\n      var stringFromCharCode = String.fromCharCode\n      var floor = Math.floor\n      var fromCodePoint = function () {\n        var MAX_SIZE = 0x4000\n        var codeUnits = []\n        var highSurrogate\n        var lowSurrogate\n        var index = -1\n        var length = arguments.length\n        if (!length) {\n          return ''\n        }\n        var result = ''\n        while (++index < length) {\n          var codePoint = Number(arguments[index])\n          if (\n            !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`\n            codePoint < 0 || // not a valid Unicode code point\n            codePoint > 0x10FFFF || // not a valid Unicode code point\n            floor(codePoint) !== codePoint // not an integer\n          ) {\n            throw RangeError('Invalid code point: ' + codePoint)\n          }\n          if (codePoint <= 0xFFFF) { // BMP code point\n            codeUnits.push(codePoint)\n          } else { // Astral code point; split in surrogate halves\n            // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n            codePoint -= 0x10000\n            highSurrogate = (codePoint >> 10) + 0xD800\n            lowSurrogate = (codePoint % 0x400) + 0xDC00\n            codeUnits.push(highSurrogate, lowSurrogate)\n          }\n          if (index + 1 === length || codeUnits.length > MAX_SIZE) {\n            result += stringFromCharCode.apply(null, codeUnits)\n            codeUnits.length = 0\n          }\n        }\n        return result\n      }\n      if (Object.defineProperty) {\n        Object.defineProperty(String, 'fromCodePoint', {\n          value: fromCodePoint,\n          configurable: true,\n          writable: true\n        })\n      } else {\n        String.fromCodePoint = fromCodePoint\n      }\n    }())\n  }\n})(typeof exports === 'undefined' ? this.sax = {} : exports)\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}