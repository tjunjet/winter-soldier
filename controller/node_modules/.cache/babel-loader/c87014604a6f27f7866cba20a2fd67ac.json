{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventsBase2 = require('./EventsBase');\n\nvar _EventsBase3 = _interopRequireDefault(_EventsBase2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* These are internal events that should not be needed at the player level.\n* If you find and event in here that you would like access to from MediaPlayer level\n* please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new\n* @class\n* @ignore\n*/\n\n\nvar CoreEvents = function (_EventsBase) {\n  _inherits(CoreEvents, _EventsBase);\n\n  function CoreEvents() {\n    _classCallCheck(this, CoreEvents);\n\n    var _this = _possibleConstructorReturn(this, (CoreEvents.__proto__ || Object.getPrototypeOf(CoreEvents)).call(this));\n\n    _this.ATTEMPT_BACKGROUND_SYNC = 'attemptBackgroundSync';\n    _this.BUFFERING_COMPLETED = 'bufferingCompleted';\n    _this.BUFFER_CLEARED = 'bufferCleared';\n    _this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\n    _this.BYTES_APPENDED = 'bytesAppended';\n    _this.BYTES_APPENDED_END_FRAGMENT = 'bytesAppendedEndFragment';\n    _this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\n    _this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';\n    _this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\n    _this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\n    _this.INBAND_EVENTS = 'inbandEvents';\n    _this.INITIALIZATION_LOADED = 'initializationLoaded';\n    _this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\n    _this.INIT_FRAGMENT_NEEDED = 'initFragmentNeeded';\n    _this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\n    _this.ORIGINAL_MANIFEST_LOADED = 'originalManifestLoaded';\n    _this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\n    _this.LOADING_COMPLETED = 'loadingCompleted';\n    _this.LOADING_PROGRESS = 'loadingProgress';\n    _this.LOADING_DATA_PROGRESS = 'loadingDataProgress';\n    _this.LOADING_ABANDONED = 'loadingAborted';\n    _this.MANIFEST_UPDATED = 'manifestUpdated';\n    _this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\n    _this.MEDIA_FRAGMENT_NEEDED = 'mediaFragmentNeeded';\n    _this.QUOTA_EXCEEDED = 'quotaExceeded';\n    _this.REPRESENTATION_UPDATE_STARTED = 'representationUpdateStarted';\n    _this.REPRESENTATION_UPDATE_COMPLETED = 'representationUpdateCompleted';\n    _this.SEGMENTS_LOADED = 'segmentsLoaded';\n    _this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';\n    _this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\n    _this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\n    _this.STREAMS_COMPOSED = 'streamsComposed';\n    _this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\n    _this.STREAM_COMPLETED = 'streamCompleted';\n    _this.TEXT_TRACKS_QUEUE_INITIALIZED = 'textTracksQueueInitialized';\n    _this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\n    _this.UPDATE_TIME_SYNC_OFFSET = 'updateTimeSyncOffset';\n    _this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\n    _this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';\n    _this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\n    _this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\n    _this.XLINK_READY = 'xlinkReady';\n    _this.SEGMENTBASE_INIT_REQUEST_NEEDED = 'segmentBaseInitRequestNeeded';\n    _this.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED = 'segmentBaseSegmentsListRequestNeeded';\n    _this.SEEK_TARGET = 'seekTarget';\n    return _this;\n  }\n\n  return CoreEvents;\n}(_EventsBase3.default);\n\nexports.default = CoreEvents;","map":{"version":3,"mappings":";;;;;;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9BA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;;;;;;;;IAOMA,U;;;EACF,sBAAe;IAAAC;;IAAA;;IAEXC,MAAKC,uBAAL,GAA+B,uBAA/B;IACAD,MAAKE,mBAAL,GAA2B,oBAA3B;IACAF,MAAKG,cAAL,GAAsB,eAAtB;IACAH,MAAKI,oBAAL,GAA4B,oBAA5B;IACAJ,MAAKK,cAAL,GAAsB,eAAtB;IACAL,MAAKM,2BAAL,GAAmC,0BAAnC;IACAN,MAAKO,6BAAL,GAAqC,4BAArC;IACAP,MAAKQ,qBAAL,GAA6B,qBAA7B;IACAR,MAAKS,qBAAL,GAA6B,qBAA7B;IACAT,MAAKU,mBAAL,GAA2B,mBAA3B;IACAV,MAAKW,aAAL,GAAqB,cAArB;IACAX,MAAKY,qBAAL,GAA6B,sBAA7B;IACAZ,MAAKa,oBAAL,GAA4B,oBAA5B;IACAb,MAAKc,oBAAL,GAA4B,oBAA5B;IACAd,MAAKe,wBAAL,GAAgC,wBAAhC;IACAf,MAAKgB,wBAAL,GAAgC,wBAAhC;IACAhB,MAAKiB,0BAAL,GAAkC,yBAAlC;IACAjB,MAAKkB,iBAAL,GAAyB,kBAAzB;IACAlB,MAAKmB,gBAAL,GAAwB,iBAAxB;IACAnB,MAAKoB,qBAAL,GAA6B,qBAA7B;IACApB,MAAKqB,iBAAL,GAAyB,gBAAzB;IACArB,MAAKsB,gBAAL,GAAwB,iBAAxB;IACAtB,MAAKuB,qBAAL,GAA6B,qBAA7B;IACAvB,MAAKwB,qBAAL,GAA6B,qBAA7B;IACAxB,MAAKyB,cAAL,GAAsB,eAAtB;IACAzB,MAAK0B,6BAAL,GAAqC,6BAArC;IACA1B,MAAK2B,+BAAL,GAAuC,+BAAvC;IACA3B,MAAK4B,eAAL,GAAuB,gBAAvB;IACA5B,MAAK6B,8BAAL,GAAsC,6BAAtC;IACA7B,MAAK8B,kCAAL,GAA0C,iCAA1C;IACA9B,MAAK+B,6BAAL,GAAqC,6BAArC;IACA/B,MAAKgC,gBAAL,GAAwB,iBAAxB;IACAhC,MAAKiC,0BAAL,GAAkC,0BAAlC;IACAjC,MAAKkC,gBAAL,GAAwB,iBAAxB;IACAlC,MAAKmC,6BAAL,GAAqC,4BAArC;IACAnC,MAAKoC,8BAAL,GAAsC,6BAAtC;IACApC,MAAKqC,uBAAL,GAA+B,sBAA/B;IACArC,MAAKsC,qBAAL,GAA6B,qBAA7B;IACAtC,MAAKuC,oBAAL,GAA4B,oBAA5B;IACAvC,MAAKwC,sBAAL,GAA8B,sBAA9B;IACAxC,MAAKyC,oBAAL,GAA4B,oBAA5B;IACAzC,MAAK0C,WAAL,GAAmB,YAAnB;IACA1C,MAAK2C,+BAAL,GAAuC,8BAAvC;IACA3C,MAAK4C,uCAAL,GAA+C,sCAA/C;IACA5C,MAAK6C,WAAL,GAAmB,YAAnB;IA9CW;;;;EADMC,oB;;kBAmDVhD,U","names":["CoreEvents","_classCallCheck","_this","ATTEMPT_BACKGROUND_SYNC","BUFFERING_COMPLETED","BUFFER_CLEARED","BUFFER_LEVEL_UPDATED","BYTES_APPENDED","BYTES_APPENDED_END_FRAGMENT","CHECK_FOR_EXISTENCE_COMPLETED","CURRENT_TRACK_CHANGED","DATA_UPDATE_COMPLETED","DATA_UPDATE_STARTED","INBAND_EVENTS","INITIALIZATION_LOADED","INIT_FRAGMENT_LOADED","INIT_FRAGMENT_NEEDED","INTERNAL_MANIFEST_LOADED","ORIGINAL_MANIFEST_LOADED","LIVE_EDGE_SEARCH_COMPLETED","LOADING_COMPLETED","LOADING_PROGRESS","LOADING_DATA_PROGRESS","LOADING_ABANDONED","MANIFEST_UPDATED","MEDIA_FRAGMENT_LOADED","MEDIA_FRAGMENT_NEEDED","QUOTA_EXCEEDED","REPRESENTATION_UPDATE_STARTED","REPRESENTATION_UPDATE_COMPLETED","SEGMENTS_LOADED","SERVICE_LOCATION_BLACKLIST_ADD","SERVICE_LOCATION_BLACKLIST_CHANGED","SOURCEBUFFER_REMOVE_COMPLETED","STREAMS_COMPOSED","STREAM_BUFFERING_COMPLETED","STREAM_COMPLETED","TEXT_TRACKS_QUEUE_INITIALIZED","TIME_SYNCHRONIZATION_COMPLETED","UPDATE_TIME_SYNC_OFFSET","URL_RESOLUTION_FAILED","VIDEO_CHUNK_RECEIVED","WALLCLOCK_TIME_UPDATED","XLINK_ELEMENT_LOADED","XLINK_READY","SEGMENTBASE_INIT_REQUEST_NEEDED","SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED","SEEK_TARGET","EventsBase"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/core/events/CoreEvents.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from './EventsBase';\n\n/**\n * These are internal events that should not be needed at the player level.\n * If you find and event in here that you would like access to from MediaPlayer level\n * please add an issue at https://github.com/Dash-Industry-Forum/dash.js/issues/new\n * @class\n * @ignore\n */\nclass CoreEvents extends EventsBase {\n    constructor () {\n        super();\n        this.ATTEMPT_BACKGROUND_SYNC = 'attemptBackgroundSync';\n        this.BUFFERING_COMPLETED = 'bufferingCompleted';\n        this.BUFFER_CLEARED = 'bufferCleared';\n        this.BUFFER_LEVEL_UPDATED = 'bufferLevelUpdated';\n        this.BYTES_APPENDED = 'bytesAppended';\n        this.BYTES_APPENDED_END_FRAGMENT = 'bytesAppendedEndFragment';\n        this.CHECK_FOR_EXISTENCE_COMPLETED = 'checkForExistenceCompleted';\n        this.CURRENT_TRACK_CHANGED = 'currentTrackChanged';\n        this.DATA_UPDATE_COMPLETED = 'dataUpdateCompleted';\n        this.DATA_UPDATE_STARTED = 'dataUpdateStarted';\n        this.INBAND_EVENTS = 'inbandEvents';\n        this.INITIALIZATION_LOADED = 'initializationLoaded';\n        this.INIT_FRAGMENT_LOADED = 'initFragmentLoaded';\n        this.INIT_FRAGMENT_NEEDED = 'initFragmentNeeded';\n        this.INTERNAL_MANIFEST_LOADED = 'internalManifestLoaded';\n        this.ORIGINAL_MANIFEST_LOADED = 'originalManifestLoaded';\n        this.LIVE_EDGE_SEARCH_COMPLETED = 'liveEdgeSearchCompleted';\n        this.LOADING_COMPLETED = 'loadingCompleted';\n        this.LOADING_PROGRESS = 'loadingProgress';\n        this.LOADING_DATA_PROGRESS = 'loadingDataProgress';\n        this.LOADING_ABANDONED = 'loadingAborted';\n        this.MANIFEST_UPDATED = 'manifestUpdated';\n        this.MEDIA_FRAGMENT_LOADED = 'mediaFragmentLoaded';\n        this.MEDIA_FRAGMENT_NEEDED = 'mediaFragmentNeeded';\n        this.QUOTA_EXCEEDED = 'quotaExceeded';\n        this.REPRESENTATION_UPDATE_STARTED = 'representationUpdateStarted';\n        this.REPRESENTATION_UPDATE_COMPLETED = 'representationUpdateCompleted';\n        this.SEGMENTS_LOADED = 'segmentsLoaded';\n        this.SERVICE_LOCATION_BLACKLIST_ADD = 'serviceLocationBlacklistAdd';\n        this.SERVICE_LOCATION_BLACKLIST_CHANGED = 'serviceLocationBlacklistChanged';\n        this.SOURCEBUFFER_REMOVE_COMPLETED = 'sourceBufferRemoveCompleted';\n        this.STREAMS_COMPOSED = 'streamsComposed';\n        this.STREAM_BUFFERING_COMPLETED = 'streamBufferingCompleted';\n        this.STREAM_COMPLETED = 'streamCompleted';\n        this.TEXT_TRACKS_QUEUE_INITIALIZED = 'textTracksQueueInitialized';\n        this.TIME_SYNCHRONIZATION_COMPLETED = 'timeSynchronizationComplete';\n        this.UPDATE_TIME_SYNC_OFFSET = 'updateTimeSyncOffset';\n        this.URL_RESOLUTION_FAILED = 'urlResolutionFailed';\n        this.VIDEO_CHUNK_RECEIVED = 'videoChunkReceived';\n        this.WALLCLOCK_TIME_UPDATED = 'wallclockTimeUpdated';\n        this.XLINK_ELEMENT_LOADED = 'xlinkElementLoaded';\n        this.XLINK_READY = 'xlinkReady';\n        this.SEGMENTBASE_INIT_REQUEST_NEEDED = 'segmentBaseInitRequestNeeded';\n        this.SEGMENTBASE_SEGMENTSLIST_REQUEST_NEEDED = 'segmentBaseSegmentsListRequestNeeded';\n        this.SEEK_TARGET = 'seekTarget';\n    }\n}\n\nexport default CoreEvents;\n"]},"metadata":{},"sourceType":"script"}