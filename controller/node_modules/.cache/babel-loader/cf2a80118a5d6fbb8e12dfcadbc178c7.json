{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _HandlerHelpers = require('../../utils/HandlerHelpers');\n\nvar _HandlerHelpers2 = _interopRequireDefault(_HandlerHelpers);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction BufferLevelHandler(config) {\n  config = config || {};\n  var instance = void 0,\n      reportingController = void 0,\n      n = void 0,\n      name = void 0,\n      interval = void 0,\n      lastReportedTime = void 0;\n  var context = this.context;\n  var handlerHelpers = (0, _HandlerHelpers2.default)(context).getInstance();\n  var storedVOs = [];\n  var metricsConstants = config.metricsConstants;\n\n  function getLowestBufferLevelVO() {\n    try {\n      return Object.keys(storedVOs).map(function (key) {\n        return storedVOs[key];\n      }).reduce(function (a, b) {\n        return a.level < b.level ? a : b;\n      });\n    } catch (e) {\n      return;\n    }\n  }\n\n  function intervalCallback() {\n    var vo = getLowestBufferLevelVO();\n\n    if (vo) {\n      if (lastReportedTime !== vo.t) {\n        lastReportedTime = vo.t;\n        reportingController.report(name, vo);\n      }\n    }\n  }\n\n  function initialize(basename, rc, n_ms) {\n    if (rc) {\n      // this will throw if n is invalid, to be\n      // caught by the initialize caller.\n      n = handlerHelpers.validateN(n_ms);\n      reportingController = rc;\n      name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n      interval = setInterval(intervalCallback, n);\n    }\n  }\n\n  function reset() {\n    clearInterval(interval);\n    interval = null;\n    n = 0;\n    reportingController = null;\n    lastReportedTime = null;\n  }\n\n  function handleNewMetric(metric, vo, type) {\n    if (metric === metricsConstants.BUFFER_LEVEL) {\n      storedVOs[type] = vo;\n    }\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset,\n    handleNewMetric: handleNewMetric\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexports.default = dashjs.FactoryMaker.getClassFactory(BufferLevelHandler);\n/* jshint ignore:line */","map":{"version":3,"mappings":";;;;;;AA+BA;;;;;;;;AAEA;;AAAA,SAASA,kBAAT,CAA4BC,MAA5B,EAAoC;EAEhCA,SAASA,UAAU,EAAnBA;EACA,IAAIC,iBAAJ;EAAA,IACIC,4BADJ;EAAA,IAEIC,UAFJ;EAAA,IAGIC,aAHJ;EAAA,IAIIC,iBAJJ;EAAA,IAKIC,yBALJ;EAOA,IAAIC,UAAU,KAAKA,OAAnB;EACA,IAAIC,iBAAiB,8BAAeD,OAAf,EAAwBE,WAAxB,EAArB;EAEA,IAAIC,YAAY,EAAhB;EAEA,IAAMC,mBAAmBX,OAAOW,gBAAhC;;EAEA,SAASC,sBAAT,GAAkC;IAC9B,IAAI;MACA,OAAOC,OAAOC,IAAPD,CAAYH,SAAZG,EAAuBE,GAAvBF,CACH;QAAA,OAAOH,UAAUM,GAAVN,CAAP;MADG,GAELO,MAFKJ,CAGH,UAACK,CAAD,EAAIC,CAAJ,EAAU;QACN,OAAQD,EAAEE,KAAFF,GAAUC,EAAEC,KAAZF,GAAqBA,CAArBA,GAAyBC,CAAjC;MAJD,EAAP;IAOF,CARF,CAQE,OAAOE,CAAP,EAAU;MACR;IAEP;EAED;;EAAA,SAASC,gBAAT,GAA4B;IACxB,IAAIC,KAAKX,wBAAT;;IAEA,IAAIW,EAAJ,EAAQ;MACJ,IAAIjB,qBAAqBiB,GAAGC,CAA5B,EAA+B;QAC3BlB,mBAAmBiB,GAAGC,CAAtBlB;QACAJ,oBAAoBuB,MAApBvB,CAA2BE,IAA3BF,EAAiCqB,EAAjCrB;MAEP;IACJ;EAED;;EAAA,SAASwB,UAAT,CAAoBC,QAApB,EAA8BC,EAA9B,EAAkCC,IAAlC,EAAwC;IACpC,IAAID,EAAJ,EAAQ;MACJ;MACA;MACAzB,IAAIK,eAAesB,SAAftB,CAAyBqB,IAAzBrB,CAAJL;MACAD,sBAAsB0B,EAAtB1B;MACAE,OAAOI,eAAeuB,yBAAfvB,CAAyCmB,QAAzCnB,EAAmDqB,IAAnDrB,CAAPJ;MACAC,WAAW2B,YAAYV,gBAAZU,EAA8B7B,CAA9B6B,CAAX3B;IAEP;EAED;;EAAA,SAAS4B,KAAT,GAAiB;IACbC,cAAc7B,QAAd6B;IACA7B,WAAW,IAAXA;IACAF,IAAI,CAAJA;IACAD,sBAAsB,IAAtBA;IACAI,mBAAmB,IAAnBA;EAGJ;;EAAA,SAAS6B,eAAT,CAAyBC,MAAzB,EAAiCb,EAAjC,EAAqCc,IAArC,EAA2C;IACvC,IAAID,WAAWzB,iBAAiB2B,YAAhC,EAA8C;MAC1C5B,UAAU2B,IAAV3B,IAAkBa,EAAlBb;IAEP;EAEDT;;EAAAA,WAAW;IACPyB,YAAoBA,UADb;IAEPO,OAAoBA,KAFb;IAGPE,iBAAoBA;EAHb,CAAXlC;EAMA,OAAOA,QAAP;AA1GJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GAF,mBAAmBwC,qBAAnBxC,GAA2C,oBAA3CA;kBACeyC,OAAOC,YAAPD,CAAoBE,eAApBF,CAAoCzC,kBAApCyC,C;AAAyD","names":["BufferLevelHandler","config","instance","reportingController","n","name","interval","lastReportedTime","context","handlerHelpers","getInstance","storedVOs","metricsConstants","getLowestBufferLevelVO","Object","keys","map","key","reduce","a","b","level","e","intervalCallback","vo","t","report","initialize","basename","rc","n_ms","validateN","reconstructFullMetricName","setInterval","reset","clearInterval","handleNewMetric","metric","type","BUFFER_LEVEL","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/metrics/handlers/BufferLevelHandler.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport HandlerHelpers from '../../utils/HandlerHelpers';\n\nfunction BufferLevelHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController,\n        n,\n        name,\n        interval,\n        lastReportedTime;\n\n    let context = this.context;\n    let handlerHelpers = HandlerHelpers(context).getInstance();\n\n    let storedVOs = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function getLowestBufferLevelVO() {\n        try {\n            return Object.keys(storedVOs).map(\n                key => storedVOs[key]\n            ).reduce(\n                (a, b) => {\n                    return (a.level < b.level) ? a : b;\n                }\n            );\n        } catch (e) {\n            return;\n        }\n    }\n\n    function intervalCallback() {\n        let vo = getLowestBufferLevelVO();\n\n        if (vo) {\n            if (lastReportedTime !== vo.t) {\n                lastReportedTime = vo.t;\n                reportingController.report(name, vo);\n            }\n        }\n    }\n\n    function initialize(basename, rc, n_ms) {\n        if (rc) {\n            // this will throw if n is invalid, to be\n            // caught by the initialize caller.\n            n = handlerHelpers.validateN(n_ms);\n            reportingController = rc;\n            name = handlerHelpers.reconstructFullMetricName(basename, n_ms);\n            interval = setInterval(intervalCallback, n);\n        }\n    }\n\n    function reset() {\n        clearInterval(interval);\n        interval = null;\n        n = 0;\n        reportingController = null;\n        lastReportedTime = null;\n    }\n\n    function handleNewMetric(metric, vo, type) {\n        if (metric === metricsConstants.BUFFER_LEVEL) {\n            storedVOs[type] = vo;\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nBufferLevelHandler.__dashjs_factory_name = 'BufferLevelHandler';\nexport default dashjs.FactoryMaker.getClassFactory(BufferLevelHandler); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}