{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventsBase2 = require('../../core/events/EventsBase');\n\nvar _EventsBase3 = _interopRequireDefault(_EventsBase2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* @class\n*/\n\n\nvar ProtectionEvents = function (_EventsBase) {\n  _inherits(ProtectionEvents, _EventsBase);\n  /**\n  * @description Public facing external events to be used when including protection package.\n  * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n  * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n  */\n\n\n  function ProtectionEvents() {\n    _classCallCheck(this, ProtectionEvents);\n    /**\n    * Event ID for events delivered when the protection set receives\n    * a key message from the CDM\n    *\n    * @ignore\n    */\n\n\n    var _this = _possibleConstructorReturn(this, (ProtectionEvents.__proto__ || Object.getPrototypeOf(ProtectionEvents)).call(this));\n\n    _this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n    /**\n    * Event ID for events delivered when a key system selection procedure\n    * completes\n    * @ignore\n    */\n\n    _this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n    /**\n    * Event ID for events delivered when the status of one decryption keys has changed\n    * @ignore\n    */\n\n    _this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\n    /**\n    * Event ID for events delivered when a new key has been added\n    *\n    * @constant\n    * @deprecated The latest versions of the EME specification no longer\n    * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n    * is preferred.\n    * @event ProtectionEvents#KEY_ADDED\n    */\n\n    _this.KEY_ADDED = 'public_keyAdded';\n    /**\n    * Event ID for events delivered when an error is encountered by the CDM\n    * while processing a license server response message\n    * @event ProtectionEvents#KEY_ERROR\n    */\n\n    _this.KEY_ERROR = 'public_keyError';\n    /**\n    * Event ID for events delivered when the protection set receives\n    * a key message from the CDM\n    * @event ProtectionEvents#KEY_MESSAGE\n    */\n\n    _this.KEY_MESSAGE = 'public_keyMessage';\n    /**\n    * Event ID for events delivered when a key session close\n    * process has completed\n    * @event ProtectionEvents#KEY_SESSION_CLOSED\n    */\n\n    _this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n    /**\n    * Event ID for events delivered when a new key sessions creation\n    * process has completed\n    * @event ProtectionEvents#KEY_SESSION_CREATED\n    */\n\n    _this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n    /**\n    * Event ID for events delivered when a key session removal\n    * process has completed\n    * @event ProtectionEvents#KEY_SESSION_REMOVED\n    */\n\n    _this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n    /**\n    * Event ID for events delivered when the status of one or more\n    * decryption keys has changed\n    * @event ProtectionEvents#KEY_STATUSES_CHANGED\n    */\n\n    _this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n    /**\n    * Event ID for events delivered when a key system access procedure\n    * has completed\n    * @ignore\n    */\n\n    _this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\n    /**\n    * Event ID for events delivered when a key system selection procedure\n    * completes\n    * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n    */\n\n    _this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n    /**\n    * Event ID for events delivered when a license request procedure\n    * has completed\n    * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n    */\n\n    _this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n    /**\n    * Sending a license rquest\n    * @event ProtectionEvents#LICENSE_REQUEST_SENDING\n    */\n\n    _this.LICENSE_REQUEST_SENDING = 'public_licenseRequestSending';\n    /**\n    * Event ID for needkey/encrypted events\n    * @ignore\n    */\n\n    _this.NEED_KEY = 'needkey';\n    /**\n    * Event ID for events delivered when the Protection system is detected and created.\n    * @event ProtectionEvents#PROTECTION_CREATED\n    */\n\n    _this.PROTECTION_CREATED = 'public_protectioncreated';\n    /**\n    * Event ID for events delivered when the Protection system is destroyed.\n    * @event ProtectionEvents#PROTECTION_DESTROYED\n    */\n\n    _this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n    /**\n    * Event ID for events delivered when a new server certificate has\n    * been delivered to the CDM\n    * @ignore\n    */\n\n    _this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n    /**\n    * Event ID for events delivered when the process of shutting down\n    * a protection set has completed\n    * @ignore\n    */\n\n    _this.TEARDOWN_COMPLETE = 'protectionTeardownComplete';\n    /**\n    * Event ID for events delivered when a HTMLMediaElement has been\n    * associated with the protection set\n    * @ignore\n    */\n\n    _this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    return _this;\n  }\n\n  return ProtectionEvents;\n}(_EventsBase3.default);\n\nvar protectionEvents = new ProtectionEvents();\nexports.default = protectionEvents;","map":{"version":3,"mappings":";;;;;;AA8BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA9BA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;IAGMA,gB;;EACF;;;;;;;EAKA,4BAAe;IAAAC;IAGX;;;;;;;;IAHW;;IASXC,MAAKC,oBAAL,GAA4B,oBAA5B;IAEA;;;;;;IAKAD,MAAKE,4BAAL,GAAoC,2BAApC;IAEA;;;;;IAIAF,MAAKG,2BAAL,GAAmC,0BAAnC;IAEA;;;;;;;;;;IASAH,MAAKI,SAAL,GAAiB,iBAAjB;IACA;;;;;;IAKAJ,MAAKK,SAAL,GAAiB,iBAAjB;IAEA;;;;;;IAKAL,MAAKM,WAAL,GAAmB,mBAAnB;IAEA;;;;;;IAKAN,MAAKO,kBAAL,GAA0B,yBAA1B;IAEA;;;;;;IAKAP,MAAKQ,mBAAL,GAA2B,0BAA3B;IAEA;;;;;;IAKAR,MAAKS,mBAAL,GAA2B,0BAA3B;IAEA;;;;;;IAKAT,MAAKU,oBAAL,GAA4B,2BAA5B;IAEA;;;;;;IAKAV,MAAKW,0BAAL,GAAkC,gCAAlC;IAEA;;;;;;IAKAX,MAAKY,mBAAL,GAA2B,0BAA3B;IAEA;;;;;;IAKAZ,MAAKa,wBAAL,GAAgC,+BAAhC;IAEA;;;;;IAIAb,MAAKc,uBAAL,GAA+B,8BAA/B;IAEA;;;;;IAIAd,MAAKe,QAAL,GAAgB,SAAhB;IAEA;;;;;IAIAf,MAAKgB,kBAAL,GAA0B,0BAA1B;IAEA;;;;;IAIAhB,MAAKiB,oBAAL,GAA4B,4BAA5B;IAEA;;;;;;IAKAjB,MAAKkB,0BAAL,GAAkC,0BAAlC;IAEA;;;;;;IAKAlB,MAAKmB,iBAAL,GAA0B,4BAA1B;IAEA;;;;;;IAKAnB,MAAKoB,sBAAL,GAA8B,sBAA9B;IA5IW;;;;EANYC,oB;;AAsJ/B,IAAIC,mBAAmB,IAAIxB,gBAAJ,EAAvB;kBACewB,gB","names":["ProtectionEvents","_classCallCheck","_this","INTERNAL_KEY_MESSAGE","INTERNAL_KEY_SYSTEM_SELECTED","INTERNAL_KEY_STATUS_CHANGED","KEY_ADDED","KEY_ERROR","KEY_MESSAGE","KEY_SESSION_CLOSED","KEY_SESSION_CREATED","KEY_SESSION_REMOVED","KEY_STATUSES_CHANGED","KEY_SYSTEM_ACCESS_COMPLETE","KEY_SYSTEM_SELECTED","LICENSE_REQUEST_COMPLETE","LICENSE_REQUEST_SENDING","NEED_KEY","PROTECTION_CREATED","PROTECTION_DESTROYED","SERVER_CERTIFICATE_UPDATED","TEARDOWN_COMPLETE","VIDEO_ELEMENT_SELECTED","EventsBase","protectionEvents"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/protection/ProtectionEvents.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventsBase from '../../core/events/EventsBase';\n/**\n * @class\n  */\nclass ProtectionEvents extends EventsBase {\n    /**\n     * @description Public facing external events to be used when including protection package.\n     * All public events will be aggregated into the MediaPlayerEvents Class and can be accessed\n     * via MediaPlayer.events.  public_ is the prefix that we use to move event names to MediaPlayerEvents.\n     */\n    constructor () {\n        super();\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         *\n         * @ignore\n         */\n        this.INTERNAL_KEY_MESSAGE = 'internalKeyMessage';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @ignore\n         */\n        this.INTERNAL_KEY_SYSTEM_SELECTED = 'internalKeySystemSelected';\n\n        /**\n         * Event ID for events delivered when the status of one decryption keys has changed\n         * @ignore\n         */\n        this.INTERNAL_KEY_STATUS_CHANGED = 'internalkeyStatusChanged';\n\n        /**\n         * Event ID for events delivered when a new key has been added\n         *\n         * @constant\n         * @deprecated The latest versions of the EME specification no longer\n         * use this event.  {@MediaPlayer.models.protectionModel.eventList.KEY_STATUSES_CHANGED}\n         * is preferred.\n         * @event ProtectionEvents#KEY_ADDED\n         */\n        this.KEY_ADDED = 'public_keyAdded';\n        /**\n         * Event ID for events delivered when an error is encountered by the CDM\n         * while processing a license server response message\n         * @event ProtectionEvents#KEY_ERROR\n         */\n        this.KEY_ERROR = 'public_keyError';\n\n        /**\n         * Event ID for events delivered when the protection set receives\n         * a key message from the CDM\n         * @event ProtectionEvents#KEY_MESSAGE\n         */\n        this.KEY_MESSAGE = 'public_keyMessage';\n\n        /**\n         * Event ID for events delivered when a key session close\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CLOSED\n         */\n        this.KEY_SESSION_CLOSED = 'public_keySessionClosed';\n\n        /**\n         * Event ID for events delivered when a new key sessions creation\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_CREATED\n         */\n        this.KEY_SESSION_CREATED = 'public_keySessionCreated';\n\n        /**\n         * Event ID for events delivered when a key session removal\n         * process has completed\n         * @event ProtectionEvents#KEY_SESSION_REMOVED\n         */\n        this.KEY_SESSION_REMOVED = 'public_keySessionRemoved';\n\n        /**\n         * Event ID for events delivered when the status of one or more\n         * decryption keys has changed\n         * @event ProtectionEvents#KEY_STATUSES_CHANGED\n         */\n        this.KEY_STATUSES_CHANGED = 'public_keyStatusesChanged';\n\n        /**\n         * Event ID for events delivered when a key system access procedure\n         * has completed\n         * @ignore\n         */\n        this.KEY_SYSTEM_ACCESS_COMPLETE = 'public_keySystemAccessComplete';\n\n        /**\n         * Event ID for events delivered when a key system selection procedure\n         * completes\n         * @event ProtectionEvents#KEY_SYSTEM_SELECTED\n         */\n        this.KEY_SYSTEM_SELECTED = 'public_keySystemSelected';\n\n        /**\n         * Event ID for events delivered when a license request procedure\n         * has completed\n         * @event ProtectionEvents#LICENSE_REQUEST_COMPLETE\n         */\n        this.LICENSE_REQUEST_COMPLETE = 'public_licenseRequestComplete';\n\n        /**\n         * Sending a license rquest\n         * @event ProtectionEvents#LICENSE_REQUEST_SENDING\n         */\n        this.LICENSE_REQUEST_SENDING = 'public_licenseRequestSending';\n\n        /**\n         * Event ID for needkey/encrypted events\n         * @ignore\n         */\n        this.NEED_KEY = 'needkey';\n\n        /**\n         * Event ID for events delivered when the Protection system is detected and created.\n         * @event ProtectionEvents#PROTECTION_CREATED\n         */\n        this.PROTECTION_CREATED = 'public_protectioncreated';\n\n        /**\n         * Event ID for events delivered when the Protection system is destroyed.\n         * @event ProtectionEvents#PROTECTION_DESTROYED\n         */\n        this.PROTECTION_DESTROYED = 'public_protectiondestroyed';\n\n        /**\n         * Event ID for events delivered when a new server certificate has\n         * been delivered to the CDM\n         * @ignore\n         */\n        this.SERVER_CERTIFICATE_UPDATED = 'serverCertificateUpdated';\n\n        /**\n         * Event ID for events delivered when the process of shutting down\n         * a protection set has completed\n         * @ignore\n         */\n        this.TEARDOWN_COMPLETE =  'protectionTeardownComplete';\n\n        /**\n         * Event ID for events delivered when a HTMLMediaElement has been\n         * associated with the protection set\n         * @ignore\n         */\n        this.VIDEO_ELEMENT_SELECTED = 'videoElementSelected';\n    }\n}\n\nlet protectionEvents = new ProtectionEvents();\nexport default protectionEvents;\n"]},"metadata":{},"sourceType":"script"}