{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // throughput generally stored in kbit/s\n// latency generally stored in ms\n\n/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2017, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n\nfunction ThroughputHistory(config) {\n  config = config || {}; // sliding window constants\n\n  var MAX_MEASUREMENTS_TO_KEEP = 20;\n  var AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3;\n  var AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4;\n  var AVERAGE_LATENCY_SAMPLE_AMOUNT = 4;\n  var THROUGHPUT_DECREASE_SCALE = 1.3;\n  var THROUGHPUT_INCREASE_SCALE = 1.3; // EWMA constants\n\n  var EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS = 8;\n  var EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS = 3;\n  var EWMA_LATENCY_SLOW_HALF_LIFE_COUNT = 2;\n  var EWMA_LATENCY_FAST_HALF_LIFE_COUNT = 1;\n  var settings = config.settings;\n  var throughputDict = void 0,\n      latencyDict = void 0,\n      ewmaThroughputDict = void 0,\n      ewmaLatencyDict = void 0,\n      ewmaHalfLife = void 0;\n\n  function setup() {\n    ewmaHalfLife = {\n      throughputHalfLife: {\n        fast: EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS,\n        slow: EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS\n      },\n      latencyHalfLife: {\n        fast: EWMA_LATENCY_FAST_HALF_LIFE_COUNT,\n        slow: EWMA_LATENCY_SLOW_HALF_LIFE_COUNT\n      }\n    };\n    reset();\n  }\n\n  function isCachedResponse(mediaType, latencyMs, downloadTimeMs) {\n    if (mediaType === _Constants2.default.VIDEO) {\n      return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[_Constants2.default.VIDEO];\n    } else if (mediaType === _Constants2.default.AUDIO) {\n      return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[_Constants2.default.AUDIO];\n    }\n  }\n\n  function push(mediaType, httpRequest, useDeadTimeLatency) {\n    if (!httpRequest.trace || !httpRequest.trace.length) {\n      return;\n    }\n\n    var latencyTimeInMilliseconds = httpRequest.tresponse.getTime() - httpRequest.trequest.getTime() || 1;\n    var downloadTimeInMilliseconds = httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime() || 1; //Make sure never 0 we divide by this value. Avoid infinity!\n\n    var downloadBytes = httpRequest.trace.reduce(function (a, b) {\n      return a + b.b[0];\n    }, 0);\n    var throughputMeasureTime = void 0;\n\n    if (settings.get().streaming.lowLatencyEnabled) {\n      throughputMeasureTime = httpRequest.trace.reduce(function (a, b) {\n        return a + b.d;\n      }, 0);\n    } else {\n      throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds;\n    }\n\n    var throughput = Math.round(8 * downloadBytes / throughputMeasureTime); // bits/ms = kbits/s\n\n    checkSettingsForMediaType(mediaType);\n\n    if (isCachedResponse(mediaType, latencyTimeInMilliseconds, downloadTimeInMilliseconds)) {\n      if (throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries) {\n        // already have some entries which are not cached entries\n        // prevent cached fragment loads from skewing the average values\n        return;\n      } else {\n        // have no entries || have cached entries\n        // no uncached entries yet, rely on cached entries because ABR rules need something to go by\n        throughputDict[mediaType].hasCachedEntries = true;\n      }\n    } else if (throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries) {\n      // if we are here then we have some entries already, but they are cached, and now we have a new uncached entry\n      clearSettingsForMediaType(mediaType);\n    }\n\n    throughputDict[mediaType].push(throughput);\n\n    if (throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n      throughputDict[mediaType].shift();\n    }\n\n    latencyDict[mediaType].push(latencyTimeInMilliseconds);\n\n    if (latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n      latencyDict[mediaType].shift();\n    }\n\n    updateEwmaEstimate(ewmaThroughputDict[mediaType], throughput, 0.001 * downloadTimeInMilliseconds, ewmaHalfLife.throughputHalfLife);\n    updateEwmaEstimate(ewmaLatencyDict[mediaType], latencyTimeInMilliseconds, 1, ewmaHalfLife.latencyHalfLife);\n  }\n\n  function updateEwmaEstimate(ewmaObj, value, weight, halfLife) {\n    // Note about startup:\n    // Estimates start at 0, so early values are underestimated.\n    // This effect is countered in getAverageEwma() by dividing the estimates by:\n    //     1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n    var fastAlpha = Math.pow(0.5, weight / halfLife.fast);\n    ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;\n    var slowAlpha = Math.pow(0.5, weight / halfLife.slow);\n    ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate;\n    ewmaObj.totalWeight += weight;\n  }\n\n  function getSampleSize(isThroughput, mediaType, isLive) {\n    var arr = void 0,\n        sampleSize = void 0;\n\n    if (isThroughput) {\n      arr = throughputDict[mediaType];\n      sampleSize = isLive ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;\n    } else {\n      arr = latencyDict[mediaType];\n      sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT;\n    }\n\n    if (!arr) {\n      sampleSize = 0;\n    } else if (sampleSize >= arr.length) {\n      sampleSize = arr.length;\n    } else if (isThroughput) {\n      // if throughput samples vary a lot, average over a wider sample\n      for (var i = 1; i < sampleSize; ++i) {\n        var ratio = arr[arr.length - i] / arr[arr.length - i - 1];\n\n        if (ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE) {\n          sampleSize += 1;\n\n          if (sampleSize === arr.length) {\n            // cannot increase sampleSize beyond arr.length\n            break;\n          }\n        }\n      }\n    }\n\n    return sampleSize;\n  }\n\n  function getAverage(isThroughput, mediaType, isDynamic) {\n    // only two moving average methods defined at the moment\n    return settings.get().streaming.abr.movingAverageMethod !== _Constants2.default.MOVING_AVERAGE_SLIDING_WINDOW ? getAverageEwma(isThroughput, mediaType) : getAverageSlidingWindow(isThroughput, mediaType, isDynamic);\n  }\n\n  function getAverageSlidingWindow(isThroughput, mediaType, isDynamic) {\n    var sampleSize = getSampleSize(isThroughput, mediaType, isDynamic);\n    var dict = isThroughput ? throughputDict : latencyDict;\n    var arr = dict[mediaType];\n\n    if (sampleSize === 0 || !arr || arr.length === 0) {\n      return NaN;\n    }\n\n    arr = arr.slice(-sampleSize); // still works if sampleSize too large\n    // arr.length >= 1\n\n    return arr.reduce(function (total, elem) {\n      return total + elem;\n    }) / arr.length;\n  }\n\n  function getAverageEwma(isThroughput, mediaType) {\n    var halfLife = isThroughput ? ewmaHalfLife.throughputHalfLife : ewmaHalfLife.latencyHalfLife;\n    var ewmaObj = isThroughput ? ewmaThroughputDict[mediaType] : ewmaLatencyDict[mediaType];\n\n    if (!ewmaObj || ewmaObj.totalWeight <= 0) {\n      return NaN;\n    } // to correct for startup, divide by zero factor = 1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n\n\n    var fastEstimate = ewmaObj.fastEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.fast));\n    var slowEstimate = ewmaObj.slowEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.slow));\n    return isThroughput ? Math.min(fastEstimate, slowEstimate) : Math.max(fastEstimate, slowEstimate);\n  }\n\n  function getAverageThroughput(mediaType, isDynamic) {\n    return getAverage(true, mediaType, isDynamic);\n  }\n\n  function getSafeAverageThroughput(mediaType, isDynamic) {\n    var average = getAverageThroughput(mediaType, isDynamic);\n\n    if (!isNaN(average)) {\n      average *= settings.get().streaming.abr.bandwidthSafetyFactor;\n    }\n\n    return average;\n  }\n\n  function getAverageLatency(mediaType) {\n    return getAverage(false, mediaType);\n  }\n\n  function checkSettingsForMediaType(mediaType) {\n    throughputDict[mediaType] = throughputDict[mediaType] || [];\n    latencyDict[mediaType] = latencyDict[mediaType] || [];\n    ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || {\n      fastEstimate: 0,\n      slowEstimate: 0,\n      totalWeight: 0\n    };\n    ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || {\n      fastEstimate: 0,\n      slowEstimate: 0,\n      totalWeight: 0\n    };\n  }\n\n  function clearSettingsForMediaType(mediaType) {\n    delete throughputDict[mediaType];\n    delete latencyDict[mediaType];\n    delete ewmaThroughputDict[mediaType];\n    delete ewmaLatencyDict[mediaType];\n    checkSettingsForMediaType(mediaType);\n  }\n\n  function reset() {\n    throughputDict = {};\n    latencyDict = {};\n    ewmaThroughputDict = {};\n    ewmaLatencyDict = {};\n  }\n\n  var instance = {\n    push: push,\n    getAverageThroughput: getAverageThroughput,\n    getSafeAverageThroughput: getSafeAverageThroughput,\n    getAverageLatency: getAverageLatency,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n\nThroughputHistory.__dashjs_factory_name = 'ThroughputHistory';\nexports.default = _FactoryMaker2.default.getClassFactory(ThroughputHistory);","map":{"version":3,"mappings":"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","names":["ThroughputHistory","config","MAX_MEASUREMENTS_TO_KEEP","AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE","AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD","AVERAGE_LATENCY_SAMPLE_AMOUNT","THROUGHPUT_DECREASE_SCALE","THROUGHPUT_INCREASE_SCALE","EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS","EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS","EWMA_LATENCY_SLOW_HALF_LIFE_COUNT","EWMA_LATENCY_FAST_HALF_LIFE_COUNT","settings","throughputDict","latencyDict","ewmaThroughputDict","ewmaLatencyDict","ewmaHalfLife","setup","throughputHalfLife","fast","slow","latencyHalfLife","reset","isCachedResponse","mediaType","latencyMs","downloadTimeMs","Constants","VIDEO","get","streaming","cacheLoadThresholds","AUDIO","push","httpRequest","useDeadTimeLatency","trace","length","latencyTimeInMilliseconds","tresponse","getTime","trequest","downloadTimeInMilliseconds","_tfinish","downloadBytes","reduce","a","b","throughputMeasureTime","lowLatencyEnabled","d","throughput","Math","round","checkSettingsForMediaType","hasCachedEntries","clearSettingsForMediaType","shift","updateEwmaEstimate","ewmaObj","value","weight","halfLife","fastAlpha","pow","fastEstimate","slowAlpha","slowEstimate","totalWeight","getSampleSize","isThroughput","isLive","arr","sampleSize","i","ratio","getAverage","isDynamic","abr","movingAverageMethod","MOVING_AVERAGE_SLIDING_WINDOW","getAverageEwma","getAverageSlidingWindow","dict","NaN","slice","total","elem","min","max","getAverageThroughput","getSafeAverageThroughput","average","isNaN","bandwidthSafetyFactor","getAverageLatency","instance","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/rules/ThroughputHistory.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2017, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport Constants from '../constants/Constants';\nimport FactoryMaker from '../../core/FactoryMaker';\n\n// throughput generally stored in kbit/s\n// latency generally stored in ms\n\nfunction ThroughputHistory(config) {\n\n    config = config || {};\n    // sliding window constants\n    const MAX_MEASUREMENTS_TO_KEEP = 20;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE = 3;\n    const AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD = 4;\n    const AVERAGE_LATENCY_SAMPLE_AMOUNT = 4;\n    const THROUGHPUT_DECREASE_SCALE = 1.3;\n    const THROUGHPUT_INCREASE_SCALE = 1.3;\n\n    // EWMA constants\n    const EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS = 8;\n    const EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS = 3;\n    const EWMA_LATENCY_SLOW_HALF_LIFE_COUNT = 2;\n    const EWMA_LATENCY_FAST_HALF_LIFE_COUNT = 1;\n\n    const settings = config.settings;\n\n    let throughputDict,\n        latencyDict,\n        ewmaThroughputDict,\n        ewmaLatencyDict,\n        ewmaHalfLife;\n\n    function setup() {\n        ewmaHalfLife = {\n            throughputHalfLife: { fast: EWMA_THROUGHPUT_FAST_HALF_LIFE_SECONDS, slow: EWMA_THROUGHPUT_SLOW_HALF_LIFE_SECONDS },\n            latencyHalfLife:    { fast: EWMA_LATENCY_FAST_HALF_LIFE_COUNT,      slow: EWMA_LATENCY_SLOW_HALF_LIFE_COUNT }\n        };\n\n        reset();\n    }\n\n    function isCachedResponse(mediaType, latencyMs, downloadTimeMs) {\n        if (mediaType === Constants.VIDEO) {\n            return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[Constants.VIDEO];\n        } else if (mediaType === Constants.AUDIO) {\n            return downloadTimeMs < settings.get().streaming.cacheLoadThresholds[Constants.AUDIO];\n        }\n    }\n\n    function push(mediaType, httpRequest, useDeadTimeLatency) {\n        if (!httpRequest.trace || !httpRequest.trace.length) {\n            return;\n        }\n\n        const latencyTimeInMilliseconds = (httpRequest.tresponse.getTime() - httpRequest.trequest.getTime()) || 1;\n        const downloadTimeInMilliseconds = (httpRequest._tfinish.getTime() - httpRequest.tresponse.getTime()) || 1; //Make sure never 0 we divide by this value. Avoid infinity!\n        const downloadBytes = httpRequest.trace.reduce((a, b) => a + b.b[0], 0);\n\n        let throughputMeasureTime;\n        if (settings.get().streaming.lowLatencyEnabled) {\n            throughputMeasureTime = httpRequest.trace.reduce((a, b) => a + b.d, 0);\n        } else {\n            throughputMeasureTime = useDeadTimeLatency ? downloadTimeInMilliseconds : latencyTimeInMilliseconds + downloadTimeInMilliseconds;\n        }\n\n        const throughput = Math.round((8 * downloadBytes) / throughputMeasureTime); // bits/ms = kbits/s\n\n        checkSettingsForMediaType(mediaType);\n\n        if (isCachedResponse(mediaType, latencyTimeInMilliseconds, downloadTimeInMilliseconds)) {\n            if (throughputDict[mediaType].length > 0 && !throughputDict[mediaType].hasCachedEntries) {\n                // already have some entries which are not cached entries\n                // prevent cached fragment loads from skewing the average values\n                return;\n            } else { // have no entries || have cached entries\n                // no uncached entries yet, rely on cached entries because ABR rules need something to go by\n                throughputDict[mediaType].hasCachedEntries = true;\n            }\n        } else if (throughputDict[mediaType] && throughputDict[mediaType].hasCachedEntries) {\n            // if we are here then we have some entries already, but they are cached, and now we have a new uncached entry\n            clearSettingsForMediaType(mediaType);\n        }\n\n        throughputDict[mediaType].push(throughput);\n        if (throughputDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n            throughputDict[mediaType].shift();\n        }\n\n        latencyDict[mediaType].push(latencyTimeInMilliseconds);\n        if (latencyDict[mediaType].length > MAX_MEASUREMENTS_TO_KEEP) {\n            latencyDict[mediaType].shift();\n        }\n\n        updateEwmaEstimate(ewmaThroughputDict[mediaType], throughput, 0.001 * downloadTimeInMilliseconds, ewmaHalfLife.throughputHalfLife);\n        updateEwmaEstimate(ewmaLatencyDict[mediaType], latencyTimeInMilliseconds, 1, ewmaHalfLife.latencyHalfLife);\n    }\n\n    function updateEwmaEstimate(ewmaObj, value, weight, halfLife) {\n        // Note about startup:\n        // Estimates start at 0, so early values are underestimated.\n        // This effect is countered in getAverageEwma() by dividing the estimates by:\n        //     1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n\n        const fastAlpha = Math.pow(0.5, weight / halfLife.fast);\n        ewmaObj.fastEstimate = (1 - fastAlpha) * value + fastAlpha * ewmaObj.fastEstimate;\n\n        const slowAlpha = Math.pow(0.5, weight / halfLife.slow);\n        ewmaObj.slowEstimate = (1 - slowAlpha) * value + slowAlpha * ewmaObj.slowEstimate;\n\n        ewmaObj.totalWeight += weight;\n    }\n\n    function getSampleSize(isThroughput, mediaType, isLive) {\n        let arr,\n            sampleSize;\n\n        if (isThroughput) {\n            arr = throughputDict[mediaType];\n            sampleSize = isLive ? AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_LIVE : AVERAGE_THROUGHPUT_SAMPLE_AMOUNT_VOD;\n        } else {\n            arr = latencyDict[mediaType];\n            sampleSize = AVERAGE_LATENCY_SAMPLE_AMOUNT;\n        }\n\n        if (!arr) {\n            sampleSize = 0;\n        } else if (sampleSize >= arr.length) {\n            sampleSize = arr.length;\n        } else if (isThroughput) {\n            // if throughput samples vary a lot, average over a wider sample\n            for (let i = 1; i < sampleSize; ++i) {\n                const ratio = arr[arr.length - i] / arr[arr.length - i - 1];\n                if (ratio >= THROUGHPUT_INCREASE_SCALE || ratio <= 1 / THROUGHPUT_DECREASE_SCALE) {\n                    sampleSize += 1;\n                    if (sampleSize === arr.length) { // cannot increase sampleSize beyond arr.length\n                        break;\n                    }\n                }\n            }\n        }\n\n        return sampleSize;\n    }\n\n    function getAverage(isThroughput, mediaType, isDynamic) {\n        // only two moving average methods defined at the moment\n        return settings.get().streaming.abr.movingAverageMethod !== Constants.MOVING_AVERAGE_SLIDING_WINDOW ?\n            getAverageEwma(isThroughput, mediaType) : getAverageSlidingWindow(isThroughput, mediaType, isDynamic);\n    }\n\n    function getAverageSlidingWindow(isThroughput, mediaType, isDynamic) {\n        const sampleSize = getSampleSize(isThroughput, mediaType, isDynamic);\n        const dict = isThroughput ? throughputDict : latencyDict;\n        let arr = dict[mediaType];\n\n        if (sampleSize === 0 || !arr || arr.length === 0) {\n            return NaN;\n        }\n\n        arr = arr.slice(-sampleSize); // still works if sampleSize too large\n        // arr.length >= 1\n        return arr.reduce((total, elem) => total + elem) / arr.length;\n    }\n\n    function getAverageEwma(isThroughput, mediaType) {\n        const halfLife = isThroughput ? ewmaHalfLife.throughputHalfLife : ewmaHalfLife.latencyHalfLife;\n        const ewmaObj = isThroughput ? ewmaThroughputDict[mediaType] : ewmaLatencyDict[mediaType];\n\n        if (!ewmaObj || ewmaObj.totalWeight <= 0) {\n            return NaN;\n        }\n\n        // to correct for startup, divide by zero factor = 1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife)\n        const fastEstimate = ewmaObj.fastEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.fast));\n        const slowEstimate = ewmaObj.slowEstimate / (1 - Math.pow(0.5, ewmaObj.totalWeight / halfLife.slow));\n        return isThroughput ? Math.min(fastEstimate, slowEstimate) : Math.max(fastEstimate, slowEstimate);\n    }\n\n    function getAverageThroughput(mediaType, isDynamic) {\n        return getAverage(true, mediaType, isDynamic);\n    }\n\n    function getSafeAverageThroughput(mediaType, isDynamic) {\n        let average = getAverageThroughput(mediaType, isDynamic);\n        if (!isNaN(average)) {\n            average *= settings.get().streaming.abr.bandwidthSafetyFactor;\n        }\n        return average;\n    }\n\n    function getAverageLatency(mediaType) {\n        return getAverage(false, mediaType);\n    }\n\n    function checkSettingsForMediaType(mediaType) {\n        throughputDict[mediaType] = throughputDict[mediaType] || [];\n        latencyDict[mediaType] = latencyDict[mediaType] || [];\n        ewmaThroughputDict[mediaType] = ewmaThroughputDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\n        ewmaLatencyDict[mediaType] = ewmaLatencyDict[mediaType] || {fastEstimate: 0, slowEstimate: 0, totalWeight: 0};\n    }\n\n    function clearSettingsForMediaType(mediaType) {\n        delete throughputDict[mediaType];\n        delete latencyDict[mediaType];\n        delete ewmaThroughputDict[mediaType];\n        delete ewmaLatencyDict[mediaType];\n        checkSettingsForMediaType(mediaType);\n    }\n\n    function reset() {\n        throughputDict = {};\n        latencyDict = {};\n        ewmaThroughputDict = {};\n        ewmaLatencyDict = {};\n    }\n\n    const instance = {\n        push: push,\n        getAverageThroughput: getAverageThroughput,\n        getSafeAverageThroughput: getSafeAverageThroughput,\n        getAverageLatency: getAverageLatency,\n        reset: reset\n    };\n\n    setup();\n    return instance;\n}\n\nThroughputHistory.__dashjs_factory_name = 'ThroughputHistory';\nexport default FactoryMaker.getClassFactory(ThroughputHistory);\n"]},"metadata":{},"sourceType":"script"}