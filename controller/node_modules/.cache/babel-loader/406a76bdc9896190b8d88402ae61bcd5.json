{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _MediaPlayerEvents = require('../MediaPlayerEvents');\n\nvar _MediaPlayerEvents2 = _interopRequireDefault(_MediaPlayerEvents);\n\nvar _MetricsReportingEvents = require('../metrics/MetricsReportingEvents');\n\nvar _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _Settings = require('../../core/Settings');\n\nvar _Settings2 = _interopRequireDefault(_Settings);\n\nvar _Constants = require('../../streaming/constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _HTTPRequest = require('../vo/metrics/HTTPRequest');\n\nvar _DashManifestModel = require('../../dash/models/DashManifestModel');\n\nvar _DashManifestModel2 = _interopRequireDefault(_DashManifestModel);\n\nvar _Utils = require('../../core/Utils');\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nvar CMCD_REQUEST_FIELD_NAME = 'CMCD';\nvar CMCD_VERSION = 1;\nvar OBJECT_TYPES = {\n  MANIFEST: 'm',\n  AUDIO: 'a',\n  VIDEO: 'v',\n  INIT: 'i',\n  CAPTION: 'c',\n  ISOBMFF_TEXT_TRACK: 'tt',\n  ENCRYPTION_KEY: 'k',\n  OTHER: 'o'\n};\nvar STREAMING_FORMATS = {\n  DASH: 'd',\n  MSS: 's'\n};\nvar STREAM_TYPES = {\n  VOD: 'v',\n  LIVE: 'l'\n};\nvar RTP_SAFETY_FACTOR = 5;\n\nfunction CmcdModel() {\n  var logger = void 0,\n      dashManifestModel = void 0,\n      instance = void 0,\n      internalData = void 0,\n      abrController = void 0,\n      dashMetrics = void 0,\n      playbackController = void 0,\n      streamProcessors = void 0,\n      _isStartup = void 0,\n      _bufferLevelStarved = void 0,\n      _initialMediaRequestsDone = void 0;\n\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var settings = (0, _Settings2.default)(context).getInstance();\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n    dashManifestModel = (0, _DashManifestModel2.default)(context).getInstance();\n\n    _resetInitialSettings();\n  }\n\n  function initialize() {\n    eventBus.on(_MediaPlayerEvents2.default.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, instance);\n    eventBus.on(_MediaPlayerEvents2.default.MANIFEST_LOADED, _onManifestLoaded, instance);\n    eventBus.on(_MediaPlayerEvents2.default.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n    eventBus.on(_MediaPlayerEvents2.default.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n    eventBus.on(_MediaPlayerEvents2.default.PERIOD_SWITCH_COMPLETED, _onPeriodSwitchComplete, instance);\n  }\n\n  function setConfig(config) {\n    if (!config) return;\n\n    if (config.abrController) {\n      abrController = config.abrController;\n    }\n\n    if (config.dashMetrics) {\n      dashMetrics = config.dashMetrics;\n    }\n\n    if (config.playbackController) {\n      playbackController = config.playbackController;\n    }\n  }\n\n  function _resetInitialSettings() {\n    internalData = {\n      pr: 1,\n      nor: null,\n      st: null,\n      sf: null,\n      sid: '' + _Utils2.default.generateUuid(),\n      cid: null\n    };\n    _bufferLevelStarved = {};\n    _isStartup = {};\n    _initialMediaRequestsDone = {};\n\n    _updateStreamProcessors();\n  }\n\n  function _onPeriodSwitchComplete() {\n    _updateStreamProcessors();\n  }\n\n  function _updateStreamProcessors() {\n    if (!playbackController) return;\n    var streamController = playbackController.getStreamController();\n    if (!streamController) return;\n    if (typeof streamController.getActiveStream !== 'function') return;\n    var activeStream = streamController.getActiveStream();\n    if (!activeStream) return;\n    streamProcessors = activeStream.getProcessors();\n  }\n\n  function getQueryParameter(request) {\n    try {\n      if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n        var cmcdData = _getCmcdData(request);\n\n        var finalPayloadString = _buildFinalString(cmcdData);\n\n        eventBus.trigger(_MetricsReportingEvents2.default.CMCD_DATA_GENERATED, {\n          url: request.url,\n          mediaType: request.mediaType,\n          cmcdData: cmcdData,\n          cmcdString: finalPayloadString\n        });\n        return {\n          key: CMCD_REQUEST_FIELD_NAME,\n          value: finalPayloadString\n        };\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _copyParameters(data, parameterNames) {\n    var copiedData = {};\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = parameterNames[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var name = _step.value;\n\n        if (data[name]) {\n          copiedData[name] = data[name];\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    return copiedData;\n  }\n\n  function getHeaderParameters(request) {\n    try {\n      if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n        var cmcdData = _getCmcdData(request);\n\n        var cmcdObjectHeader = _copyParameters(cmcdData, ['br', 'd', 'ot', 'tb']);\n\n        var cmcdRequestHeader = _copyParameters(cmcdData, ['bl', 'dl', 'mtp', 'nor', 'nrr', 'su']);\n\n        var cmcdStatusHeader = _copyParameters(cmcdData, ['bs', 'rtp']);\n\n        var cmcdSessionHeader = _copyParameters(cmcdData, ['cid', 'pr', 'sf', 'sid', 'st', 'v']);\n\n        var headers = {\n          'CMCD-Object': _buildFinalString(cmcdObjectHeader),\n          'CMCD-Request': _buildFinalString(cmcdRequestHeader),\n          'CMCD-Status': _buildFinalString(cmcdStatusHeader),\n          'CMCD-Session': _buildFinalString(cmcdSessionHeader)\n        };\n        eventBus.trigger(_MetricsReportingEvents2.default.CMCD_DATA_GENERATED, {\n          url: request.url,\n          mediaType: request.mediaType,\n          cmcdData: cmcdData\n        });\n        return headers;\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getCmcdData(request) {\n    try {\n      var cmcdData = null;\n\n      if (request.type === _HTTPRequest.HTTPRequest.MPD_TYPE) {\n        return _getCmcdDataForMpd(request);\n      } else if (request.type === _HTTPRequest.HTTPRequest.MEDIA_SEGMENT_TYPE) {\n        _initForMediaType(request.mediaType);\n\n        return _getCmcdDataForMediaSegment(request);\n      } else if (request.type === _HTTPRequest.HTTPRequest.INIT_SEGMENT_TYPE) {\n        return _getCmcdDataForInitSegment(request);\n      } else if (request.type === _HTTPRequest.HTTPRequest.OTHER_TYPE || request.type === _HTTPRequest.HTTPRequest.XLINK_EXPANSION_TYPE) {\n        return _getCmcdDataForOther(request);\n      } else if (request.type === _HTTPRequest.HTTPRequest.LICENSE) {\n        return _getCmcdDataForLicense(request);\n      }\n\n      return cmcdData;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getCmcdDataForLicense(request) {\n    var data = _getGenericCmcdData(request);\n\n    data.ot = OBJECT_TYPES.ENCRYPTION_KEY;\n    return data;\n  }\n\n  function _getCmcdDataForMpd() {\n    var data = _getGenericCmcdData();\n\n    data.ot = '' + OBJECT_TYPES.MANIFEST;\n    return data;\n  }\n\n  function _getCmcdDataForMediaSegment(request) {\n    var data = _getGenericCmcdData();\n\n    var encodedBitrate = _getBitrateByRequest(request);\n\n    var d = _getObjectDurationByRequest(request);\n\n    var mtp = _getMeasuredThroughputByType(request.mediaType);\n\n    var dl = _getDeadlineByType(request.mediaType);\n\n    var bl = _getBufferLevelByType(request.mediaType);\n\n    var tb = _getTopBitrateByType(request.mediaType);\n\n    var pr = internalData.pr;\n\n    var nextRequest = _probeNextRequest(request.mediaType);\n\n    var ot = void 0;\n    if (request.mediaType === _Constants2.default.VIDEO) ot = OBJECT_TYPES.VIDEO;\n    if (request.mediaType === _Constants2.default.AUDIO) ot = OBJECT_TYPES.AUDIO;\n\n    if (request.mediaType === _Constants2.default.FRAGMENTED_TEXT) {\n      if (request.mediaInfo.mimeType === 'application/mp4') {\n        ot = OBJECT_TYPES.ISOBMFF_TEXT_TRACK;\n      } else {\n        ot = OBJECT_TYPES.CAPTION;\n      }\n    }\n\n    var rtp = settings.get().streaming.cmcd.rtp;\n\n    if (!rtp) {\n      rtp = _calculateRtp(request);\n    }\n\n    data.rtp = rtp;\n\n    if (nextRequest) {\n      if (request.url !== nextRequest.url) {\n        var url = new URL(nextRequest.url);\n        data.nor = url.pathname;\n      } else if (nextRequest.range) {\n        data.nrr = nextRequest.range;\n      }\n    }\n\n    if (encodedBitrate) {\n      data.br = encodedBitrate;\n    }\n\n    if (ot) {\n      data.ot = ot;\n    }\n\n    if (!isNaN(d)) {\n      data.d = d;\n    }\n\n    if (!isNaN(mtp)) {\n      data.mtp = mtp;\n    }\n\n    if (!isNaN(dl)) {\n      data.dl = dl;\n    }\n\n    if (!isNaN(bl)) {\n      data.bl = bl;\n    }\n\n    if (!isNaN(tb)) {\n      data.tb = tb;\n    }\n\n    if (!isNaN(pr) && pr !== 1) {\n      data.pr = pr;\n    }\n\n    if (_bufferLevelStarved[request.mediaType]) {\n      data.bs = true;\n      _bufferLevelStarved[request.mediaType] = false;\n    }\n\n    if (_isStartup[request.mediaType] || !_initialMediaRequestsDone[request.mediaType]) {\n      data.su = true;\n      _isStartup[request.mediaType] = false;\n      _initialMediaRequestsDone[request.mediaType] = true;\n    }\n\n    return data;\n  }\n\n  function _initForMediaType(mediaType) {\n    if (!_initialMediaRequestsDone.hasOwnProperty(mediaType)) {\n      _initialMediaRequestsDone[mediaType] = false;\n    }\n\n    if (!_isStartup.hasOwnProperty(mediaType)) {\n      _isStartup[mediaType] = false;\n    }\n\n    if (!_bufferLevelStarved.hasOwnProperty(mediaType)) {\n      _bufferLevelStarved[mediaType] = false;\n    }\n  }\n\n  function _getCmcdDataForInitSegment() {\n    var data = _getGenericCmcdData();\n\n    data.ot = '' + OBJECT_TYPES.INIT;\n    data.su = true;\n    return data;\n  }\n\n  function _getCmcdDataForOther() {\n    var data = _getGenericCmcdData();\n\n    data.ot = '' + OBJECT_TYPES.OTHER;\n    return data;\n  }\n\n  function _getGenericCmcdData() {\n    var data = {};\n    var cid = settings.get().streaming.cmcd.cid ? settings.get().streaming.cmcd.cid : internalData.cid;\n    data.v = CMCD_VERSION;\n    data.sid = settings.get().streaming.cmcd.sid ? settings.get().streaming.cmcd.sid : internalData.sid;\n    data.sid = '' + data.sid;\n\n    if (cid) {\n      data.cid = '' + cid;\n    }\n\n    if (!isNaN(internalData.pr) && internalData.pr !== 1 && internalData.pr !== null) {\n      data.pr = internalData.pr;\n    }\n\n    if (internalData.st) {\n      data.st = internalData.st;\n    }\n\n    if (internalData.sf) {\n      data.sf = internalData.sf;\n    }\n\n    return data;\n  }\n\n  function _getBitrateByRequest(request) {\n    try {\n      var quality = request.quality;\n      var bitrateList = request.mediaInfo.bitrateList;\n      return parseInt(bitrateList[quality].bandwidth / 1000);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getTopBitrateByType(mediaType) {\n    try {\n      var info = abrController.getTopBitrateInfoFor(mediaType);\n      return Math.round(info.bitrate / 1000);\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getObjectDurationByRequest(request) {\n    try {\n      return !isNaN(request.duration) ? Math.round(request.duration * 1000) : null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getMeasuredThroughputByType(mediaType) {\n    try {\n      return parseInt(abrController.getThroughputHistory().getSafeAverageThroughput(mediaType) / 100) * 100;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getDeadlineByType(mediaType) {\n    try {\n      var playbackRate = internalData.pr;\n      var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n      if (!isNaN(playbackRate) && !isNaN(bufferLevel)) {\n        return parseInt(bufferLevel / playbackRate * 10) * 100;\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _getBufferLevelByType(mediaType) {\n    try {\n      var bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n      if (!isNaN(bufferLevel)) {\n        return parseInt(bufferLevel * 10) * 100;\n      }\n\n      return null;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _onPlaybackRateChanged(data) {\n    try {\n      internalData.pr = data.playbackRate;\n    } catch (e) {}\n  }\n\n  function _onManifestLoaded(data) {\n    try {\n      var isDynamic = dashManifestModel.getIsDynamic(data.data);\n      var st = isDynamic ? '' + STREAM_TYPES.LIVE : '' + STREAM_TYPES.VOD;\n      var sf = data.protocol && data.protocol === 'MSS' ? '' + STREAMING_FORMATS.MSS : '' + STREAMING_FORMATS.DASH;\n      internalData.st = '' + st;\n      internalData.sf = '' + sf;\n    } catch (e) {}\n  }\n\n  function _onBufferLevelStateChanged(data) {\n    try {\n      if (data.state && data.mediaType) {\n        if (data.state === _MediaPlayerEvents2.default.BUFFER_EMPTY) {\n          if (!_bufferLevelStarved[data.mediaType]) {\n            _bufferLevelStarved[data.mediaType] = true;\n          }\n\n          if (!_isStartup[data.mediaType]) {\n            _isStartup[data.mediaType] = true;\n          }\n        }\n      }\n    } catch (e) {}\n  }\n\n  function _onPlaybackSeeked() {\n    for (var key in _bufferLevelStarved) {\n      if (_bufferLevelStarved.hasOwnProperty(key)) {\n        _bufferLevelStarved[key] = true;\n      }\n    }\n\n    for (var _key in _isStartup) {\n      if (_isStartup.hasOwnProperty(_key)) {\n        _isStartup[_key] = true;\n      }\n    }\n  }\n\n  function _buildFinalString(cmcdData) {\n    try {\n      if (!cmcdData) {\n        return null;\n      }\n\n      var keys = Object.keys(cmcdData).sort(function (a, b) {\n        return a.localeCompare(b);\n      });\n      var length = keys.length;\n      var cmcdString = keys.reduce(function (acc, key, index) {\n        if (key === 'v' && cmcdData[key] === 1) return acc; // Version key should only be reported if it is != 1\n\n        if (typeof cmcdData[key] === 'string' && (key !== 'ot' || key !== 'sf' || key !== 'st')) {\n          var string = cmcdData[key].replace(/\"/g, '\\\"');\n          acc += key + '=\"' + string + '\"';\n        } else {\n          acc += key + '=' + cmcdData[key];\n        }\n\n        if (index < length - 1) {\n          acc += ',';\n        }\n\n        return acc;\n      }, '');\n      cmcdString = cmcdString.replace(/=true/g, '');\n      return cmcdString;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  function _probeNextRequest(mediaType) {\n    if (!streamProcessors || streamProcessors.length === 0) return;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = streamProcessors[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var streamProcessor = _step2.value;\n\n        if (streamProcessor.getType() === mediaType) {\n          return streamProcessor.probeNextRequest();\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  function _calculateRtp(request) {\n    // Get the values we need\n    var playbackRate = playbackController.getPlaybackRate();\n    if (!playbackRate) playbackRate = 1;\n    var quality = request.quality,\n        mediaType = request.mediaType,\n        mediaInfo = request.mediaInfo,\n        duration = request.duration;\n\n    var currentBufferLevel = _getBufferLevelByType(mediaType);\n\n    if (currentBufferLevel === 0) currentBufferLevel = 500;\n    var bitrate = mediaInfo.bitrateList[quality].bandwidth; // Calculate RTP\n\n    var segmentSize = bitrate * duration / 1000; // Calculate file size in kilobits\n\n    var timeToLoad = currentBufferLevel / playbackRate / 1000; // Calculate time available to load file in seconds\n\n    var minBandwidth = segmentSize / timeToLoad; // Calculate the exact bandwidth required\n\n    var rtpSafetyFactor = settings.get().streaming.cmcd.rtpSafetyFactor && !isNaN(settings.get().streaming.cmcd.rtpSafetyFactor) ? settings.get().streaming.cmcd.rtpSafetyFactor : RTP_SAFETY_FACTOR;\n    var maxBandwidth = minBandwidth * rtpSafetyFactor; // Include a safety buffer\n\n    var rtp = (parseInt(maxBandwidth / 100) + 1) * 100; // Round to the next multiple of 100\n\n    return rtp;\n  }\n\n  function reset() {\n    eventBus.off(_MediaPlayerEvents2.default.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, this);\n    eventBus.off(_MediaPlayerEvents2.default.MANIFEST_LOADED, _onManifestLoaded, this);\n    eventBus.off(_MediaPlayerEvents2.default.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n    eventBus.off(_MediaPlayerEvents2.default.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n\n    _resetInitialSettings();\n  }\n\n  instance = {\n    getQueryParameter: getQueryParameter,\n    getHeaderParameters: getHeaderParameters,\n    setConfig: setConfig,\n    reset: reset,\n    initialize: initialize\n  };\n  setup();\n  return instance;\n}\n\nCmcdModel.__dashjs_factory_name = 'CmcdModel';\nexports.default = _FactoryMaker2.default.getSingletonFactory(CmcdModel);","map":{"version":3,"mappings":"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","names":["CMCD_REQUEST_FIELD_NAME","CMCD_VERSION","OBJECT_TYPES","MANIFEST","AUDIO","VIDEO","INIT","CAPTION","ISOBMFF_TEXT_TRACK","ENCRYPTION_KEY","OTHER","STREAMING_FORMATS","DASH","MSS","STREAM_TYPES","VOD","LIVE","RTP_SAFETY_FACTOR","CmcdModel","logger","dashManifestModel","instance","internalData","abrController","dashMetrics","playbackController","streamProcessors","_isStartup","_bufferLevelStarved","_initialMediaRequestsDone","context","eventBus","getInstance","settings","setup","getLogger","_resetInitialSettings","initialize","on","MediaPlayerEvents","PLAYBACK_RATE_CHANGED","_onPlaybackRateChanged","MANIFEST_LOADED","_onManifestLoaded","BUFFER_LEVEL_STATE_CHANGED","_onBufferLevelStateChanged","PLAYBACK_SEEKED","_onPlaybackSeeked","PERIOD_SWITCH_COMPLETED","_onPeriodSwitchComplete","setConfig","config","pr","nor","st","sf","sid","Utils","generateUuid","cid","_updateStreamProcessors","streamController","getStreamController","getActiveStream","activeStream","getProcessors","getQueryParameter","request","get","streaming","cmcd","enabled","cmcdData","_getCmcdData","finalPayloadString","_buildFinalString","trigger","MetricsReportingEvents","CMCD_DATA_GENERATED","url","mediaType","cmcdString","key","value","e","_copyParameters","data","parameterNames","copiedData","name","_didIteratorError","_iteratorError","_iterator","getHeaderParameters","cmcdObjectHeader","cmcdRequestHeader","cmcdStatusHeader","cmcdSessionHeader","headers","type","HTTPRequest","MPD_TYPE","_getCmcdDataForMpd","MEDIA_SEGMENT_TYPE","_initForMediaType","_getCmcdDataForMediaSegment","INIT_SEGMENT_TYPE","_getCmcdDataForInitSegment","OTHER_TYPE","XLINK_EXPANSION_TYPE","_getCmcdDataForOther","LICENSE","_getCmcdDataForLicense","_getGenericCmcdData","ot","encodedBitrate","_getBitrateByRequest","d","_getObjectDurationByRequest","mtp","_getMeasuredThroughputByType","dl","_getDeadlineByType","bl","_getBufferLevelByType","tb","_getTopBitrateByType","nextRequest","_probeNextRequest","Constants","FRAGMENTED_TEXT","mediaInfo","mimeType","rtp","_calculateRtp","URL","pathname","range","nrr","br","isNaN","bs","su","hasOwnProperty","v","quality","bitrateList","parseInt","bandwidth","info","getTopBitrateInfoFor","Math","round","bitrate","duration","getThroughputHistory","getSafeAverageThroughput","playbackRate","bufferLevel","getCurrentBufferLevel","isDynamic","getIsDynamic","protocol","state","BUFFER_EMPTY","keys","Object","sort","a","b","localeCompare","length","reduce","acc","index","string","replace","streamProcessor","getType","probeNextRequest","_didIteratorError2","_iteratorError2","_iterator2","getPlaybackRate","currentBufferLevel","segmentSize","timeToLoad","minBandwidth","rtpSafetyFactor","maxBandwidth","reset","off","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/models/CmcdModel.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport EventBus from '../../core/EventBus';\nimport MediaPlayerEvents from '../MediaPlayerEvents';\nimport MetricsReportingEvents from '../metrics/MetricsReportingEvents';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport Settings from '../../core/Settings';\nimport Constants from '../../streaming/constants/Constants';\nimport {HTTPRequest} from '../vo/metrics/HTTPRequest';\nimport DashManifestModel from '../../dash/models/DashManifestModel';\nimport Utils from '../../core/Utils';\n\nconst CMCD_REQUEST_FIELD_NAME = 'CMCD';\nconst CMCD_VERSION = 1;\nconst OBJECT_TYPES = {\n    MANIFEST: 'm',\n    AUDIO: 'a',\n    VIDEO: 'v',\n    INIT: 'i',\n    CAPTION: 'c',\n    ISOBMFF_TEXT_TRACK: 'tt',\n    ENCRYPTION_KEY: 'k',\n    OTHER: 'o'\n};\nconst STREAMING_FORMATS = {\n    DASH: 'd',\n    MSS: 's'\n};\nconst STREAM_TYPES = {\n    VOD: 'v',\n    LIVE: 'l'\n};\nconst RTP_SAFETY_FACTOR = 5;\n\nfunction CmcdModel() {\n\n    let logger,\n        dashManifestModel,\n        instance,\n        internalData,\n        abrController,\n        dashMetrics,\n        playbackController,\n        streamProcessors,\n        _isStartup,\n        _bufferLevelStarved,\n        _initialMediaRequestsDone;\n\n    let context = this.context;\n    let eventBus = EventBus(context).getInstance();\n    let settings = Settings(context).getInstance();\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        dashManifestModel = DashManifestModel(context).getInstance();\n\n        _resetInitialSettings();\n    }\n\n    function initialize() {\n        eventBus.on(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, instance);\n        eventBus.on(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, instance);\n        eventBus.on(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n        eventBus.on(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n        eventBus.on(MediaPlayerEvents.PERIOD_SWITCH_COMPLETED, _onPeriodSwitchComplete, instance);\n    }\n\n    function setConfig(config) {\n        if (!config) return;\n\n        if (config.abrController) {\n            abrController = config.abrController;\n        }\n\n        if (config.dashMetrics) {\n            dashMetrics = config.dashMetrics;\n        }\n\n        if (config.playbackController) {\n            playbackController = config.playbackController;\n        }\n    }\n\n    function _resetInitialSettings() {\n        internalData = {\n            pr: 1,\n            nor: null,\n            st: null,\n            sf: null,\n            sid: `${Utils.generateUuid()}`,\n            cid: null\n        };\n        _bufferLevelStarved = {};\n        _isStartup = {};\n        _initialMediaRequestsDone = {};\n        _updateStreamProcessors();\n    }\n\n    function _onPeriodSwitchComplete() {\n        _updateStreamProcessors();\n    }\n\n    function _updateStreamProcessors() {\n        if (!playbackController) return;\n        const streamController = playbackController.getStreamController();\n        if (!streamController) return;\n        if (typeof streamController.getActiveStream !== 'function') return;\n        const activeStream = streamController.getActiveStream();\n        if (!activeStream) return;\n        streamProcessors = activeStream.getProcessors();\n    }\n\n    function getQueryParameter(request) {\n        try {\n            if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n                const cmcdData = _getCmcdData(request);\n                const finalPayloadString = _buildFinalString(cmcdData);\n\n                eventBus.trigger(MetricsReportingEvents.CMCD_DATA_GENERATED, {\n                    url: request.url,\n                    mediaType: request.mediaType,\n                    cmcdData,\n                    cmcdString: finalPayloadString\n                });\n                return {\n                    key: CMCD_REQUEST_FIELD_NAME,\n                    value: finalPayloadString\n                };\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _copyParameters(data, parameterNames) {\n        const copiedData = {};\n        for (let name of parameterNames) {\n            if (data[name]) {\n                copiedData[name] = data[name];\n            }\n        }\n        return copiedData;\n    }\n\n    function getHeaderParameters(request) {\n        try {\n            if (settings.get().streaming.cmcd && settings.get().streaming.cmcd.enabled) {\n                const cmcdData = _getCmcdData(request);\n                const cmcdObjectHeader = _copyParameters(cmcdData, ['br', 'd', 'ot', 'tb']);\n                const cmcdRequestHeader = _copyParameters(cmcdData, ['bl', 'dl', 'mtp', 'nor', 'nrr', 'su']);\n                const cmcdStatusHeader = _copyParameters(cmcdData, ['bs', 'rtp']);\n                const cmcdSessionHeader = _copyParameters(cmcdData, ['cid', 'pr', 'sf', 'sid', 'st', 'v']);\n                const headers = {\n                    'CMCD-Object': _buildFinalString(cmcdObjectHeader),\n                    'CMCD-Request': _buildFinalString(cmcdRequestHeader),\n                    'CMCD-Status': _buildFinalString(cmcdStatusHeader),\n                    'CMCD-Session': _buildFinalString(cmcdSessionHeader)\n                };\n\n                eventBus.trigger(MetricsReportingEvents.CMCD_DATA_GENERATED, {\n                    url: request.url,\n                    mediaType: request.mediaType,\n                    cmcdData\n                });\n                return headers;\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getCmcdData(request) {\n        try {\n            let cmcdData = null;\n\n            if (request.type === HTTPRequest.MPD_TYPE) {\n                return _getCmcdDataForMpd(request);\n            } else if (request.type === HTTPRequest.MEDIA_SEGMENT_TYPE) {\n                _initForMediaType(request.mediaType);\n                return _getCmcdDataForMediaSegment(request);\n            } else if (request.type === HTTPRequest.INIT_SEGMENT_TYPE) {\n                return _getCmcdDataForInitSegment(request);\n            } else if (request.type === HTTPRequest.OTHER_TYPE || request.type === HTTPRequest.XLINK_EXPANSION_TYPE) {\n                return _getCmcdDataForOther(request);\n            } else if (request.type === HTTPRequest.LICENSE) {\n                return _getCmcdDataForLicense(request);\n            }\n\n            return cmcdData;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getCmcdDataForLicense(request) {\n        const data = _getGenericCmcdData(request);\n\n        data.ot = OBJECT_TYPES.ENCRYPTION_KEY;\n\n        return data;\n    }\n\n    function _getCmcdDataForMpd() {\n        const data = _getGenericCmcdData();\n\n        data.ot = `${OBJECT_TYPES.MANIFEST}`;\n\n        return data;\n    }\n\n    function _getCmcdDataForMediaSegment(request) {\n        const data = _getGenericCmcdData();\n        const encodedBitrate = _getBitrateByRequest(request);\n        const d = _getObjectDurationByRequest(request);\n        const mtp = _getMeasuredThroughputByType(request.mediaType);\n        const dl = _getDeadlineByType(request.mediaType);\n        const bl = _getBufferLevelByType(request.mediaType);\n        const tb = _getTopBitrateByType(request.mediaType);\n        const pr = internalData.pr;\n\n        const nextRequest = _probeNextRequest(request.mediaType);\n\n        let ot;\n        if (request.mediaType === Constants.VIDEO) ot = OBJECT_TYPES.VIDEO;\n        if (request.mediaType === Constants.AUDIO) ot = OBJECT_TYPES.AUDIO;\n        if (request.mediaType === Constants.FRAGMENTED_TEXT) {\n            if (request.mediaInfo.mimeType === 'application/mp4') {\n                ot = OBJECT_TYPES.ISOBMFF_TEXT_TRACK;\n            } else {\n                ot = OBJECT_TYPES.CAPTION;\n            }\n        }\n\n        let rtp = settings.get().streaming.cmcd.rtp;\n        if (!rtp) {\n            rtp = _calculateRtp(request);\n        }\n        data.rtp = rtp;\n\n        if (nextRequest) {\n            if (request.url !== nextRequest.url) {\n                let url = new URL(nextRequest.url);\n                data.nor = url.pathname;\n            } else if (nextRequest.range) {\n                data.nrr = nextRequest.range;\n            }\n        }\n\n        if (encodedBitrate) {\n            data.br = encodedBitrate;\n        }\n\n        if (ot) {\n            data.ot = ot;\n        }\n\n        if (!isNaN(d)) {\n            data.d = d;\n        }\n\n        if (!isNaN(mtp)) {\n            data.mtp = mtp;\n        }\n\n        if (!isNaN(dl)) {\n            data.dl = dl;\n        }\n\n        if (!isNaN(bl)) {\n            data.bl = bl;\n        }\n\n        if (!isNaN(tb)) {\n            data.tb = tb;\n        }\n\n        if (!isNaN(pr) && pr !== 1) {\n            data.pr = pr;\n        }\n\n        if (_bufferLevelStarved[request.mediaType]) {\n            data.bs = true;\n            _bufferLevelStarved[request.mediaType] = false;\n        }\n\n        if (_isStartup[request.mediaType] || !_initialMediaRequestsDone[request.mediaType]) {\n            data.su = true;\n            _isStartup[request.mediaType] = false;\n            _initialMediaRequestsDone[request.mediaType] = true;\n        }\n\n        return data;\n    }\n\n    function _initForMediaType(mediaType) {\n\n        if (!_initialMediaRequestsDone.hasOwnProperty(mediaType)) {\n            _initialMediaRequestsDone[mediaType] = false;\n        }\n\n        if (!_isStartup.hasOwnProperty(mediaType)) {\n            _isStartup[mediaType] = false;\n        }\n\n        if (!_bufferLevelStarved.hasOwnProperty(mediaType)) {\n            _bufferLevelStarved[mediaType] = false;\n        }\n    }\n\n    function _getCmcdDataForInitSegment() {\n        const data = _getGenericCmcdData();\n\n        data.ot = `${OBJECT_TYPES.INIT}`;\n        data.su = true;\n\n        return data;\n    }\n\n    function _getCmcdDataForOther() {\n        const data = _getGenericCmcdData();\n\n        data.ot = `${OBJECT_TYPES.OTHER}`;\n\n        return data;\n    }\n\n\n    function _getGenericCmcdData() {\n        const data = {};\n\n        let cid = settings.get().streaming.cmcd.cid ? settings.get().streaming.cmcd.cid : internalData.cid;\n\n        data.v = CMCD_VERSION;\n        data.sid = settings.get().streaming.cmcd.sid ? settings.get().streaming.cmcd.sid : internalData.sid;\n\n        data.sid = `${data.sid}`;\n\n        if (cid) {\n            data.cid = `${cid}`;\n        }\n\n        if (!isNaN(internalData.pr) && internalData.pr !== 1 && internalData.pr !== null) {\n            data.pr = internalData.pr;\n        }\n\n        if (internalData.st) {\n            data.st = internalData.st;\n        }\n\n        if (internalData.sf) {\n            data.sf = internalData.sf;\n        }\n\n        return data;\n    }\n\n    function _getBitrateByRequest(request) {\n        try {\n            const quality = request.quality;\n            const bitrateList = request.mediaInfo.bitrateList;\n\n            return parseInt(bitrateList[quality].bandwidth / 1000);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getTopBitrateByType(mediaType) {\n        try {\n            const info = abrController.getTopBitrateInfoFor(mediaType);\n            return Math.round(info.bitrate / 1000);\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getObjectDurationByRequest(request) {\n        try {\n            return !isNaN(request.duration) ? Math.round(request.duration * 1000) : null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getMeasuredThroughputByType(mediaType) {\n        try {\n            return parseInt(abrController.getThroughputHistory().getSafeAverageThroughput(mediaType) / 100) * 100;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getDeadlineByType(mediaType) {\n        try {\n            const playbackRate = internalData.pr;\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n            if (!isNaN(playbackRate) && !isNaN(bufferLevel)) {\n                return parseInt((bufferLevel / playbackRate) * 10) * 100;\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _getBufferLevelByType(mediaType) {\n        try {\n            const bufferLevel = dashMetrics.getCurrentBufferLevel(mediaType);\n\n            if (!isNaN(bufferLevel)) {\n                return parseInt(bufferLevel * 10) * 100;\n            }\n\n            return null;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _onPlaybackRateChanged(data) {\n        try {\n            internalData.pr = data.playbackRate;\n        } catch (e) {\n\n        }\n    }\n\n    function _onManifestLoaded(data) {\n        try {\n            const isDynamic = dashManifestModel.getIsDynamic(data.data);\n            const st = isDynamic ? `${STREAM_TYPES.LIVE}` : `${STREAM_TYPES.VOD}`;\n            const sf = data.protocol && data.protocol === 'MSS' ? `${STREAMING_FORMATS.MSS}` : `${STREAMING_FORMATS.DASH}`;\n\n            internalData.st = `${st}`;\n            internalData.sf = `${sf}`;\n        } catch (e) {\n        }\n    }\n\n    function _onBufferLevelStateChanged(data) {\n        try {\n            if (data.state && data.mediaType) {\n                if (data.state === MediaPlayerEvents.BUFFER_EMPTY) {\n\n                    if (!_bufferLevelStarved[data.mediaType]) {\n                        _bufferLevelStarved[data.mediaType] = true;\n                    }\n                    if (!_isStartup[data.mediaType]) {\n                        _isStartup[data.mediaType] = true;\n                    }\n                }\n            }\n        } catch (e) {\n\n        }\n    }\n\n    function _onPlaybackSeeked() {\n        for (let key in _bufferLevelStarved) {\n            if (_bufferLevelStarved.hasOwnProperty(key)) {\n                _bufferLevelStarved[key] = true;\n            }\n        }\n\n        for (let key in _isStartup) {\n            if (_isStartup.hasOwnProperty(key)) {\n                _isStartup[key] = true;\n            }\n        }\n    }\n\n    function _buildFinalString(cmcdData) {\n        try {\n            if (!cmcdData) {\n                return null;\n            }\n            const keys = Object.keys(cmcdData).sort((a, b) => a.localeCompare(b));\n            const length = keys.length;\n\n            let cmcdString = keys.reduce((acc, key, index) => {\n                if (key === 'v' && cmcdData[key] === 1) return acc; // Version key should only be reported if it is != 1\n                if (typeof cmcdData[key] === 'string' && (key !== 'ot' || key !== 'sf' || key !== 'st')) {\n                    let string = cmcdData[key].replace(/\"/g, '\\\"');\n                    acc += `${key}=\"${string}\"`;\n                } else {\n                    acc += `${key}=${cmcdData[key]}`;\n                }\n                if (index < length - 1) {\n                    acc += ',';\n                }\n\n                return acc;\n            }, '');\n\n            cmcdString = cmcdString.replace(/=true/g, '');\n\n            return cmcdString;\n        } catch (e) {\n            return null;\n        }\n    }\n\n    function _probeNextRequest(mediaType) {\n        if (!streamProcessors || streamProcessors.length === 0) return;\n        for (let streamProcessor of streamProcessors) {\n            if (streamProcessor.getType() === mediaType) {\n                return streamProcessor.probeNextRequest();\n            }\n        }\n    }\n\n    function _calculateRtp(request) {\n        // Get the values we need\n        let playbackRate = playbackController.getPlaybackRate();\n        if (!playbackRate) playbackRate = 1;\n        let { quality, mediaType, mediaInfo, duration } = request;\n        let currentBufferLevel = _getBufferLevelByType(mediaType);\n        if (currentBufferLevel === 0) currentBufferLevel = 500;\n        let bitrate = mediaInfo.bitrateList[quality].bandwidth;\n\n        // Calculate RTP\n        let segmentSize = (bitrate * duration) / 1000; // Calculate file size in kilobits\n        let timeToLoad = (currentBufferLevel / playbackRate) / 1000; // Calculate time available to load file in seconds\n        let minBandwidth = segmentSize / timeToLoad; // Calculate the exact bandwidth required\n        let rtpSafetyFactor = settings.get().streaming.cmcd.rtpSafetyFactor && !isNaN(settings.get().streaming.cmcd.rtpSafetyFactor) ? settings.get().streaming.cmcd.rtpSafetyFactor : RTP_SAFETY_FACTOR;\n        let maxBandwidth = minBandwidth * rtpSafetyFactor; // Include a safety buffer\n\n        let rtp = (parseInt(maxBandwidth / 100) + 1) * 100; // Round to the next multiple of 100\n\n        return rtp;\n    }\n\n    function reset() {\n        eventBus.off(MediaPlayerEvents.PLAYBACK_RATE_CHANGED, _onPlaybackRateChanged, this);\n        eventBus.off(MediaPlayerEvents.MANIFEST_LOADED, _onManifestLoaded, this);\n        eventBus.off(MediaPlayerEvents.BUFFER_LEVEL_STATE_CHANGED, _onBufferLevelStateChanged, instance);\n        eventBus.off(MediaPlayerEvents.PLAYBACK_SEEKED, _onPlaybackSeeked, instance);\n\n        _resetInitialSettings();\n    }\n\n    instance = {\n        getQueryParameter,\n        getHeaderParameters,\n        setConfig,\n        reset,\n        initialize\n    };\n\n    setup();\n\n    return instance;\n}\n\nCmcdModel.__dashjs_factory_name = 'CmcdModel';\nexport default FactoryMaker.getSingletonFactory(CmcdModel);\n"]},"metadata":{},"sourceType":"script"}