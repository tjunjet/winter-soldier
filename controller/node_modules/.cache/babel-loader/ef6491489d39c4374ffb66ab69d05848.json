{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* Static methods for rounding decimals\n*\n* Modified version of the CC0-licenced example at:\n* https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n*\n* @export\n* @class Round10\n* @ignore\n*/\n\n\nvar Round10 = function () {\n  function Round10() {\n    _classCallCheck(this, Round10);\n  }\n\n  _createClass(Round10, null, [{\n    key: 'round10',\n\n    /**\n    * Decimal round.\n    *\n    * @param {Number}  value The number.\n    * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\n    * @returns {Number} The adjusted value.\n    * @ignore\n    */\n    value: function round10(value, exp) {\n      return _decimalAdjust('round', value, exp);\n    }\n  }]);\n\n  return Round10;\n}();\n/**\n* Decimal adjustment of a number.\n*\n* @param {String}  type  The type of adjustment.\n* @param {Number}  value The number.\n* @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\n* @returns {Number} The adjusted value.\n* @ignore\n*/\n\n\nexports.default = Round10;\n\nfunction _decimalAdjust(type, value, exp) {\n  // If the exp is undefined or zero...\n  if (typeof exp === 'undefined' || +exp === 0) {\n    return Math[type](value);\n  }\n\n  value = +value;\n  exp = +exp; // If the value is not a number or the exp is not an integer...\n\n  if (value === null || isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n    return NaN;\n  } // Shift\n\n\n  value = value.toString().split('e');\n  value = Math[type](+(value[0] + 'e' + (value[1] ? +value[1] - exp : -exp))); // Shift back\n\n  value = value.toString().split('e');\n  return +(value[0] + 'e' + (value[1] ? +value[1] + exp : exp));\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;IAUqBA,O;;;;;;;;IACjB;;;;;;;;4BAQeC,OAAOC,KAAK;MACvB,OAAOC,eAAe,OAAfA,EAAwBF,KAAxBE,EAA+BD,GAA/BC,CAAP;;;;;;AAIR;;;;;;;;;;;kBAdqBH;;AAuBrB,SAASG,cAAT,CAAwBC,IAAxB,EAA8BH,KAA9B,EAAqCC,GAArC,EAA0C;EACtC;EACA,IAAI,OAAOA,GAAP,KAAe,WAAf,IAA8B,CAACA,GAAD,KAAS,CAA3C,EAA8C;IAC1C,OAAOG,KAAKD,IAALC,EAAWJ,KAAXI,CAAP;EAGJJ;;EAAAA,QAAQ,CAACA,KAATA;EACAC,MAAM,CAACA,GAAPA,CAPsC,CAStC;;EACA,IAAID,UAAU,IAAVA,IAAkBK,MAAML,KAANK,CAAlBL,IAAkC,EAAE,OAAOC,GAAP,KAAe,QAAf,IAA2BA,MAAM,CAANA,KAAY,CAAzC,CAAtC,EAAmF;IAC/E,OAAOK,GAAP;EAGJ,CAdsC,CActC;;;EACAN,QAAQA,MAAMO,QAANP,GAAiBQ,KAAjBR,CAAuB,GAAvBA,CAARA;EACAA,QAAQI,KAAKD,IAALC,EAAW,EAAEJ,MAAM,CAANA,IAAW,GAAXA,IAAkBA,MAAM,CAANA,IAAY,CAACA,MAAM,CAANA,CAAD,GAAYC,GAAxBD,GAA+B,CAACC,GAAlDD,CAAF,CAAXI,CAARJ,CAhBsC,CAkBtC;;EACAA,QAAQA,MAAMO,QAANP,GAAiBQ,KAAjBR,CAAuB,GAAvBA,CAARA;EACA,OAAO,EAAEA,MAAM,CAANA,IAAW,GAAXA,IAAkBA,MAAM,CAANA,IAAY,CAACA,MAAM,CAANA,CAAD,GAAYC,GAAxBD,GAA+BC,GAAjDD,CAAF,CAAP;AACH","names":["Round10","value","exp","_decimalAdjust","type","Math","isNaN","NaN","toString","split"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/dash/utils/Round10.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Static methods for rounding decimals\n *\n * Modified version of the CC0-licenced example at:\n * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round\n *\n * @export\n * @class Round10\n * @ignore\n */\nexport default class Round10 {\n    /**\n    * Decimal round.\n    *\n    * @param {Number}  value The number.\n    * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\n    * @returns {Number} The adjusted value.\n    * @ignore\n    */\n    static round10(value, exp) {\n        return _decimalAdjust('round', value, exp);\n    }\n}\n\n/**\n * Decimal adjustment of a number.\n *\n * @param {String}  type  The type of adjustment.\n * @param {Number}  value The number.\n * @param {Integer} exp   The exponent (the 10 logarithm of the adjustment base).\n * @returns {Number} The adjusted value.\n * @ignore\n */\nfunction _decimalAdjust(type, value, exp) {\n    // If the exp is undefined or zero...\n    if (typeof exp === 'undefined' || +exp === 0) {\n        return Math[type](value);\n    }\n\n    value = +value;\n    exp = +exp;\n\n    // If the value is not a number or the exp is not an integer...\n    if (value === null || isNaN(value) || !(typeof exp === 'number' && exp % 1 === 0)) {\n        return NaN;\n    }\n\n    // Shift\n    value = value.toString().split('e');\n    value = Math[type](+(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp)));\n\n    // Shift back\n    value = value.toString().split('e');\n    return +(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp));\n}"]},"metadata":{},"sourceType":"script"}