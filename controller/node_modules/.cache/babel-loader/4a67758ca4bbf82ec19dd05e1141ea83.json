{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Constants = require('../../streaming/constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction SegmentBaseGetter(config) {\n  config = config || {};\n  var timelineConverter = config.timelineConverter;\n  var instance = void 0;\n\n  function checkConfig() {\n    if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n\n  function getSegmentByIndex(representation, index) {\n    checkConfig();\n\n    if (!representation) {\n      return null;\n    }\n\n    var len = representation.segments ? representation.segments.length : -1;\n    var seg = void 0;\n\n    if (index < len) {\n      seg = representation.segments[index];\n\n      if (seg && seg.availabilityIdx === index) {\n        return seg;\n      }\n    }\n\n    for (var i = 0; i < len; i++) {\n      seg = representation.segments[i];\n\n      if (seg && seg.availabilityIdx === index) {\n        return seg;\n      }\n    }\n\n    return null;\n  }\n\n  function getSegmentByTime(representation, requestedTime) {\n    checkConfig();\n    var index = getIndexByTime(representation, requestedTime);\n    return getSegmentByIndex(representation, index);\n  }\n\n  function getIndexByTime(representation, time) {\n    if (!representation) {\n      return -1;\n    }\n\n    var segments = representation.segments;\n    var ln = segments ? segments.length : null;\n    var idx = -1;\n    var epsilon = void 0,\n        frag = void 0,\n        ft = void 0,\n        fd = void 0,\n        i = void 0;\n\n    if (segments && ln > 0) {\n      for (i = 0; i < ln; i++) {\n        frag = segments[i];\n        ft = frag.presentationStartTime;\n        fd = frag.duration;\n        epsilon = fd / 2;\n\n        if (time + epsilon >= ft && time - epsilon < ft + fd) {\n          idx = frag.availabilityIdx;\n          break;\n        }\n      }\n    }\n\n    return idx;\n  }\n\n  instance = {\n    getSegmentByIndex: getSegmentByIndex,\n    getSegmentByTime: getSegmentByTime\n  };\n  return instance;\n}\n\nSegmentBaseGetter.__dashjs_factory_name = 'SegmentBaseGetter';\n\nvar factory = _FactoryMaker2.default.getClassFactory(SegmentBaseGetter);\n\nexports.default = factory;","map":{"version":3,"mappings":";;;;;;AA+BA;;;;AACA;;;;;;;;AAhCA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA,SAASA,iBAAT,CAA2BC,MAA3B,EAAmC;EAE/BA,SAASA,UAAU,EAAnBA;EACA,IAAMC,oBAAoBD,OAAOC,iBAAjC;EAEA,IAAIC,iBAAJ;;EAEA,SAASC,WAAT,GAAuB;IACnB,IAAI,CAACF,iBAAD,IAAsB,CAACA,kBAAkBG,cAAlBH,CAAiC,2CAAjCA,CAA3B,EAA0G;MACtG,MAAM,IAAII,KAAJ,CAAUC,oBAAUC,oBAApB,CAAN;IAEP;EAED;;EAAA,SAASC,iBAAT,CAA2BC,cAA3B,EAA2CC,KAA3C,EAAkD;IAC9CP;;IAEA,IAAI,CAACM,cAAL,EAAqB;MACjB,OAAO,IAAP;IAGJ;;IAAA,IAAME,MAAMF,eAAeG,QAAfH,GAA0BA,eAAeG,QAAfH,CAAwBI,MAAlDJ,GAA2D,CAAC,CAAxE;IACA,IAAIK,YAAJ;;IACA,IAAIJ,QAAQC,GAAZ,EAAiB;MACbG,MAAML,eAAeG,QAAfH,CAAwBC,KAAxBD,CAANK;;MACA,IAAIA,OAAOA,IAAIC,eAAJD,KAAwBJ,KAAnC,EAA0C;QACtC,OAAOI,GAAP;MAEP;IAED;;IAAA,KAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIL,GAApB,EAAyBK,GAAzB,EAA8B;MAC1BF,MAAML,eAAeG,QAAfH,CAAwBO,CAAxBP,CAANK;;MAEA,IAAIA,OAAOA,IAAIC,eAAJD,KAAwBJ,KAAnC,EAA0C;QACtC,OAAOI,GAAP;MAEP;IAED;;IAAA,OAAO,IAAP;EAGJ;;EAAA,SAASG,gBAAT,CAA0BR,cAA1B,EAA0CS,aAA1C,EAAyD;IACrDf;IAEA,IAAMO,QAAQS,eAAeV,cAAfU,EAA+BD,aAA/BC,CAAd;IAEA,OAAOX,kBAAkBC,cAAlBD,EAAkCE,KAAlCF,CAAP;EAGJ;;EAAA,SAASW,cAAT,CAAwBV,cAAxB,EAAwCW,IAAxC,EAA8C;IAC1C,IAAI,CAACX,cAAL,EAAqB;MACjB,OAAO,CAAC,CAAR;IAGJ;;IAAA,IAAMG,WAAWH,eAAeG,QAAhC;IACA,IAAMS,KAAKT,WAAWA,SAASC,MAApBD,GAA6B,IAAxC;IAEA,IAAIU,MAAM,CAAC,CAAX;IACA,IAAIC,gBAAJ;IAAA,IACIC,aADJ;IAAA,IAEIC,WAFJ;IAAA,IAGIC,WAHJ;IAAA,IAIIV,UAJJ;;IAMA,IAAIJ,YAAYS,KAAK,CAArB,EAAwB;MACpB,KAAKL,IAAI,CAAT,EAAYA,IAAIK,EAAhB,EAAoBL,GAApB,EAAyB;QACrBQ,OAAOZ,SAASI,CAATJ,CAAPY;QACAC,KAAKD,KAAKG,qBAAVF;QACAC,KAAKF,KAAKI,QAAVF;QAEAH,UAAUG,KAAK,CAAfH;;QACA,IAAKH,OAAOG,OAAPH,IAAmBK,EAAnBL,IACAA,OAAOG,OAAPH,GAAmBK,KAAKC,EAD7B,EACkC;UAC9BJ,MAAME,KAAKT,eAAXO;UACA;QAEP;MACJ;IAED;;IAAA,OAAOA,GAAP;EAGJpB;;EAAAA,WAAW;IACPM,mBAAmBA,iBADZ;IAEPS,kBAAkBA;EAFX,CAAXf;EAKA,OAAOA,QAAP;AAGJH;;AAAAA,kBAAkB8B,qBAAlB9B,GAA0C,mBAA1CA;;AACA,IAAM+B,UAAUC,uBAAaC,eAAbD,CAA6BhC,iBAA7BgC,CAAhB;;kBACeD,O","names":["SegmentBaseGetter","config","timelineConverter","instance","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getSegmentByIndex","representation","index","len","segments","length","seg","availabilityIdx","i","getSegmentByTime","requestedTime","getIndexByTime","time","ln","idx","epsilon","frag","ft","fd","presentationStartTime","duration","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/dash/utils/SegmentBaseGetter.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../../streaming/constants/Constants';\n\n\nfunction SegmentBaseGetter(config) {\n\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSegmentByIndex(representation, index) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const len = representation.segments ? representation.segments.length : -1;\n        let seg;\n        if (index < len) {\n            seg = representation.segments[index];\n            if (seg && seg.availabilityIdx === index) {\n                return seg;\n            }\n        }\n\n        for (let i = 0; i < len; i++) {\n            seg = representation.segments[i];\n\n            if (seg && seg.availabilityIdx === index) {\n                return seg;\n            }\n        }\n\n        return null;\n    }\n\n    function getSegmentByTime(representation, requestedTime) {\n        checkConfig();\n\n        const index = getIndexByTime(representation, requestedTime);\n\n        return getSegmentByIndex(representation, index);\n    }\n\n    function getIndexByTime(representation, time) {\n        if (!representation) {\n            return -1;\n        }\n\n        const segments = representation.segments;\n        const ln = segments ? segments.length : null;\n\n        let idx = -1;\n        let epsilon,\n            frag,\n            ft,\n            fd,\n            i;\n\n        if (segments && ln > 0) {\n            for (i = 0; i < ln; i++) {\n                frag = segments[i];\n                ft = frag.presentationStartTime;\n                fd = frag.duration;\n\n                epsilon = fd / 2;\n                if ((time + epsilon) >= ft &&\n                    (time - epsilon) < (ft + fd)) {\n                    idx = frag.availabilityIdx;\n                    break;\n                }\n            }\n        }\n\n        return idx;\n    }\n\n    instance = {\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    return instance;\n}\n\nSegmentBaseGetter.__dashjs_factory_name = 'SegmentBaseGetter';\nconst factory = FactoryMaker.getClassFactory(SegmentBaseGetter);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}