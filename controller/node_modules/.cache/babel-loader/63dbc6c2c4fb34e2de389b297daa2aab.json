{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _Thumbnail = require('../vo/Thumbnail');\n\nvar _Thumbnail2 = _interopRequireDefault(_Thumbnail);\n\nvar _ThumbnailTracks = require('./ThumbnailTracks');\n\nvar _ThumbnailTracks2 = _interopRequireDefault(_ThumbnailTracks);\n\nvar _BitrateInfo = require('../vo/BitrateInfo');\n\nvar _BitrateInfo2 = _interopRequireDefault(_BitrateInfo);\n\nvar _SegmentsUtils = require('../../dash/utils/SegmentsUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction ThumbnailController(config) {\n  var context = this.context;\n  var streamInfo = config.streamInfo;\n  var instance = void 0,\n      thumbnailTracks = void 0;\n\n  function setup() {\n    reset();\n    thumbnailTracks = (0, _ThumbnailTracks2.default)(context).create({\n      streamInfo: streamInfo,\n      adapter: config.adapter,\n      baseURLController: config.baseURLController,\n      timelineConverter: config.timelineConverter,\n      debug: config.debug,\n      eventBus: config.eventBus,\n      events: config.events,\n      dashConstants: config.dashConstants\n    });\n  }\n\n  function getStreamId() {\n    return streamInfo.id;\n  }\n\n  function provideThumbnail(time, callback) {\n    if (typeof callback !== 'function') {\n      return;\n    }\n\n    var track = thumbnailTracks.getCurrentTrack();\n    var offset = void 0,\n        request = void 0;\n\n    if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {\n      callback(null);\n      return;\n    } // Calculate index of the sprite given a time\n\n\n    if (isNaN(track.segmentDuration)) {\n      request = thumbnailTracks.getThumbnailRequestForTime(time);\n\n      if (request) {\n        track.segmentDuration = request.duration;\n      }\n    }\n\n    offset = time % track.segmentDuration;\n    var thumbIndex = Math.floor(offset * track.tilesHor * track.tilesVert / track.segmentDuration); // Create and return the thumbnail\n\n    var thumbnail = new _Thumbnail2.default();\n    thumbnail.width = Math.floor(track.widthPerTile);\n    thumbnail.height = Math.floor(track.heightPerTile);\n    thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;\n    thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;\n\n    if ('readThumbnail' in track) {\n      return track.readThumbnail(time, function (url) {\n        thumbnail.url = url;\n        callback(thumbnail);\n      });\n    } else {\n      if (!request) {\n        var seq = Math.floor(time / track.segmentDuration);\n        thumbnail.url = buildUrlFromTemplate(track, seq);\n      } else {\n        thumbnail.url = request.url;\n        track.segmentDuration = NaN;\n      }\n\n      callback(thumbnail);\n    }\n  }\n\n  function buildUrlFromTemplate(track, seq) {\n    var seqIdx = seq + track.startNumber;\n    var url = (0, _SegmentsUtils.replaceTokenForTemplate)(track.templateUrl, 'Number', seqIdx);\n    url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Time', (seqIdx - 1) * track.segmentDuration * track.timescale);\n    url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Bandwidth', track.bandwidth);\n    return (0, _SegmentsUtils.unescapeDollarsInTemplate)(url);\n  }\n\n  function setTrackByIndex(index) {\n    thumbnailTracks.setTrackByIndex(index);\n  }\n\n  function getCurrentTrackIndex() {\n    return thumbnailTracks.getCurrentTrackIndex();\n  }\n\n  function getBitrateList() {\n    var tracks = thumbnailTracks.getTracks();\n    var i = 0;\n    return tracks.map(function (t) {\n      var bitrateInfo = new _BitrateInfo2.default();\n      bitrateInfo.mediaType = _Constants2.default.IMAGE;\n      bitrateInfo.qualityIndex = i++;\n      bitrateInfo.bitrate = t.bitrate;\n      bitrateInfo.width = t.width;\n      bitrateInfo.height = t.height;\n      return bitrateInfo;\n    });\n  }\n\n  function reset() {\n    if (thumbnailTracks) {\n      thumbnailTracks.reset();\n    }\n  }\n\n  instance = {\n    getStreamId: getStreamId,\n    provide: provideThumbnail,\n    setTrackByIndex: setTrackByIndex,\n    getCurrentTrackIndex: getCurrentTrackIndex,\n    getBitrateList: getBitrateList,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n\nThumbnailController.__dashjs_factory_name = 'ThumbnailController';\nexports.default = _FactoryMaker2.default.getClassFactory(ThumbnailController);","map":{"version":3,"mappings":"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","names":["ThumbnailController","config","context","streamInfo","instance","thumbnailTracks","setup","reset","create","adapter","baseURLController","timelineConverter","debug","eventBus","events","dashConstants","getStreamId","id","provideThumbnail","time","callback","track","getCurrentTrack","offset","request","segmentDuration","undefined","isNaN","getThumbnailRequestForTime","duration","thumbIndex","Math","floor","tilesHor","tilesVert","thumbnail","Thumbnail","width","widthPerTile","height","heightPerTile","x","y","readThumbnail","url","seq","buildUrlFromTemplate","NaN","seqIdx","startNumber","templateUrl","timescale","bandwidth","setTrackByIndex","index","getCurrentTrackIndex","getBitrateList","tracks","getTracks","i","map","t","bitrateInfo","BitrateInfo","mediaType","Constants","IMAGE","qualityIndex","bitrate","provide","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/thumbnail/ThumbnailController.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../constants/Constants';\nimport Thumbnail from '../vo/Thumbnail';\nimport ThumbnailTracks from './ThumbnailTracks';\nimport BitrateInfo from '../vo/BitrateInfo';\nimport { replaceTokenForTemplate, unescapeDollarsInTemplate } from '../../dash/utils/SegmentsUtils';\n\nfunction ThumbnailController(config) {\n\n    const context = this.context;\n    const streamInfo = config.streamInfo;\n\n    let instance,\n        thumbnailTracks;\n\n    function setup() {\n        reset();\n        thumbnailTracks = ThumbnailTracks(context).create({\n            streamInfo: streamInfo,\n            adapter: config.adapter,\n            baseURLController: config.baseURLController,\n            timelineConverter: config.timelineConverter,\n            debug: config.debug,\n            eventBus: config.eventBus,\n            events: config.events,\n            dashConstants: config.dashConstants\n        });\n    }\n\n    function getStreamId() {\n        return streamInfo.id;\n    }\n\n    function provideThumbnail(time, callback) {\n\n        if (typeof callback !== 'function') {\n            return;\n        }\n        const track = thumbnailTracks.getCurrentTrack();\n        let offset,\n            request;\n        if (!track || track.segmentDuration <= 0 || time === undefined || time === null) {\n            callback(null);\n            return;\n        }\n\n        // Calculate index of the sprite given a time\n        if (isNaN(track.segmentDuration)) {\n            request = thumbnailTracks.getThumbnailRequestForTime(time);\n            if (request) {\n                track.segmentDuration = request.duration;\n            }\n        }\n\n        offset = time % track.segmentDuration;\n\n        const thumbIndex = Math.floor((offset * track.tilesHor * track.tilesVert) / track.segmentDuration);\n        // Create and return the thumbnail\n        const thumbnail = new Thumbnail();\n\n        thumbnail.width = Math.floor(track.widthPerTile);\n        thumbnail.height = Math.floor(track.heightPerTile);\n        thumbnail.x = Math.floor(thumbIndex % track.tilesHor) * track.widthPerTile;\n        thumbnail.y = Math.floor(thumbIndex / track.tilesHor) * track.heightPerTile;\n\n        if ('readThumbnail' in track) {\n            return track.readThumbnail(time, (url) => {\n                thumbnail.url = url;\n                callback(thumbnail);\n            });\n        } else {\n            if (!request) {\n                const seq = Math.floor(time / track.segmentDuration);\n                thumbnail.url = buildUrlFromTemplate(track, seq);\n            } else {\n                thumbnail.url = request.url;\n                track.segmentDuration = NaN;\n            }\n            callback(thumbnail);\n        }\n    }\n\n    function buildUrlFromTemplate(track, seq) {\n        const seqIdx = seq + track.startNumber;\n        let url = replaceTokenForTemplate(track.templateUrl, 'Number', seqIdx);\n        url = replaceTokenForTemplate(url, 'Time', (seqIdx - 1) * track.segmentDuration * track.timescale);\n        url = replaceTokenForTemplate(url, 'Bandwidth', track.bandwidth);\n        return unescapeDollarsInTemplate(url);\n    }\n\n    function setTrackByIndex(index) {\n        thumbnailTracks.setTrackByIndex(index);\n    }\n\n    function getCurrentTrackIndex() {\n        return thumbnailTracks.getCurrentTrackIndex();\n    }\n\n    function getBitrateList() {\n        const tracks = thumbnailTracks.getTracks();\n        let i = 0;\n\n        return tracks.map((t) => {\n            const bitrateInfo = new BitrateInfo();\n            bitrateInfo.mediaType = Constants.IMAGE;\n            bitrateInfo.qualityIndex = i++;\n            bitrateInfo.bitrate = t.bitrate;\n            bitrateInfo.width = t.width;\n            bitrateInfo.height = t.height;\n            return bitrateInfo;\n        });\n    }\n\n    function reset() {\n        if (thumbnailTracks) {\n            thumbnailTracks.reset();\n        }\n    }\n\n    instance = {\n        getStreamId: getStreamId,\n        provide: provideThumbnail,\n        setTrackByIndex: setTrackByIndex,\n        getCurrentTrackIndex: getCurrentTrackIndex,\n        getBitrateList: getBitrateList,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nThumbnailController.__dashjs_factory_name = 'ThumbnailController';\nexport default FactoryMaker.getClassFactory(ThumbnailController);\n"]},"metadata":{},"sourceType":"script"}