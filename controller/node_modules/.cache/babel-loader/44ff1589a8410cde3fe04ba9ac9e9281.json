{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('./constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _URLLoader = require('./net/URLLoader');\n\nvar _URLLoader2 = _interopRequireDefault(_URLLoader);\n\nvar _HeadRequest = require('./vo/HeadRequest');\n\nvar _HeadRequest2 = _interopRequireDefault(_HeadRequest);\n\nvar _DashJSError = require('./vo/DashJSError');\n\nvar _DashJSError2 = _interopRequireDefault(_DashJSError);\n\nvar _FactoryMaker = require('../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction FragmentLoader(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = config.eventBus;\n  var events = config.events;\n  var urlUtils = config.urlUtils;\n  var errors = config.errors;\n  var instance = void 0,\n      urlLoader = void 0;\n\n  function setup() {\n    urlLoader = (0, _URLLoader2.default)(context).create({\n      errHandler: config.errHandler,\n      errors: errors,\n      dashMetrics: config.dashMetrics,\n      mediaPlayerModel: config.mediaPlayerModel,\n      requestModifier: config.requestModifier,\n      useFetch: config.settings.get().streaming.lowLatencyEnabled,\n      urlUtils: urlUtils,\n      constants: _Constants2.default,\n      boxParser: config.boxParser,\n      dashConstants: config.dashConstants,\n      requestTimeout: config.settings.get().streaming.fragmentRequestTimeout\n    });\n  }\n\n  function checkForExistence(request) {\n    var report = function report(success) {\n      eventBus.trigger(events.CHECK_FOR_EXISTENCE_COMPLETED, {\n        request: request,\n        exists: success\n      });\n    };\n\n    if (request) {\n      var headRequest = new _HeadRequest2.default(request.url);\n      urlLoader.load({\n        request: headRequest,\n        success: function success() {\n          report(true);\n        },\n        error: function error() {\n          report(false);\n        }\n      });\n    } else {\n      report(false);\n    }\n  }\n\n  function load(request) {\n    var report = function report(data, error) {\n      eventBus.trigger(events.LOADING_COMPLETED, {\n        request: request,\n        response: data || null,\n        error: error || null,\n        sender: instance\n      });\n    };\n\n    if (request) {\n      urlLoader.load({\n        request: request,\n        progress: function progress(event) {\n          eventBus.trigger(events.LOADING_PROGRESS, {\n            request: request,\n            stream: event.stream\n          });\n\n          if (event.data) {\n            eventBus.trigger(events.LOADING_DATA_PROGRESS, {\n              request: request,\n              response: event.data || null,\n              error: null,\n              sender: instance\n            });\n          }\n        },\n        success: function success(data) {\n          report(data);\n        },\n        error: function error(request, statusText, errorText) {\n          report(undefined, new _DashJSError2.default(errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE, errorText, statusText));\n        },\n        abort: function abort(request) {\n          if (request) {\n            eventBus.trigger(events.LOADING_ABANDONED, {\n              mediaType: request.mediaType,\n              request: request,\n              sender: instance\n            });\n          }\n        }\n      });\n    } else {\n      report(undefined, new _DashJSError2.default(errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE, errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE));\n    }\n  }\n\n  function abort() {\n    if (urlLoader) {\n      urlLoader.abort();\n    }\n  }\n\n  function reset() {\n    if (urlLoader) {\n      urlLoader.abort();\n      urlLoader = null;\n    }\n  }\n\n  instance = {\n    checkForExistence: checkForExistence,\n    load: load,\n    abort: abort,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\nexports.default = _FactoryMaker2.default.getClassFactory(FragmentLoader);","map":{"version":3,"mappings":"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","names":["FragmentLoader","config","context","eventBus","events","urlUtils","errors","instance","urlLoader","setup","create","errHandler","dashMetrics","mediaPlayerModel","requestModifier","useFetch","settings","get","streaming","lowLatencyEnabled","constants","Constants","boxParser","dashConstants","requestTimeout","fragmentRequestTimeout","checkForExistence","request","report","success","trigger","CHECK_FOR_EXISTENCE_COMPLETED","exists","headRequest","HeadRequest","url","load","error","data","LOADING_COMPLETED","response","sender","progress","event","LOADING_PROGRESS","stream","LOADING_DATA_PROGRESS","statusText","errorText","undefined","DashJSError","FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE","abort","LOADING_ABANDONED","mediaType","FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE","FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE","reset","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/FragmentLoader.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from './constants/Constants';\nimport URLLoader from './net/URLLoader';\nimport HeadRequest from './vo/HeadRequest';\nimport DashJSError from './vo/DashJSError';\nimport FactoryMaker from '../core/FactoryMaker';\n\nfunction FragmentLoader(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;\n    const events = config.events;\n    const urlUtils = config.urlUtils;\n    const errors = config.errors;\n\n    let instance,\n        urlLoader;\n\n    function setup() {\n        urlLoader = URLLoader(context).create({\n            errHandler: config.errHandler,\n            errors: errors,\n            dashMetrics: config.dashMetrics,\n            mediaPlayerModel: config.mediaPlayerModel,\n            requestModifier: config.requestModifier,\n            useFetch: config.settings.get().streaming.lowLatencyEnabled,\n            urlUtils: urlUtils,\n            constants: Constants,\n            boxParser: config.boxParser,\n            dashConstants: config.dashConstants,\n            requestTimeout: config.settings.get().streaming.fragmentRequestTimeout\n        });\n    }\n\n    function checkForExistence(request) {\n        const report = function (success) {\n            eventBus.trigger(events.CHECK_FOR_EXISTENCE_COMPLETED, {\n                    request: request,\n                    exists: success\n                }\n            );\n        };\n\n        if (request) {\n            let headRequest = new HeadRequest(request.url);\n            urlLoader.load({\n                request: headRequest,\n                success: function () {\n                    report(true);\n                },\n                error: function () {\n                    report(false);\n                }\n            });\n        } else {\n            report(false);\n        }\n    }\n\n    function load(request) {\n        const report = function (data, error) {\n            eventBus.trigger(events.LOADING_COMPLETED, {\n                request: request,\n                response: data || null,\n                error: error || null,\n                sender: instance\n            });\n        };\n\n        if (request) {\n            urlLoader.load({\n                request: request,\n                progress: function (event) {\n                    eventBus.trigger(events.LOADING_PROGRESS, {\n                        request: request,\n                        stream: event.stream\n                    });\n                    if (event.data) {\n                        eventBus.trigger(events.LOADING_DATA_PROGRESS, {\n                            request: request,\n                            response: event.data || null,\n                            error: null,\n                            sender: instance\n                        });\n                    }\n                },\n                success: function (data) {\n                    report(data);\n                },\n                error: function (request, statusText, errorText) {\n                    report(\n                        undefined,\n                        new DashJSError(\n                            errors.FRAGMENT_LOADER_LOADING_FAILURE_ERROR_CODE,\n                            errorText,\n                            statusText\n                        )\n                    );\n                },\n                abort: function (request) {\n                    if (request) {\n                        eventBus.trigger(events.LOADING_ABANDONED, {\n                            mediaType: request.mediaType,\n                            request: request,\n                            sender: instance\n                        });\n                    }\n                }\n            });\n        } else {\n            report(\n                undefined,\n                new DashJSError(\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_CODE,\n                    errors.FRAGMENT_LOADER_NULL_REQUEST_ERROR_MESSAGE\n                )\n            );\n        }\n    }\n\n    function abort() {\n        if (urlLoader) {\n            urlLoader.abort();\n        }\n    }\n\n    function reset() {\n        if (urlLoader) {\n            urlLoader.abort();\n            urlLoader = null;\n        }\n    }\n\n    instance = {\n        checkForExistence: checkForExistence,\n        load: load,\n        abort: abort,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentLoader.__dashjs_factory_name = 'FragmentLoader';\nexport default FactoryMaker.getClassFactory(FragmentLoader);\n"]},"metadata":{},"sourceType":"script"}