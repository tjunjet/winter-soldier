{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Errors = require('../../core/errors/Errors');\n\nvar _Errors2 = _interopRequireDefault(_Errors);\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _BlacklistController = require('../controllers/BlacklistController');\n\nvar _BlacklistController2 = _interopRequireDefault(_BlacklistController);\n\nvar _DVBSelector = require('./baseUrlResolution/DVBSelector');\n\nvar _DVBSelector2 = _interopRequireDefault(_DVBSelector);\n\nvar _BasicSelector = require('./baseUrlResolution/BasicSelector');\n\nvar _BasicSelector2 = _interopRequireDefault(_BasicSelector);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _DashJSError = require('../vo/DashJSError');\n\nvar _DashJSError2 = _interopRequireDefault(_DashJSError);\n\nvar _SupervisorTools = require('../utils/SupervisorTools');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction BaseURLSelector() {\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var instance = void 0,\n      serviceLocationBlacklistController = void 0,\n      basicSelector = void 0,\n      dvbSelector = void 0,\n      selector = void 0;\n\n  function setup() {\n    serviceLocationBlacklistController = (0, _BlacklistController2.default)(context).create({\n      updateEventName: _Events2.default.SERVICE_LOCATION_BLACKLIST_CHANGED,\n      addBlacklistEventName: _Events2.default.SERVICE_LOCATION_BLACKLIST_ADD\n    });\n    basicSelector = (0, _BasicSelector2.default)(context).create({\n      blacklistController: serviceLocationBlacklistController\n    });\n    dvbSelector = (0, _DVBSelector2.default)(context).create({\n      blacklistController: serviceLocationBlacklistController\n    });\n    selector = basicSelector;\n  }\n\n  function setConfig(config) {\n    if (config.selector) {\n      selector = config.selector;\n    }\n  }\n\n  function chooseSelector(isDVB) {\n    (0, _SupervisorTools.checkParameterType)(isDVB, 'boolean');\n    selector = isDVB ? dvbSelector : basicSelector;\n  }\n\n  function select(data) {\n    if (!data) {\n      return;\n    }\n\n    var baseUrls = data.baseUrls;\n    var selectedIdx = data.selectedIdx; // Once a random selection has been carried out amongst a group of BaseURLs with the same\n    // @priority attribute value, then that choice should be re-used if the selection needs to be made again\n    // unless the blacklist has been modified or the available BaseURLs have changed.\n\n    if (!isNaN(selectedIdx)) {\n      return baseUrls[selectedIdx];\n    }\n\n    var selectedBaseUrl = selector.select(baseUrls);\n\n    if (!selectedBaseUrl) {\n      eventBus.trigger(_Events2.default.URL_RESOLUTION_FAILED, {\n        error: new _DashJSError2.default(_Errors2.default.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE, _Errors2.default.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE)\n      });\n\n      if (selector === basicSelector) {\n        reset();\n      }\n\n      return;\n    }\n\n    data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);\n    return selectedBaseUrl;\n  }\n\n  function reset() {\n    serviceLocationBlacklistController.reset();\n  }\n\n  instance = {\n    chooseSelector: chooseSelector,\n    select: select,\n    reset: reset,\n    setConfig: setConfig\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nBaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';\nexports.default = _FactoryMaker2.default.getClassFactory(BaseURLSelector);","map":{"version":3,"mappings":";;;;;;AA+BA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA;;AAAA,SAASA,eAAT,GAA2B;EAEvB,IAAMC,UAAU,KAAKA,OAArB;EACA,IAAMC,WAAW,wBAASD,OAAT,EAAkBE,WAAlB,EAAjB;EAEA,IAAIC,iBAAJ;EAAA,IACIC,2CADJ;EAAA,IAEIC,sBAFJ;EAAA,IAGIC,oBAHJ;EAAA,IAIIC,iBAJJ;;EAMA,SAASC,KAAT,GAAiB;IACbJ,qCAAqC,mCAAoBJ,OAApB,EAA6BS,MAA7B,CAAoC;MACrEC,iBAAwBC,iBAAOC,kCADsC;MAErEC,uBAA0BF,iBAAOG;IAFoC,CAApC,CAArCV;IAKAC,gBAAgB,6BAAcL,OAAd,EAAuBS,MAAvB,CAA8B;MAC1CM,qBAAqBX;IADqB,CAA9B,CAAhBC;IAIAC,cAAc,2BAAYN,OAAZ,EAAqBS,MAArB,CAA4B;MACtCM,qBAAqBX;IADiB,CAA5B,CAAdE;IAIAC,WAAWF,aAAXE;EAGJ;;EAAA,SAASS,SAAT,CAAmBC,MAAnB,EAA2B;IACvB,IAAIA,OAAOV,QAAX,EAAqB;MACjBA,WAAWU,OAAOV,QAAlBA;IAEP;EAED;;EAAA,SAASW,cAAT,CAAwBC,KAAxB,EAA+B;IAC3B,yCAAmBA,KAAnB,EAA0B,SAA1B;IACAZ,WAAWY,QAAQb,WAARa,GAAsBd,aAAjCE;EAGJ;;EAAA,SAASa,MAAT,CAAgBC,IAAhB,EAAsB;IAClB,IAAI,CAACA,IAAL,EAAW;MACP;IAEJ;;IAAA,IAAMC,WAAWD,KAAKC,QAAtB;IACA,IAAMC,cAAcF,KAAKE,WAAzB,CALkB,CAOlB;IACA;IACA;;IACA,IAAI,CAACC,MAAMD,WAANC,CAAL,EAAyB;MACrB,OAAOF,SAASC,WAATD,CAAP;IAGJ;;IAAA,IAAIG,kBAAkBlB,SAASa,MAATb,CAAgBe,QAAhBf,CAAtB;;IAEA,IAAI,CAACkB,eAAL,EAAsB;MAClBxB,SAASyB,OAATzB,CAAiBU,iBAAOgB,qBAAxB1B,EAA+C;QAC3C2B,OAAO,IAAIC,qBAAJ,CACHC,iBAAOC,wCADJ,EAEHD,iBAAOE,2CAFJ;MADoC,CAA/C/B;;MAMA,IAAIM,aAAaF,aAAjB,EAAgC;QAC5B4B;MAEJ;;MAAA;IAGJZ;;IAAAA,KAAKE,WAALF,GAAmBC,SAASY,OAATZ,CAAiBG,eAAjBH,CAAnBD;IAEA,OAAOI,eAAP;EAGJ;;EAAA,SAASQ,KAAT,GAAiB;IACb7B,mCAAmC6B,KAAnC7B;EAGJD;;EAAAA,WAAW;IACPe,gBAAgBA,cADT;IAEPE,QAAQA,MAFD;IAGPa,OAAOA,KAHA;IAIPjB,WAAWA;EAJJ,CAAXb;EAOAK;EAEA,OAAOL,QAAP;AA/HJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkIAJ,gBAAgBoC,qBAAhBpC,GAAwC,iBAAxCA;kBACeqC,uBAAaC,eAAbD,CAA6BrC,eAA7BqC,C","names":["BaseURLSelector","context","eventBus","getInstance","instance","serviceLocationBlacklistController","basicSelector","dvbSelector","selector","setup","create","updateEventName","Events","SERVICE_LOCATION_BLACKLIST_CHANGED","addBlacklistEventName","SERVICE_LOCATION_BLACKLIST_ADD","blacklistController","setConfig","config","chooseSelector","isDVB","select","data","baseUrls","selectedIdx","isNaN","selectedBaseUrl","trigger","URL_RESOLUTION_FAILED","error","DashJSError","Errors","URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE","URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE","reset","indexOf","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/utils/BaseURLSelector.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport Errors from '../../core/errors/Errors';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport BlacklistController from '../controllers/BlacklistController';\nimport DVBSelector from './baseUrlResolution/DVBSelector';\nimport BasicSelector from './baseUrlResolution/BasicSelector';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport DashJSError from '../vo/DashJSError';\nimport { checkParameterType } from '../utils/SupervisorTools';\n\nfunction BaseURLSelector() {\n\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    let instance,\n        serviceLocationBlacklistController,\n        basicSelector,\n        dvbSelector,\n        selector;\n\n    function setup() {\n        serviceLocationBlacklistController = BlacklistController(context).create({\n            updateEventName:        Events.SERVICE_LOCATION_BLACKLIST_CHANGED,\n            addBlacklistEventName:    Events.SERVICE_LOCATION_BLACKLIST_ADD\n        });\n\n        basicSelector = BasicSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        dvbSelector = DVBSelector(context).create({\n            blacklistController: serviceLocationBlacklistController\n        });\n\n        selector = basicSelector;\n    }\n\n    function setConfig(config) {\n        if (config.selector) {\n            selector = config.selector;\n        }\n    }\n\n    function chooseSelector(isDVB) {\n        checkParameterType(isDVB, 'boolean');\n        selector = isDVB ? dvbSelector : basicSelector;\n    }\n\n    function select(data) {\n        if (!data) {\n            return;\n        }\n        const baseUrls = data.baseUrls;\n        const selectedIdx = data.selectedIdx;\n\n        // Once a random selection has been carried out amongst a group of BaseURLs with the same\n        // @priority attribute value, then that choice should be re-used if the selection needs to be made again\n        // unless the blacklist has been modified or the available BaseURLs have changed.\n        if (!isNaN(selectedIdx)) {\n            return baseUrls[selectedIdx];\n        }\n\n        let selectedBaseUrl = selector.select(baseUrls);\n\n        if (!selectedBaseUrl) {\n            eventBus.trigger(Events.URL_RESOLUTION_FAILED, {\n                error: new DashJSError(\n                    Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_CODE,\n                    Errors.URL_RESOLUTION_FAILED_GENERIC_ERROR_MESSAGE\n                )\n            });\n            if (selector === basicSelector) {\n                reset();\n            }\n            return;\n        }\n\n        data.selectedIdx = baseUrls.indexOf(selectedBaseUrl);\n\n        return selectedBaseUrl;\n    }\n\n    function reset() {\n        serviceLocationBlacklistController.reset();\n    }\n\n    instance = {\n        chooseSelector: chooseSelector,\n        select: select,\n        reset: reset,\n        setConfig: setConfig\n    };\n\n    setup();\n\n    return instance;\n}\n\nBaseURLSelector.__dashjs_factory_name = 'BaseURLSelector';\nexport default FactoryMaker.getClassFactory(BaseURLSelector);\n"]},"metadata":{},"sourceType":"script"}