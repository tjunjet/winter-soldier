{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar legacyKeysAndReplacements = [{\n  oldKey: 'dashjs_vbitrate',\n  newKey: 'dashjs_video_bitrate'\n}, {\n  oldKey: 'dashjs_abitrate',\n  newKey: 'dashjs_audio_bitrate'\n}, {\n  oldKey: 'dashjs_vsettings',\n  newKey: 'dashjs_video_settings'\n}, {\n  oldKey: 'dashjs_asettings',\n  newKey: 'dashjs_audio_settings'\n}];\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\nvar LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = 'dashjs_?_bitrate';\nvar LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = 'dashjs_?_settings';\nvar STORAGE_TYPE_LOCAL = 'localStorage';\nvar STORAGE_TYPE_SESSION = 'sessionStorage';\nvar LAST_BITRATE = 'lastBitrate';\nvar LAST_MEDIA_SETTINGS = 'lastMediaSettings';\n\nfunction DOMStorage(config) {\n  config = config || {};\n  var context = this.context;\n  var settings = config.settings;\n  var instance = void 0,\n      logger = void 0,\n      supported = void 0;\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n    translateLegacyKeys();\n  } //type can be local, session\n\n\n  function isSupported(type) {\n    if (supported !== undefined) return supported;\n    supported = false;\n    var testKey = '1';\n    var testValue = '1';\n    var storage = void 0;\n\n    try {\n      if (typeof window !== 'undefined') {\n        storage = window[type];\n      }\n    } catch (error) {\n      logger.warn('DOMStorage access denied: ' + error.message);\n      return supported;\n    }\n\n    if (!storage || type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION) {\n      return supported;\n    }\n    /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.\n    http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an\n    Check if the storage can be used\n    */\n\n\n    try {\n      storage.setItem(testKey, testValue);\n      storage.removeItem(testKey);\n      supported = true;\n    } catch (error) {\n      logger.warn('DOMStorage is supported, but cannot be used: ' + error.message);\n    }\n\n    return supported;\n  }\n\n  function translateLegacyKeys() {\n    if (isSupported(STORAGE_TYPE_LOCAL)) {\n      legacyKeysAndReplacements.forEach(function (entry) {\n        var value = localStorage.getItem(entry.oldKey);\n\n        if (value) {\n          localStorage.removeItem(entry.oldKey);\n\n          try {\n            localStorage.setItem(entry.newKey, value);\n          } catch (e) {\n            logger.error(e.message);\n          }\n        }\n      });\n    }\n  } // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user\n\n\n  function getTimestamp() {\n    var ten_minutes_ms = 60 * 1000 * 10;\n    return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;\n  }\n\n  function canStore(storageType, key) {\n    return isSupported(storageType) && settings.get().streaming[key + 'CachingInfo'].enabled;\n  }\n\n  function checkConfig() {\n    if (!settings) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n\n  function getSavedMediaSettings(type) {\n    var mediaSettings = null;\n    checkConfig(); //Checks local storage to see if there is valid, non-expired media settings\n\n    if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\n      var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n\n      try {\n        var obj = JSON.parse(localStorage.getItem(key)) || {};\n        var isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= settings.get().streaming.lastMediaSettingsCachingInfo.ttl || false;\n        mediaSettings = obj.settings;\n\n        if (isExpired) {\n          localStorage.removeItem(key);\n          mediaSettings = null;\n        }\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return mediaSettings;\n  }\n\n  function getSavedBitrateSettings(type) {\n    var savedBitrate = NaN;\n    checkConfig(); //Checks local storage to see if there is valid, non-expired bit rate\n    //hinting from the last play session to use as a starting bit rate.\n\n    if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {\n      var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n\n      try {\n        var obj = JSON.parse(localStorage.getItem(key)) || {};\n        var isExpired = new Date().getTime() - parseInt(obj.timestamp, 10) >= settings.get().streaming.lastBitrateCachingInfo.ttl || false;\n        var bitrate = parseFloat(obj.bitrate);\n\n        if (!isNaN(bitrate) && !isExpired) {\n          savedBitrate = bitrate;\n          logger.debug('Last saved bitrate for ' + type + ' was ' + bitrate);\n        } else if (isExpired) {\n          localStorage.removeItem(key);\n        }\n      } catch (e) {\n        return null;\n      }\n    }\n\n    return savedBitrate;\n  }\n\n  function setSavedMediaSettings(type, value) {\n    if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\n      var key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n\n      try {\n        localStorage.setItem(key, JSON.stringify({\n          settings: value,\n          timestamp: getTimestamp()\n        }));\n      } catch (e) {\n        logger.error(e.message);\n      }\n    }\n  }\n\n  function setSavedBitrateSettings(type, bitrate) {\n    if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {\n      var key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n\n      try {\n        localStorage.setItem(key, JSON.stringify({\n          bitrate: bitrate.toFixed(3),\n          timestamp: getTimestamp()\n        }));\n      } catch (e) {\n        logger.error(e.message);\n      }\n    }\n  }\n\n  instance = {\n    getSavedBitrateSettings: getSavedBitrateSettings,\n    setSavedBitrateSettings: setSavedBitrateSettings,\n    getSavedMediaSettings: getSavedMediaSettings,\n    setSavedMediaSettings: setSavedMediaSettings\n  };\n  setup();\n  return instance;\n}\n\nDOMStorage.__dashjs_factory_name = 'DOMStorage';\n\nvar factory = _FactoryMaker2.default.getSingletonFactory(DOMStorage);\n\nexports.default = factory;","map":{"version":3,"mappings":"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","names":["legacyKeysAndReplacements","oldKey","newKey","LOCAL_STORAGE_BITRATE_KEY_TEMPLATE","LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE","STORAGE_TYPE_LOCAL","STORAGE_TYPE_SESSION","LAST_BITRATE","LAST_MEDIA_SETTINGS","DOMStorage","config","context","settings","instance","logger","supported","setup","getInstance","getLogger","translateLegacyKeys","isSupported","type","undefined","testKey","testValue","storage","window","error","warn","message","setItem","removeItem","forEach","value","localStorage","getItem","entry","e","getTimestamp","ten_minutes_ms","Math","round","Date","getTime","canStore","storageType","key","get","streaming","enabled","checkConfig","Error","Constants","MISSING_CONFIG_ERROR","getSavedMediaSettings","mediaSettings","replace","obj","JSON","parse","isExpired","parseInt","timestamp","lastMediaSettingsCachingInfo","ttl","getSavedBitrateSettings","savedBitrate","NaN","lastBitrateCachingInfo","bitrate","parseFloat","isNaN","debug","setSavedMediaSettings","stringify","setSavedBitrateSettings","toFixed","__dashjs_factory_name","factory","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/utils/DOMStorage.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\nimport Constants from '../constants/Constants';\n\nconst legacyKeysAndReplacements = [\n    { oldKey: 'dashjs_vbitrate',  newKey: 'dashjs_video_bitrate' },\n    { oldKey: 'dashjs_abitrate',  newKey: 'dashjs_audio_bitrate' },\n    { oldKey: 'dashjs_vsettings', newKey: 'dashjs_video_settings' },\n    { oldKey: 'dashjs_asettings', newKey: 'dashjs_audio_settings' }\n];\n\nconst LOCAL_STORAGE_BITRATE_KEY_TEMPLATE = 'dashjs_?_bitrate';\nconst LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE = 'dashjs_?_settings';\n\nconst STORAGE_TYPE_LOCAL = 'localStorage';\nconst STORAGE_TYPE_SESSION = 'sessionStorage';\nconst LAST_BITRATE = 'lastBitrate';\nconst LAST_MEDIA_SETTINGS = 'lastMediaSettings';\n\nfunction DOMStorage(config) {\n\n    config = config || {};\n    const context = this.context;\n    const settings = config.settings;\n\n    let instance,\n        logger,\n        supported;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n        translateLegacyKeys();\n    }\n\n    //type can be local, session\n    function isSupported(type) {\n        if (supported !== undefined) return supported;\n\n        supported = false;\n\n        const testKey = '1';\n        const testValue = '1';\n        let storage;\n\n        try {\n            if (typeof window !== 'undefined') {\n                storage = window[type];\n            }\n        } catch (error) {\n            logger.warn('DOMStorage access denied: ' + error.message);\n            return supported;\n        }\n\n        if (!storage || (type !== STORAGE_TYPE_LOCAL && type !== STORAGE_TYPE_SESSION)) {\n            return supported;\n        }\n\n        /* When Safari (OS X or iOS) is in private browsing mode, it appears as though localStorage is available, but trying to call setItem throws an exception.\n         http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an\n\n         Check if the storage can be used\n         */\n        try {\n            storage.setItem(testKey, testValue);\n            storage.removeItem(testKey);\n            supported = true;\n        } catch (error) {\n            logger.warn('DOMStorage is supported, but cannot be used: ' + error.message);\n        }\n\n        return supported;\n    }\n\n    function translateLegacyKeys() {\n        if (isSupported(STORAGE_TYPE_LOCAL)) {\n            legacyKeysAndReplacements.forEach(entry => {\n                const value = localStorage.getItem(entry.oldKey);\n\n                if (value) {\n                    localStorage.removeItem(entry.oldKey);\n\n                    try {\n                        localStorage.setItem(entry.newKey, value);\n                    } catch (e) {\n                        logger.error(e.message);\n                    }\n                }\n            });\n        }\n    }\n\n    // Return current epoch time, ms, rounded to the nearest 10m to avoid fingerprinting user\n    function getTimestamp() {\n        const ten_minutes_ms = 60 * 1000 * 10;\n        return Math.round(new Date().getTime() / ten_minutes_ms) * ten_minutes_ms;\n    }\n\n    function canStore(storageType, key) {\n        return isSupported(storageType) && settings.get().streaming[key + 'CachingInfo'].enabled;\n    }\n\n    function checkConfig() {\n        if (!settings) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSavedMediaSettings(type) {\n        let mediaSettings = null;\n\n        checkConfig();\n        //Checks local storage to see if there is valid, non-expired media settings\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\n            const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                const obj = JSON.parse(localStorage.getItem(key)) || {};\n                const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= settings.get().streaming.lastMediaSettingsCachingInfo.ttl || false;\n                mediaSettings = obj.settings;\n\n                if (isExpired) {\n                    localStorage.removeItem(key);\n                    mediaSettings = null;\n                }\n            } catch (e) {\n                return null;\n            }\n        }\n        return mediaSettings;\n    }\n\n    function getSavedBitrateSettings(type) {\n        let savedBitrate = NaN;\n\n        checkConfig();\n\n        //Checks local storage to see if there is valid, non-expired bit rate\n        //hinting from the last play session to use as a starting bit rate.\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE)) {\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                const obj = JSON.parse(localStorage.getItem(key)) || {};\n                const isExpired = (new Date().getTime() - parseInt(obj.timestamp, 10)) >= settings.get().streaming.lastBitrateCachingInfo.ttl || false;\n                const bitrate = parseFloat(obj.bitrate);\n\n                if (!isNaN(bitrate) && !isExpired) {\n                    savedBitrate = bitrate;\n                    logger.debug('Last saved bitrate for ' + type + ' was ' + bitrate);\n                } else if (isExpired) {\n                    localStorage.removeItem(key);\n                }\n            } catch (e) {\n                return null;\n            }\n        }\n        return savedBitrate;\n    }\n\n    function setSavedMediaSettings(type, value) {\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_MEDIA_SETTINGS)) {\n            const key = LOCAL_STORAGE_SETTINGS_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                localStorage.setItem(key, JSON.stringify({settings: value, timestamp: getTimestamp()}));\n            } catch (e) {\n                logger.error(e.message);\n            }\n        }\n    }\n\n    function setSavedBitrateSettings(type, bitrate) {\n        if (canStore(STORAGE_TYPE_LOCAL, LAST_BITRATE) && bitrate) {\n            const key = LOCAL_STORAGE_BITRATE_KEY_TEMPLATE.replace(/\\?/, type);\n            try {\n                localStorage.setItem(key, JSON.stringify({bitrate: bitrate.toFixed(3), timestamp: getTimestamp()}));\n            } catch (e) {\n                logger.error(e.message);\n            }\n        }\n    }\n\n    instance = {\n        getSavedBitrateSettings: getSavedBitrateSettings,\n        setSavedBitrateSettings: setSavedBitrateSettings,\n        getSavedMediaSettings: getSavedMediaSettings,\n        setSavedMediaSettings: setSavedMediaSettings\n    };\n\n    setup();\n    return instance;\n}\n\nDOMStorage.__dashjs_factory_name = 'DOMStorage';\nconst factory = FactoryMaker.getSingletonFactory(DOMStorage);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}