{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _MetricSerialiser = require('../../utils/MetricSerialiser');\n\nvar _MetricSerialiser2 = _interopRequireDefault(_MetricSerialiser);\n\nvar _RNG = require('../../utils/RNG');\n\nvar _RNG2 = _interopRequireDefault(_RNG);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction DVBReporting(config) {\n  config = config || {};\n  var instance = void 0;\n  var context = this.context;\n  var metricSerialiser = void 0,\n      randomNumberGenerator = void 0,\n      reportingPlayerStatusDecided = void 0,\n      isReportingPlayer = void 0,\n      reportingUrl = void 0,\n      rangeController = void 0;\n  var USE_DRAFT_DVB_SPEC = true;\n  var allowPendingRequestsToCompleteOnReset = true;\n  var pendingRequests = [];\n  var metricsConstants = config.metricsConstants;\n\n  function setup() {\n    metricSerialiser = (0, _MetricSerialiser2.default)(context).getInstance();\n    randomNumberGenerator = (0, _RNG2.default)(context).getInstance();\n    resetInitialSettings();\n  }\n\n  function doGetRequest(url, successCB, failureCB) {\n    var req = new XMLHttpRequest();\n\n    var oncomplete = function oncomplete() {\n      var reqIndex = pendingRequests.indexOf(req);\n\n      if (reqIndex === -1) {\n        return;\n      } else {\n        pendingRequests.splice(reqIndex, 1);\n      }\n\n      if (req.status >= 200 && req.status < 300) {\n        if (successCB) {\n          successCB();\n        }\n      } else {\n        if (failureCB) {\n          failureCB();\n        }\n      }\n    };\n\n    pendingRequests.push(req);\n\n    try {\n      req.open('GET', url);\n      req.onloadend = oncomplete;\n      req.onerror = oncomplete;\n      req.send();\n    } catch (e) {\n      req.onerror();\n    }\n  }\n\n  function report(type, vos) {\n    if (!Array.isArray(vos)) {\n      vos = [vos];\n    } // If the Player is not a reporting Player, then the Player shall\n    // not report any errors.\n    // ... In addition to any time restrictions specified by a Range\n    // element within the Metrics element.\n\n\n    if (isReportingPlayer && rangeController.isEnabled()) {\n      // This reporting mechanism operates by creating one HTTP GET\n      // request for every entry in the top level list of the metric.\n      vos.forEach(function (vo) {\n        var url = metricSerialiser.serialise(vo); // this has been proposed for errata\n\n        if (USE_DRAFT_DVB_SPEC && type !== metricsConstants.DVB_ERRORS) {\n          url = 'metricname=' + type + '&' + url;\n        } // Take the value of the @reportingUrl attribute, append a\n        // question mark ('?') character and then append the string\n        // created in the previous step.\n\n\n        url = reportingUrl + '?' + url; // Make an HTTP GET request to the URL contained within the\n        // string created in the previous step.\n\n        doGetRequest(url, null, function () {\n          // If the Player is unable to make the report, for\n          // example because the @reportingUrl is invalid, the\n          // host cannot be reached, or an HTTP status code other\n          // than one in the 200 series is received, the Player\n          // shall cease being a reporting Player for the\n          // duration of the MPD.\n          isReportingPlayer = false;\n        });\n      });\n    }\n  }\n\n  function initialize(entry, rc) {\n    var probability = void 0;\n    rangeController = rc;\n    reportingUrl = entry.dvb_reportingUrl; // If a required attribute is missing, the Reporting descriptor may\n    // be ignored by the Player\n\n    if (!reportingUrl) {\n      throw new Error('required parameter missing (dvb:reportingUrl)');\n    } // A Player's status, as a reporting Player or not, shall remain\n    // static for the duration of the MPD, regardless of MPD updates.\n    // (i.e. only calling reset (or failure) changes this state)\n\n\n    if (!reportingPlayerStatusDecided) {\n      probability = entry.dvb_probability; // TS 103 285 Clause 10.12.3.4\n      // If the @probability attribute is set to 1000, it shall be a reporting Player.\n      // If the @probability attribute is absent it will take the default value of 1000.\n      // For any other value of the @probability attribute, it shall decide at random whether to be a\n      // reporting Player, such that the probability of being one is @probability/1000.\n\n      if (probability && (probability === 1000 || probability / 1000 >= randomNumberGenerator.random())) {\n        isReportingPlayer = true;\n      }\n\n      reportingPlayerStatusDecided = true;\n    }\n  }\n\n  function resetInitialSettings() {\n    reportingPlayerStatusDecided = false;\n    isReportingPlayer = false;\n    reportingUrl = null;\n    rangeController = null;\n  }\n\n  function reset() {\n    if (!allowPendingRequestsToCompleteOnReset) {\n      pendingRequests.forEach(function (req) {\n        return req.abort();\n      });\n      pendingRequests = [];\n    }\n\n    resetInitialSettings();\n  }\n\n  instance = {\n    report: report,\n    initialize: initialize,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\nexports.default = dashjs.FactoryMaker.getClassFactory(DVBReporting);\n/* jshint ignore:line */","map":{"version":3,"mappings":"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","names":["DVBReporting","config","instance","context","metricSerialiser","randomNumberGenerator","reportingPlayerStatusDecided","isReportingPlayer","reportingUrl","rangeController","USE_DRAFT_DVB_SPEC","allowPendingRequestsToCompleteOnReset","pendingRequests","metricsConstants","setup","getInstance","resetInitialSettings","doGetRequest","url","successCB","failureCB","req","XMLHttpRequest","oncomplete","reqIndex","indexOf","splice","status","push","open","onloadend","onerror","send","e","report","type","vos","Array","isArray","isEnabled","forEach","vo","serialise","DVB_ERRORS","initialize","entry","rc","probability","dvb_reportingUrl","Error","dvb_probability","random","reset","abort","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/reporting/reporters/DVBReporting.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricSerialiser from '../../utils/MetricSerialiser';\nimport RNG from '../../utils/RNG';\n\nfunction DVBReporting(config) {\n    config = config || {};\n    let instance;\n\n    let context = this.context;\n    let metricSerialiser,\n        randomNumberGenerator,\n        reportingPlayerStatusDecided,\n        isReportingPlayer,\n        reportingUrl,\n        rangeController;\n\n    let USE_DRAFT_DVB_SPEC = true;\n    let allowPendingRequestsToCompleteOnReset = true;\n    let pendingRequests = [];\n\n    const metricsConstants = config.metricsConstants;\n\n    function setup() {\n        metricSerialiser = MetricSerialiser(context).getInstance();\n        randomNumberGenerator = RNG(context).getInstance();\n\n        resetInitialSettings();\n    }\n\n    function doGetRequest(url, successCB, failureCB) {\n        let req = new XMLHttpRequest();\n        const oncomplete = function () {\n            let reqIndex = pendingRequests.indexOf(req);\n\n            if (reqIndex === -1) {\n                return;\n            } else {\n                pendingRequests.splice(reqIndex, 1);\n            }\n\n            if ((req.status >= 200) && (req.status < 300)) {\n                if (successCB) {\n                    successCB();\n                }\n            } else {\n                if (failureCB) {\n                    failureCB();\n                }\n            }\n        };\n\n        pendingRequests.push(req);\n\n        try {\n            req.open('GET', url);\n            req.onloadend = oncomplete;\n            req.onerror = oncomplete;\n            req.send();\n        } catch (e) {\n            req.onerror();\n        }\n    }\n\n    function report(type, vos) {\n        if (!Array.isArray(vos)) {\n            vos = [vos];\n        }\n\n        // If the Player is not a reporting Player, then the Player shall\n        // not report any errors.\n        // ... In addition to any time restrictions specified by a Range\n        // element within the Metrics element.\n        if (isReportingPlayer && rangeController.isEnabled()) {\n\n            // This reporting mechanism operates by creating one HTTP GET\n            // request for every entry in the top level list of the metric.\n            vos.forEach(function (vo) {\n                let url = metricSerialiser.serialise(vo);\n\n                // this has been proposed for errata\n                if (USE_DRAFT_DVB_SPEC && (type !== metricsConstants.DVB_ERRORS)) {\n                    url = `metricname=${type}&${url}`;\n                }\n\n                // Take the value of the @reportingUrl attribute, append a\n                // question mark ('?') character and then append the string\n                // created in the previous step.\n                url = `${reportingUrl}?${url}`;\n\n                // Make an HTTP GET request to the URL contained within the\n                // string created in the previous step.\n                doGetRequest(url, null, function () {\n                    // If the Player is unable to make the report, for\n                    // example because the @reportingUrl is invalid, the\n                    // host cannot be reached, or an HTTP status code other\n                    // than one in the 200 series is received, the Player\n                    // shall cease being a reporting Player for the\n                    // duration of the MPD.\n                    isReportingPlayer = false;\n                });\n            });\n        }\n    }\n\n    function initialize(entry, rc) {\n        let probability;\n\n        rangeController = rc;\n\n        reportingUrl = entry.dvb_reportingUrl;\n\n        // If a required attribute is missing, the Reporting descriptor may\n        // be ignored by the Player\n        if (!reportingUrl) {\n            throw new Error(\n                'required parameter missing (dvb:reportingUrl)'\n            );\n        }\n\n        // A Player's status, as a reporting Player or not, shall remain\n        // static for the duration of the MPD, regardless of MPD updates.\n        // (i.e. only calling reset (or failure) changes this state)\n        if (!reportingPlayerStatusDecided) {\n            probability = entry.dvb_probability;\n            // TS 103 285 Clause 10.12.3.4\n            // If the @probability attribute is set to 1000, it shall be a reporting Player.\n            // If the @probability attribute is absent it will take the default value of 1000.\n            // For any other value of the @probability attribute, it shall decide at random whether to be a\n            // reporting Player, such that the probability of being one is @probability/1000.\n            if (probability && (probability === 1000 || ((probability / 1000) >= randomNumberGenerator.random()))) {\n                isReportingPlayer = true;\n            }\n\n            reportingPlayerStatusDecided = true;\n        }\n    }\n\n    function resetInitialSettings() {\n        reportingPlayerStatusDecided = false;\n        isReportingPlayer = false;\n        reportingUrl = null;\n        rangeController = null;\n    }\n\n    function reset() {\n        if (!allowPendingRequestsToCompleteOnReset) {\n            pendingRequests.forEach(req => req.abort());\n            pendingRequests = [];\n        }\n\n        resetInitialSettings();\n    }\n\n    instance = {\n        report:     report,\n        initialize: initialize,\n        reset:      reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nDVBReporting.__dashjs_factory_name = 'DVBReporting';\nexport default dashjs.FactoryMaker.getClassFactory(DVBReporting); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}