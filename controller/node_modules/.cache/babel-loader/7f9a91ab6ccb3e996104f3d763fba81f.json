{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('../streaming/constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _HTTPRequest = require('../streaming/vo/metrics/HTTPRequest');\n\nvar _FactoryMaker = require('../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _MetricsConstants = require('../streaming/constants/MetricsConstants');\n\nvar _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);\n\nvar _Round = require('./utils/Round10');\n\nvar _Round2 = _interopRequireDefault(_Round);\n\nvar _MetricsModel = require('../streaming/models/MetricsModel');\n\nvar _MetricsModel2 = _interopRequireDefault(_MetricsModel);\n\nvar _Utils = require('../core/Utils');\n\nvar _Utils2 = _interopRequireDefault(_Utils);\n\nvar _PlayList = require('../streaming/vo/metrics/PlayList');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* @module DashMetrics\n* @param {object} config\n*/\n\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction DashMetrics(config) {\n  config = config || {};\n  var context = this.context;\n  var instance = void 0,\n      playListTraceMetricsClosed = void 0,\n      playListTraceMetrics = void 0,\n      playListMetrics = void 0;\n  var metricsModel = config.metricsModel;\n\n  function setup() {\n    metricsModel = metricsModel || (0, _MetricsModel2.default)(context).getInstance({\n      settings: config.settings\n    });\n    resetInitialSettings();\n  }\n\n  function resetInitialSettings() {\n    playListTraceMetricsClosed = true;\n    playListTraceMetrics = null;\n    playListMetrics = null;\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentRepresentationSwitch(mediaType) {\n    var metrics = metricsModel.getMetricsFor(mediaType, true);\n    return getCurrent(metrics, _MetricsConstants2.default.TRACK_SWITCH);\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {Date} t time of the switch event\n  * @param {Date} mt media presentation time\n  * @param {string} to id of representation\n  * @param {string} lto if present, subrepresentation reference\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n    metricsModel.addRepresentationSwitch(mediaType, t, mt, to, lto);\n  }\n  /**\n  * @param {MediaType} type\n  * @returns {number}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentBufferState(type) {\n    var metrics = metricsModel.getMetricsFor(type, true);\n    return getCurrent(metrics, _MetricsConstants2.default.BUFFER_STATE);\n  }\n  /**\n  * @param {MediaType} type\n  * @returns {number}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentBufferLevel(type) {\n    var metrics = metricsModel.getMetricsFor(type, true);\n    var metric = getCurrent(metrics, _MetricsConstants2.default.BUFFER_LEVEL);\n\n    if (metric) {\n      return _Round2.default.round10(metric.level / 1000, -3);\n    }\n\n    return 0;\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {number} t\n  * @param {number} level\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addBufferLevel(mediaType, t, level) {\n    metricsModel.addBufferLevel(mediaType, t, level);\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {string} state\n  * @param {number} target\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addBufferState(mediaType, state, target) {\n    metricsModel.addBufferState(mediaType, state, target);\n  }\n  /**\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function clearAllCurrentMetrics() {\n    metricsModel.clearAllCurrentMetrics();\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentHttpRequest(mediaType) {\n    var metrics = metricsModel.getMetricsFor(mediaType, true);\n\n    if (!metrics) {\n      return null;\n    }\n\n    var httpList = metrics.HttpList;\n    var currentHttpList = null;\n    var httpListLastIndex = void 0;\n\n    if (!httpList || httpList.length <= 0) {\n      return null;\n    }\n\n    httpListLastIndex = httpList.length - 1;\n\n    while (httpListLastIndex >= 0) {\n      if (httpList[httpListLastIndex].responsecode) {\n        currentHttpList = httpList[httpListLastIndex];\n        break;\n      }\n\n      httpListLastIndex--;\n    }\n\n    return currentHttpList;\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getHttpRequests(mediaType) {\n    var metrics = metricsModel.getMetricsFor(mediaType, true);\n\n    if (!metrics) {\n      return [];\n    }\n\n    return !!metrics.HttpList ? metrics.HttpList : [];\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {Array} loadingRequests\n  * @param {Array} executedRequests\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n    metricsModel.addRequestsQueue(mediaType, loadingRequests, executedRequests);\n  }\n  /**\n  * @param {MetricsList} metrics\n  * @param {string} metricName\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrent(metrics, metricName) {\n    if (!metrics) {\n      return null;\n    }\n\n    var list = metrics[metricName];\n    return !list || list.length === 0 ? null : list[list.length - 1];\n  }\n  /**\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function getCurrentDroppedFrames() {\n    var metrics = metricsModel.getMetricsFor(_Constants2.default.VIDEO, true);\n    return getCurrent(metrics, _MetricsConstants2.default.DROPPED_FRAMES);\n  }\n  /**\n  * @param {number} quality\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addDroppedFrames(quality) {\n    metricsModel.addDroppedFrames(_Constants2.default.VIDEO, quality);\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentSchedulingInfo(mediaType) {\n    var metrics = metricsModel.getMetricsFor(mediaType, true);\n    return getCurrent(metrics, _MetricsConstants2.default.SCHEDULING_INFO);\n  }\n  /**\n  * @param {object} request\n  * @param {string} state\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addSchedulingInfo(request, state) {\n    metricsModel.addSchedulingInfo(request.mediaType, new Date(), request.type, request.startTime, request.availabilityStartTime, request.duration, request.quality, request.range, state);\n  }\n  /**\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentManifestUpdate() {\n    var streamMetrics = metricsModel.getMetricsFor(_Constants2.default.STREAM);\n    return getCurrent(streamMetrics, _MetricsConstants2.default.MANIFEST_UPDATE);\n  }\n  /**\n  * @param {object} updatedFields fields to be updated\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function updateManifestUpdateInfo(updatedFields) {\n    var manifestUpdate = this.getCurrentManifestUpdate();\n    metricsModel.updateManifestUpdateInfo(manifestUpdate, updatedFields);\n  }\n  /**\n  * @param {object} streamInfo\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addManifestUpdateStreamInfo(streamInfo) {\n    if (streamInfo) {\n      var manifestUpdate = this.getCurrentManifestUpdate();\n      metricsModel.addManifestUpdateStreamInfo(manifestUpdate, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);\n    }\n  }\n  /**\n  * @param {object} request\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addManifestUpdate(request) {\n    metricsModel.addManifestUpdate(_Constants2.default.STREAM, request.type, request.requestStartDate, request.requestEndDate);\n  }\n  /**\n  * @param {object} request\n  * @param {string} responseURL\n  * @param {number} responseStatus\n  * @param {object} responseHeaders\n  * @param {object} traces\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addHttpRequest(request, responseURL, responseStatus, responseHeaders, traces) {\n    metricsModel.addHttpRequest(request.mediaType, null, request.type, request.url, request.quality, responseURL, request.serviceLocation || null, request.range || null, request.requestStartDate, request.firstByteDate, request.requestEndDate, responseStatus, request.duration, responseHeaders, traces);\n  }\n  /**\n  * @param {object} representation\n  * @param {MediaType} mediaType\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addManifestUpdateRepresentationInfo(representation, mediaType) {\n    if (representation) {\n      var manifestUpdateInfo = this.getCurrentManifestUpdate();\n      metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, representation.id, representation.index, representation.streamIndex, mediaType, representation.presentationTimeOffset, representation.startNumber, representation.fragmentInfoType);\n    }\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getCurrentDVRInfo(mediaType) {\n    var metrics = mediaType ? metricsModel.getMetricsFor(mediaType, true) : metricsModel.getMetricsFor(_Constants2.default.VIDEO, true) || metricsModel.getMetricsFor(_Constants2.default.AUDIO, true);\n    return getCurrent(metrics, _MetricsConstants2.default.DVR_INFO);\n  }\n  /**\n  * @param {MediaType} mediaType\n  * @param {Date} currentTime time of the switch event\n  * @param {object} mpd mpd reference\n  * @param {object} range range of the dvr info\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addDVRInfo(mediaType, currentTime, mpd, range) {\n    metricsModel.addDVRInfo(mediaType, currentTime, mpd, range);\n  }\n  /**\n  * @param {string} id\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getLatestMPDRequestHeaderValueByID(id) {\n    var headers = {};\n    var httpRequestList = void 0,\n        httpRequest = void 0,\n        i = void 0;\n    httpRequestList = getHttpRequests(_Constants2.default.STREAM);\n\n    for (i = httpRequestList.length - 1; i >= 0; i--) {\n      httpRequest = httpRequestList[i];\n\n      if (httpRequest.type === _HTTPRequest.HTTPRequest.MPD_TYPE) {\n        headers = _Utils2.default.parseHttpHeaders(httpRequest._responseHeaders);\n        break;\n      }\n    }\n\n    return headers[id] === undefined ? null : headers[id];\n  }\n  /**\n  * @param {string} type\n  * @param {string} id\n  * @returns {*}\n  * @memberof module:DashMetrics\n  * @instance\n  */\n\n\n  function getLatestFragmentRequestHeaderValueByID(type, id) {\n    var headers = {};\n    var httpRequest = getCurrentHttpRequest(type, true);\n\n    if (httpRequest) {\n      headers = _Utils2.default.parseHttpHeaders(httpRequest._responseHeaders);\n    }\n\n    return headers[id] === undefined ? null : headers[id];\n  }\n  /**\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addPlayList() {\n    if (playListMetrics) {\n      metricsModel.addPlayList(playListMetrics);\n      playListMetrics = null;\n    }\n  }\n\n  function createPlaylistMetrics(mediaStartTime, startReason) {\n    playListMetrics = new _PlayList.PlayList();\n    playListMetrics.start = new Date();\n    playListMetrics.mstart = mediaStartTime;\n    playListMetrics.starttype = startReason;\n  }\n\n  function createPlaylistTraceMetrics(representationId, mediaStartTime, speed) {\n    if (playListTraceMetricsClosed === true) {\n      playListTraceMetricsClosed = false;\n      playListTraceMetrics = new _PlayList.PlayListTrace();\n      playListTraceMetrics.representationid = representationId;\n      playListTraceMetrics.start = new Date();\n      playListTraceMetrics.mstart = mediaStartTime;\n      playListTraceMetrics.playbackspeed = speed !== null ? speed.toString() : null;\n    }\n  }\n\n  function updatePlayListTraceMetrics(traceToUpdate) {\n    if (playListTraceMetrics) {\n      for (var field in playListTraceMetrics) {\n        playListTraceMetrics[field] = traceToUpdate[field];\n      }\n    }\n  }\n\n  function pushPlayListTraceMetrics(endTime, reason) {\n    if (playListTraceMetricsClosed === false && playListMetrics && playListTraceMetrics && playListTraceMetrics.start) {\n      var startTime = playListTraceMetrics.start;\n      var duration = endTime.getTime() - startTime.getTime();\n      playListTraceMetrics.duration = duration;\n      playListTraceMetrics.stopreason = reason;\n      playListMetrics.trace.push(playListTraceMetrics);\n      playListTraceMetricsClosed = true;\n    }\n  }\n  /**\n  * @param {object} errors\n  * @memberof module:DashMetrics\n  * @instance\n  * @ignore\n  */\n\n\n  function addDVBErrors(errors) {\n    metricsModel.addDVBErrors(errors);\n  }\n\n  instance = {\n    getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n    getCurrentBufferState: getCurrentBufferState,\n    getCurrentBufferLevel: getCurrentBufferLevel,\n    getCurrentHttpRequest: getCurrentHttpRequest,\n    getHttpRequests: getHttpRequests,\n    getCurrentDroppedFrames: getCurrentDroppedFrames,\n    getCurrentSchedulingInfo: getCurrentSchedulingInfo,\n    getCurrentDVRInfo: getCurrentDVRInfo,\n    getCurrentManifestUpdate: getCurrentManifestUpdate,\n    getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\n    getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\n    addRepresentationSwitch: addRepresentationSwitch,\n    addDVRInfo: addDVRInfo,\n    updateManifestUpdateInfo: updateManifestUpdateInfo,\n    addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n    addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n    addManifestUpdate: addManifestUpdate,\n    addHttpRequest: addHttpRequest,\n    addSchedulingInfo: addSchedulingInfo,\n    addRequestsQueue: addRequestsQueue,\n    addBufferLevel: addBufferLevel,\n    addBufferState: addBufferState,\n    addDroppedFrames: addDroppedFrames,\n    addPlayList: addPlayList,\n    addDVBErrors: addDVBErrors,\n    createPlaylistMetrics: createPlaylistMetrics,\n    createPlaylistTraceMetrics: createPlaylistTraceMetrics,\n    updatePlayListTraceMetrics: updatePlayListTraceMetrics,\n    pushPlayListTraceMetrics: pushPlayListTraceMetrics,\n    clearAllCurrentMetrics: clearAllCurrentMetrics\n  };\n  setup();\n  return instance;\n}\n\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\nexports.default = _FactoryMaker2.default.getSingletonFactory(DashMetrics);","map":{"version":3,"mappings":"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","names":["DashMetrics","config","context","instance","playListTraceMetricsClosed","playListTraceMetrics","playListMetrics","metricsModel","setup","getInstance","settings","resetInitialSettings","getCurrentRepresentationSwitch","mediaType","metrics","getMetricsFor","getCurrent","MetricsConstants","TRACK_SWITCH","addRepresentationSwitch","t","mt","to","lto","getCurrentBufferState","type","BUFFER_STATE","getCurrentBufferLevel","metric","BUFFER_LEVEL","Round10","round10","level","addBufferLevel","addBufferState","state","target","clearAllCurrentMetrics","getCurrentHttpRequest","httpList","HttpList","currentHttpList","httpListLastIndex","length","responsecode","getHttpRequests","addRequestsQueue","loadingRequests","executedRequests","metricName","list","getCurrentDroppedFrames","Constants","VIDEO","DROPPED_FRAMES","addDroppedFrames","quality","getCurrentSchedulingInfo","SCHEDULING_INFO","addSchedulingInfo","request","Date","startTime","availabilityStartTime","duration","range","getCurrentManifestUpdate","streamMetrics","STREAM","MANIFEST_UPDATE","updateManifestUpdateInfo","updatedFields","manifestUpdate","addManifestUpdateStreamInfo","streamInfo","id","index","start","addManifestUpdate","requestStartDate","requestEndDate","addHttpRequest","responseURL","responseStatus","responseHeaders","traces","url","serviceLocation","firstByteDate","addManifestUpdateRepresentationInfo","representation","manifestUpdateInfo","streamIndex","presentationTimeOffset","startNumber","fragmentInfoType","getCurrentDVRInfo","AUDIO","DVR_INFO","addDVRInfo","currentTime","mpd","getLatestMPDRequestHeaderValueByID","headers","httpRequestList","httpRequest","i","HTTPRequest","MPD_TYPE","Utils","parseHttpHeaders","_responseHeaders","undefined","getLatestFragmentRequestHeaderValueByID","addPlayList","createPlaylistMetrics","mediaStartTime","startReason","PlayList","mstart","starttype","createPlaylistTraceMetrics","representationId","speed","PlayListTrace","representationid","playbackspeed","toString","updatePlayListTraceMetrics","traceToUpdate","field","pushPlayListTraceMetrics","endTime","reason","getTime","stopreason","trace","push","addDVBErrors","errors","__dashjs_factory_name","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/dash/DashMetrics.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../streaming/constants/Constants';\nimport { HTTPRequest } from '../streaming/vo/metrics/HTTPRequest';\nimport FactoryMaker from '../core/FactoryMaker';\nimport MetricsConstants from '../streaming/constants/MetricsConstants';\nimport Round10 from './utils/Round10';\nimport MetricsModel from '../streaming/models/MetricsModel';\nimport Utils from '../core/Utils';\nimport {\n    PlayList,\n    PlayListTrace\n} from '../streaming/vo/metrics/PlayList';\n\n/**\n * @module DashMetrics\n * @param {object} config\n */\n\nfunction DashMetrics(config) {\n\n    config = config || {};\n\n    const context = this.context;\n    let instance,\n        playListTraceMetricsClosed,\n        playListTraceMetrics,\n        playListMetrics;\n\n    let metricsModel = config.metricsModel;\n\n    function setup() {\n        metricsModel = metricsModel || MetricsModel(context).getInstance({settings: config.settings});\n        resetInitialSettings();\n    }\n\n    function resetInitialSettings() {\n        playListTraceMetricsClosed = true;\n        playListTraceMetrics = null;\n        playListMetrics = null;\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentRepresentationSwitch(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n        return getCurrent(metrics, MetricsConstants.TRACK_SWITCH);\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {Date} t time of the switch event\n     * @param {Date} mt media presentation time\n     * @param {string} to id of representation\n     * @param {string} lto if present, subrepresentation reference\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addRepresentationSwitch(mediaType, t, mt, to, lto) {\n        metricsModel.addRepresentationSwitch(mediaType, t, mt, to, lto);\n    }\n\n    /**\n     * @param {MediaType} type\n     * @returns {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentBufferState(type) {\n        const metrics = metricsModel.getMetricsFor(type, true);\n        return getCurrent(metrics, MetricsConstants.BUFFER_STATE);\n    }\n\n    /**\n     * @param {MediaType} type\n     * @returns {number}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentBufferLevel(type) {\n        const metrics = metricsModel.getMetricsFor(type, true);\n        const metric = getCurrent(metrics, MetricsConstants.BUFFER_LEVEL);\n\n        if (metric) {\n            return Round10.round10(metric.level / 1000, -3);\n        }\n\n        return 0;\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {number} t\n     * @param {number} level\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addBufferLevel(mediaType, t, level) {\n        metricsModel.addBufferLevel(mediaType, t, level);\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {string} state\n     * @param {number} target\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addBufferState(mediaType, state, target) {\n        metricsModel.addBufferState(mediaType, state, target);\n    }\n\n    /**\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function clearAllCurrentMetrics () {\n        metricsModel.clearAllCurrentMetrics();\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentHttpRequest(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n\n        if (!metrics) {\n            return null;\n        }\n\n        const httpList = metrics.HttpList;\n        let currentHttpList = null;\n\n        let httpListLastIndex;\n\n        if (!httpList || httpList.length <= 0) {\n            return null;\n        }\n\n        httpListLastIndex = httpList.length - 1;\n\n        while (httpListLastIndex >= 0) {\n            if (httpList[httpListLastIndex].responsecode) {\n                currentHttpList = httpList[httpListLastIndex];\n                break;\n            }\n            httpListLastIndex--;\n        }\n        return currentHttpList;\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getHttpRequests(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n        if (!metrics) {\n            return [];\n        }\n\n        return !!metrics.HttpList ? metrics.HttpList : [];\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {Array} loadingRequests\n     * @param {Array} executedRequests\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addRequestsQueue(mediaType, loadingRequests, executedRequests) {\n        metricsModel.addRequestsQueue(mediaType, loadingRequests, executedRequests);\n    }\n\n    /**\n     * @param {MetricsList} metrics\n     * @param {string} metricName\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrent(metrics, metricName) {\n        if (!metrics) {\n            return null;\n        }\n        const list = metrics[metricName];\n        return (!list || list.length === 0) ? null : list[list.length - 1];\n    }\n\n    /**\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function getCurrentDroppedFrames() {\n        const metrics = metricsModel.getMetricsFor(Constants.VIDEO, true);\n        return getCurrent(metrics, MetricsConstants.DROPPED_FRAMES);\n    }\n\n    /**\n     * @param {number} quality\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addDroppedFrames(quality) {\n        metricsModel.addDroppedFrames(Constants.VIDEO, quality);\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentSchedulingInfo(mediaType) {\n        const metrics = metricsModel.getMetricsFor(mediaType, true);\n        return getCurrent(metrics, MetricsConstants.SCHEDULING_INFO);\n    }\n\n    /**\n     * @param {object} request\n     * @param {string} state\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addSchedulingInfo(request, state) {\n        metricsModel.addSchedulingInfo(\n            request.mediaType,\n            new Date(),\n            request.type,\n            request.startTime,\n            request.availabilityStartTime,\n            request.duration,\n            request.quality,\n            request.range,\n            state);\n    }\n\n    /**\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentManifestUpdate() {\n        const streamMetrics = metricsModel.getMetricsFor(Constants.STREAM);\n        return getCurrent(streamMetrics, MetricsConstants.MANIFEST_UPDATE);\n    }\n\n    /**\n     * @param {object} updatedFields fields to be updated\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function updateManifestUpdateInfo(updatedFields) {\n        const manifestUpdate = this.getCurrentManifestUpdate();\n        metricsModel.updateManifestUpdateInfo(manifestUpdate, updatedFields);\n    }\n\n    /**\n     * @param {object} streamInfo\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addManifestUpdateStreamInfo(streamInfo) {\n        if (streamInfo) {\n            const manifestUpdate = this.getCurrentManifestUpdate();\n            metricsModel.addManifestUpdateStreamInfo(manifestUpdate, streamInfo.id, streamInfo.index, streamInfo.start, streamInfo.duration);\n        }\n    }\n\n    /**\n     * @param {object} request\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addManifestUpdate(request) {\n        metricsModel.addManifestUpdate(Constants.STREAM, request.type, request.requestStartDate, request.requestEndDate);\n    }\n\n    /**\n     * @param {object} request\n     * @param {string} responseURL\n     * @param {number} responseStatus\n     * @param {object} responseHeaders\n     * @param {object} traces\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addHttpRequest(request, responseURL, responseStatus, responseHeaders, traces) {\n        metricsModel.addHttpRequest(request.mediaType,\n            null,\n            request.type,\n            request.url,\n            request.quality,\n            responseURL,\n            request.serviceLocation || null,\n            request.range || null,\n            request.requestStartDate,\n            request.firstByteDate,\n            request.requestEndDate,\n            responseStatus,\n            request.duration,\n            responseHeaders,\n            traces);\n    }\n\n    /**\n     * @param {object} representation\n     * @param {MediaType} mediaType\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addManifestUpdateRepresentationInfo(representation, mediaType) {\n        if (representation) {\n            const manifestUpdateInfo = this.getCurrentManifestUpdate();\n            metricsModel.addManifestUpdateRepresentationInfo(manifestUpdateInfo, representation.id, representation.index, representation.streamIndex, mediaType, representation.presentationTimeOffset, representation.startNumber, representation.fragmentInfoType);\n        }\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getCurrentDVRInfo(mediaType) {\n        const metrics = mediaType ? metricsModel.getMetricsFor(mediaType, true) :\n            metricsModel.getMetricsFor(Constants.VIDEO, true) || metricsModel.getMetricsFor(Constants.AUDIO, true);\n        return getCurrent(metrics, MetricsConstants.DVR_INFO);\n    }\n\n    /**\n     * @param {MediaType} mediaType\n     * @param {Date} currentTime time of the switch event\n     * @param {object} mpd mpd reference\n     * @param {object} range range of the dvr info\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addDVRInfo(mediaType, currentTime, mpd, range) {\n        metricsModel.addDVRInfo(mediaType, currentTime, mpd, range);\n    }\n\n    /**\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestMPDRequestHeaderValueByID(id) {\n        let headers = {};\n        let httpRequestList,\n            httpRequest,\n            i;\n\n        httpRequestList = getHttpRequests(Constants.STREAM);\n\n        for (i = httpRequestList.length - 1; i >= 0; i--) {\n            httpRequest = httpRequestList[i];\n\n            if (httpRequest.type === HTTPRequest.MPD_TYPE) {\n                headers = Utils.parseHttpHeaders(httpRequest._responseHeaders);\n                break;\n            }\n        }\n\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    /**\n     * @param {string} type\n     * @param {string} id\n     * @returns {*}\n     * @memberof module:DashMetrics\n     * @instance\n     */\n    function getLatestFragmentRequestHeaderValueByID(type, id) {\n        let headers = {};\n        let httpRequest = getCurrentHttpRequest(type, true);\n        if (httpRequest) {\n            headers = Utils.parseHttpHeaders(httpRequest._responseHeaders);\n        }\n        return headers[id] === undefined ? null :  headers[id];\n    }\n\n    /**\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addPlayList() {\n        if (playListMetrics) {\n            metricsModel.addPlayList(playListMetrics);\n            playListMetrics = null;\n        }\n    }\n\n    function createPlaylistMetrics(mediaStartTime, startReason) {\n        playListMetrics = new PlayList();\n\n        playListMetrics.start = new Date();\n        playListMetrics.mstart = mediaStartTime;\n        playListMetrics.starttype = startReason;\n    }\n\n    function createPlaylistTraceMetrics(representationId, mediaStartTime, speed) {\n        if (playListTraceMetricsClosed === true ) {\n            playListTraceMetricsClosed = false;\n            playListTraceMetrics = new PlayListTrace();\n\n            playListTraceMetrics.representationid = representationId;\n            playListTraceMetrics.start = new Date();\n            playListTraceMetrics.mstart = mediaStartTime;\n            playListTraceMetrics.playbackspeed = speed !== null ? speed.toString() : null;\n        }\n    }\n\n    function updatePlayListTraceMetrics(traceToUpdate) {\n        if (playListTraceMetrics) {\n            for (let field in playListTraceMetrics) {\n                playListTraceMetrics[field] = traceToUpdate[field];\n            }\n        }\n    }\n\n    function pushPlayListTraceMetrics(endTime, reason) {\n        if (playListTraceMetricsClosed === false && playListMetrics && playListTraceMetrics && playListTraceMetrics.start) {\n            const startTime = playListTraceMetrics.start;\n            const duration = endTime.getTime() - startTime.getTime();\n            playListTraceMetrics.duration = duration;\n            playListTraceMetrics.stopreason = reason;\n            playListMetrics.trace.push(playListTraceMetrics);\n            playListTraceMetricsClosed = true;\n        }\n    }\n\n    /**\n     * @param {object} errors\n     * @memberof module:DashMetrics\n     * @instance\n     * @ignore\n     */\n    function addDVBErrors(errors) {\n        metricsModel.addDVBErrors(errors);\n    }\n\n    instance = {\n        getCurrentRepresentationSwitch: getCurrentRepresentationSwitch,\n        getCurrentBufferState: getCurrentBufferState,\n        getCurrentBufferLevel: getCurrentBufferLevel,\n        getCurrentHttpRequest: getCurrentHttpRequest,\n        getHttpRequests: getHttpRequests,\n        getCurrentDroppedFrames: getCurrentDroppedFrames,\n        getCurrentSchedulingInfo: getCurrentSchedulingInfo,\n        getCurrentDVRInfo: getCurrentDVRInfo,\n        getCurrentManifestUpdate: getCurrentManifestUpdate,\n        getLatestFragmentRequestHeaderValueByID: getLatestFragmentRequestHeaderValueByID,\n        getLatestMPDRequestHeaderValueByID: getLatestMPDRequestHeaderValueByID,\n        addRepresentationSwitch: addRepresentationSwitch,\n        addDVRInfo: addDVRInfo,\n        updateManifestUpdateInfo: updateManifestUpdateInfo,\n        addManifestUpdateStreamInfo: addManifestUpdateStreamInfo,\n        addManifestUpdateRepresentationInfo: addManifestUpdateRepresentationInfo,\n        addManifestUpdate: addManifestUpdate,\n        addHttpRequest: addHttpRequest,\n        addSchedulingInfo: addSchedulingInfo,\n        addRequestsQueue: addRequestsQueue,\n        addBufferLevel: addBufferLevel,\n        addBufferState: addBufferState,\n        addDroppedFrames: addDroppedFrames,\n        addPlayList: addPlayList,\n        addDVBErrors: addDVBErrors,\n        createPlaylistMetrics: createPlaylistMetrics,\n        createPlaylistTraceMetrics: createPlaylistTraceMetrics,\n        updatePlayListTraceMetrics: updatePlayListTraceMetrics,\n        pushPlayListTraceMetrics: pushPlayListTraceMetrics,\n        clearAllCurrentMetrics: clearAllCurrentMetrics\n    };\n\n    setup();\n\n    return instance;\n}\n\nDashMetrics.__dashjs_factory_name = 'DashMetrics';\nexport default FactoryMaker.getSingletonFactory(DashMetrics);\n"]},"metadata":{},"sourceType":"script"}