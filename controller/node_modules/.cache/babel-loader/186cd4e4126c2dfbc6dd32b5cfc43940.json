{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _MetricsReportingEvents = require('../../MetricsReportingEvents');\n\nvar _MetricsReportingEvents2 = _interopRequireDefault(_MetricsReportingEvents);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction DVBErrorsHandler(config) {\n  config = config || {};\n  var instance = void 0,\n      reportingController = void 0;\n  var eventBus = config.eventBus;\n  var metricsConstants = config.metricsConstants;\n\n  function onInitialisationComplete() {\n    // we only want to report this once per call to initialize\n    eventBus.off(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this); // Note: A Player becoming a reporting Player is itself\n    // something which is recorded by the DVBErrors metric.\n\n    eventBus.trigger(_MetricsReportingEvents2.default.BECAME_REPORTING_PLAYER);\n  }\n\n  function initialize(unused, rc) {\n    if (rc) {\n      reportingController = rc;\n      eventBus.on(_MetricsReportingEvents2.default.METRICS_INITIALISATION_COMPLETE, onInitialisationComplete, this);\n    }\n  }\n\n  function reset() {\n    reportingController = null;\n  }\n\n  function handleNewMetric(metric, vo) {\n    // simply pass metric straight through\n    if (metric === metricsConstants.DVB_ERRORS) {\n      if (reportingController) {\n        reportingController.report(metric, vo);\n      }\n    }\n  }\n\n  instance = {\n    initialize: initialize,\n    reset: reset,\n    handleNewMetric: handleNewMetric\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nexports.default = dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler);\n/* jshint ignore:line */","map":{"version":3,"mappings":";;;;;;AA+BA;;;;;;;;AAEA;;AAAA,SAASA,gBAAT,CAA0BC,MAA1B,EAAkC;EAE9BA,SAASA,UAAU,EAAnBA;EACA,IAAIC,iBAAJ;EAAA,IACIC,4BADJ;EAGA,IAAIC,WAAWH,OAAOG,QAAtB;EACA,IAAMC,mBAAmBJ,OAAOI,gBAAhC;;EAEA,SAASC,wBAAT,GAAoC;IAChC;IACAF,SAASG,GAATH,CACII,iCAAuBC,+BAD3BL,EAEIE,wBAFJF,EAGI,IAHJA,EAFgC,CAQhC;IACA;;IACAA,SAASM,OAATN,CAAiBI,iCAAuBG,uBAAxCP;EAGJ;;EAAA,SAASQ,UAAT,CAAoBC,MAApB,EAA4BC,EAA5B,EAAgC;IAC5B,IAAIA,EAAJ,EAAQ;MACJX,sBAAsBW,EAAtBX;MAEAC,SAASW,EAATX,CACII,iCAAuBC,+BAD3BL,EAEIE,wBAFJF,EAGI,IAHJA;IAMP;EAED;;EAAA,SAASY,KAAT,GAAiB;IACbb,sBAAsB,IAAtBA;EAGJ;;EAAA,SAASc,eAAT,CAAyBC,MAAzB,EAAiCC,EAAjC,EAAqC;IACjC;IACA,IAAID,WAAWb,iBAAiBe,UAAhC,EAA4C;MACxC,IAAIjB,mBAAJ,EAAyB;QACrBA,oBAAoBkB,MAApBlB,CAA2Be,MAA3Bf,EAAmCgB,EAAnChB;MAEP;IACJ;EAEDD;;EAAAA,WAAW;IACPU,YAAoBA,UADb;IAEPI,OAAoBA,KAFb;IAGPC,iBAAoBA;EAHb,CAAXf;EAMA,OAAOA,QAAP;AAtFJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kBAyFeoB,OAAOC,YAAPD,CAAoBE,eAApBF,CAAoCtB,gBAApCsB;AAAuD","names":["DVBErrorsHandler","config","instance","reportingController","eventBus","metricsConstants","onInitialisationComplete","off","MetricsReportingEvents","METRICS_INITIALISATION_COMPLETE","trigger","BECAME_REPORTING_PLAYER","initialize","unused","rc","on","reset","handleNewMetric","metric","vo","DVB_ERRORS","report","dashjs","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/metrics/handlers/DVBErrorsHandler.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport MetricsReportingEvents from '../../MetricsReportingEvents';\n\nfunction DVBErrorsHandler(config) {\n\n    config = config || {};\n    let instance,\n        reportingController;\n\n    let eventBus = config.eventBus;\n    const metricsConstants = config.metricsConstants;\n\n    function onInitialisationComplete() {\n        // we only want to report this once per call to initialize\n        eventBus.off(\n            MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n            onInitialisationComplete,\n            this\n        );\n\n        // Note: A Player becoming a reporting Player is itself\n        // something which is recorded by the DVBErrors metric.\n        eventBus.trigger(MetricsReportingEvents.BECAME_REPORTING_PLAYER);\n    }\n\n    function initialize(unused, rc) {\n        if (rc) {\n            reportingController = rc;\n\n            eventBus.on(\n                MetricsReportingEvents.METRICS_INITIALISATION_COMPLETE,\n                onInitialisationComplete,\n                this\n            );\n        }\n    }\n\n    function reset() {\n        reportingController = null;\n    }\n\n    function handleNewMetric(metric, vo) {\n        // simply pass metric straight through\n        if (metric === metricsConstants.DVB_ERRORS) {\n            if (reportingController) {\n                reportingController.report(metric, vo);\n            }\n        }\n    }\n\n    instance = {\n        initialize:         initialize,\n        reset:              reset,\n        handleNewMetric:    handleNewMetric\n    };\n\n    return instance;\n}\n\nexport default dashjs.FactoryMaker.getClassFactory(DVBErrorsHandler); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}