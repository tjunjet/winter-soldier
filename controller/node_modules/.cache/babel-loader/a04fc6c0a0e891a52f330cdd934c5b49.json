{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Constants = require('../../streaming/constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _SegmentsUtils = require('./SegmentsUtils');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction TemplateSegmentsGetter(config, isDynamic) {\n  config = config || {};\n  var timelineConverter = config.timelineConverter;\n  var instance = void 0;\n\n  function checkConfig() {\n    if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n\n  function getSegmentByIndex(representation, index) {\n    checkConfig();\n\n    if (!representation) {\n      return null;\n    }\n\n    var template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;\n    index = Math.max(index, 0);\n    var seg = (0, _SegmentsUtils.getIndexBasedSegment)(timelineConverter, isDynamic, representation, index);\n\n    if (seg) {\n      seg.replacementTime = Math.round((index - 1) * representation.segmentDuration * representation.timescale, 10);\n      var url = template.media;\n      url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Number', seg.replacementNumber);\n      url = (0, _SegmentsUtils.replaceTokenForTemplate)(url, 'Time', seg.replacementTime);\n      seg.media = url;\n    }\n\n    var duration = representation.segmentDuration;\n    var availabilityWindow = representation.segmentAvailabilityRange;\n\n    if (isNaN(duration)) {\n      representation.availableSegmentsNumber = 1;\n    } else {\n      representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);\n    }\n\n    return seg;\n  }\n\n  function getSegmentByTime(representation, requestedTime) {\n    checkConfig();\n\n    if (!representation) {\n      return null;\n    }\n\n    var duration = representation.segmentDuration;\n\n    if (isNaN(duration)) {\n      return null;\n    }\n\n    var periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\n    var index = Math.floor(periodTime / duration);\n    return getSegmentByIndex(representation, index);\n  }\n\n  instance = {\n    getSegmentByIndex: getSegmentByIndex,\n    getSegmentByTime: getSegmentByTime\n  };\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nTemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';\n\nvar factory = _FactoryMaker2.default.getClassFactory(TemplateSegmentsGetter);\n\nexports.default = factory;","map":{"version":3,"mappings":";;;;;;AA+BA;;;;AACA;;;;AAEA;;;;;;AAEA;;AAAA,SAASA,sBAAT,CAAgCC,MAAhC,EAAwCC,SAAxC,EAAmD;EAC/CD,SAASA,UAAU,EAAnBA;EACA,IAAME,oBAAoBF,OAAOE,iBAAjC;EAEA,IAAIC,iBAAJ;;EAEA,SAASC,WAAT,GAAuB;IACnB,IAAI,CAACF,iBAAD,IAAsB,CAACA,kBAAkBG,cAAlBH,CAAiC,2CAAjCA,CAA3B,EAA0G;MACtG,MAAM,IAAII,KAAJ,CAAUC,oBAAUC,oBAApB,CAAN;IAEP;EAED;;EAAA,SAASC,iBAAT,CAA2BC,cAA3B,EAA2CC,KAA3C,EAAkD;IAC9CP;;IAEA,IAAI,CAACM,cAAL,EAAqB;MACjB,OAAO,IAAP;IAGJ;;IAAA,IAAME,WAAWF,eAAeG,UAAfH,CAA0BI,MAA1BJ,CAAiCK,GAAjCL,CAAqCM,QAArCN,CAA8CO,cAA9CP,CAA6DA,eAAeG,UAAfH,CAA0BI,MAA1BJ,CAAiCC,KAA9FD,EACbQ,qBADaR,CACSA,eAAeG,UAAfH,CAA0BC,KADnCD,EAC0CS,sBAD1CT,CACiEA,eAAeC,KADhFD,EACuFU,eADxG;IAGAT,QAAQU,KAAKC,GAALD,CAASV,KAATU,EAAgB,CAAhBA,CAARV;IAEA,IAAMY,MAAM,yCAAqBrB,iBAArB,EAAwCD,SAAxC,EAAmDS,cAAnD,EAAmEC,KAAnE,CAAZ;;IACA,IAAIY,GAAJ,EAAS;MACLA,IAAIC,eAAJD,GAAsBF,KAAKI,KAALJ,CAAW,CAACV,QAAQ,CAAT,IAAcD,eAAegB,eAA7B,GAA+ChB,eAAeiB,SAAzEN,EAAmF,EAAnFA,CAAtBE;MAEA,IAAIK,MAAMhB,SAASiB,KAAnB;MACAD,MAAM,4CAAwBA,GAAxB,EAA6B,QAA7B,EAAuCL,IAAIO,iBAA3C,CAANF;MACAA,MAAM,4CAAwBA,GAAxB,EAA6B,MAA7B,EAAqCL,IAAIC,eAAzC,CAANI;MACAL,IAAIM,KAAJN,GAAYK,GAAZL;IAGJ;;IAAA,IAAMQ,WAAWrB,eAAegB,eAAhC;IACA,IAAMM,qBAAqBtB,eAAeuB,wBAA1C;;IACA,IAAIC,MAAMH,QAANG,CAAJ,EAAqB;MACjBxB,eAAeyB,uBAAfzB,GAAyC,CAAzCA;IADJ,OAGK;MACDA,eAAeyB,uBAAfzB,GAAyCW,KAAKe,IAALf,CAAU,CAACW,mBAAmBK,GAAnBL,GAAyBA,mBAAmBM,KAA7C,IAAsDP,QAAhEV,CAAzCX;IAGJ;;IAAA,OAAOa,GAAP;EAGJ;;EAAA,SAASgB,gBAAT,CAA0B7B,cAA1B,EAA0C8B,aAA1C,EAAyD;IACrDpC;;IAEA,IAAI,CAACM,cAAL,EAAqB;MACjB,OAAO,IAAP;IAGJ;;IAAA,IAAMqB,WAAWrB,eAAegB,eAAhC;;IAEA,IAAIQ,MAAMH,QAANG,CAAJ,EAAqB;MACjB,OAAO,IAAP;IAGJ;;IAAA,IAAMO,aAAavC,kBAAkBwC,yCAAlBxC,CAA4DQ,cAA5DR,EAA4EsC,aAA5EtC,CAAnB;IACA,IAAMS,QAAQU,KAAKsB,KAALtB,CAAWoB,aAAaV,QAAxBV,CAAd;IAEA,OAAOZ,kBAAkBC,cAAlBD,EAAkCE,KAAlCF,CAAP;EAGJN;;EAAAA,WAAW;IACPM,mBAAmBA,iBADZ;IAEP8B,kBAAkBA;EAFX,CAAXpC;EAKA,OAAOA,QAAP;AA1GJ;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6GAJ,uBAAuB6C,qBAAvB7C,GAA+C,wBAA/CA;;AACA,IAAM8C,UAAUC,uBAAaC,eAAbD,CAA6B/C,sBAA7B+C,CAAhB;;kBACeD,O","names":["TemplateSegmentsGetter","config","isDynamic","timelineConverter","instance","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getSegmentByIndex","representation","index","template","adaptation","period","mpd","manifest","Period_asArray","AdaptationSet_asArray","Representation_asArray","SegmentTemplate","Math","max","seg","replacementTime","round","segmentDuration","timescale","url","media","replacementNumber","duration","availabilityWindow","segmentAvailabilityRange","isNaN","availableSegmentsNumber","ceil","end","start","getSegmentByTime","requestedTime","periodTime","calcPeriodRelativeTimeFromMpdRelativeTime","floor","__dashjs_factory_name","factory","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/dash/utils/TemplateSegmentsGetter.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Constants from '../../streaming/constants/Constants';\n\nimport { replaceTokenForTemplate, getIndexBasedSegment } from './SegmentsUtils';\n\nfunction TemplateSegmentsGetter(config, isDynamic) {\n    config = config || {};\n    const timelineConverter = config.timelineConverter;\n\n    let instance;\n\n    function checkConfig() {\n        if (!timelineConverter || !timelineConverter.hasOwnProperty('calcPeriodRelativeTimeFromMpdRelativeTime')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getSegmentByIndex(representation, index) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const template = representation.adaptation.period.mpd.manifest.Period_asArray[representation.adaptation.period.index].\n            AdaptationSet_asArray[representation.adaptation.index].Representation_asArray[representation.index].SegmentTemplate;\n\n        index = Math.max(index, 0);\n\n        const seg = getIndexBasedSegment(timelineConverter, isDynamic, representation, index);\n        if (seg) {\n            seg.replacementTime = Math.round((index - 1) * representation.segmentDuration * representation.timescale,10);\n\n            let url = template.media;\n            url = replaceTokenForTemplate(url, 'Number', seg.replacementNumber);\n            url = replaceTokenForTemplate(url, 'Time', seg.replacementTime);\n            seg.media = url;\n        }\n\n        const duration = representation.segmentDuration;\n        const availabilityWindow = representation.segmentAvailabilityRange;\n        if (isNaN(duration)) {\n            representation.availableSegmentsNumber = 1;\n        }\n        else {\n            representation.availableSegmentsNumber = Math.ceil((availabilityWindow.end - availabilityWindow.start) / duration);\n        }\n\n        return seg;\n    }\n\n    function getSegmentByTime(representation, requestedTime) {\n        checkConfig();\n\n        if (!representation) {\n            return null;\n        }\n\n        const duration = representation.segmentDuration;\n\n        if (isNaN(duration)) {\n            return null;\n        }\n\n        const periodTime = timelineConverter.calcPeriodRelativeTimeFromMpdRelativeTime(representation, requestedTime);\n        const index = Math.floor(periodTime / duration);\n\n        return getSegmentByIndex(representation, index);\n    }\n\n    instance = {\n        getSegmentByIndex: getSegmentByIndex,\n        getSegmentByTime: getSegmentByTime\n    };\n\n    return instance;\n}\n\nTemplateSegmentsGetter.__dashjs_factory_name = 'TemplateSegmentsGetter';\nconst factory = FactoryMaker.getClassFactory(TemplateSegmentsGetter);\nexport default factory;\n"]},"metadata":{},"sourceType":"script"}