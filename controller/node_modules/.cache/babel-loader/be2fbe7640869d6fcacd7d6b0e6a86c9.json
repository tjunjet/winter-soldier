{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _FactoryMaker = require('../../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nvar _SwitchRequest = require('../SwitchRequest');\n\nvar _SwitchRequest2 = _interopRequireDefault(_SwitchRequest);\n\nvar _Constants = require('../../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _MetricsConstants = require('../../constants/MetricsConstants');\n\nvar _MetricsConstants2 = _interopRequireDefault(_MetricsConstants);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ThroughputRule(config) {\n  config = config || {};\n  var context = this.context;\n  var dashMetrics = config.dashMetrics;\n  var instance = void 0,\n      logger = void 0;\n\n  function setup() {\n    logger = (0, _Debug2.default)(context).getInstance().getLogger(instance);\n  }\n\n  function checkConfig() {\n    if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferState')) {\n      throw new Error(_Constants2.default.MISSING_CONFIG_ERROR);\n    }\n  }\n\n  function getMaxIndex(rulesContext) {\n    var switchRequest = (0, _SwitchRequest2.default)(context).create();\n\n    if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') || !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')) {\n      return switchRequest;\n    }\n\n    checkConfig();\n    var mediaInfo = rulesContext.getMediaInfo();\n    var mediaType = rulesContext.getMediaType();\n    var currentBufferState = dashMetrics.getCurrentBufferState(mediaType);\n    var scheduleController = rulesContext.getScheduleController();\n    var abrController = rulesContext.getAbrController();\n    var streamInfo = rulesContext.getStreamInfo();\n    var isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\n    var throughputHistory = abrController.getThroughputHistory();\n    var throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\n    var latency = throughputHistory.getAverageLatency(mediaType);\n    var useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\n\n    if (isNaN(throughput) || !currentBufferState || useBufferOccupancyABR) {\n      return switchRequest;\n    }\n\n    if (abrController.getAbandonmentStateFor(mediaType) !== _MetricsConstants2.default.ABANDON_LOAD) {\n      if (currentBufferState.state === _MetricsConstants2.default.BUFFER_LOADED || isDynamic) {\n        switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\n        scheduleController.setTimeToLoadDelay(0);\n        logger.debug('[' + mediaType + '] requesting switch to index: ', switchRequest.quality, 'Average throughput', Math.round(throughput), 'kbps');\n        switchRequest.reason = {\n          throughput: throughput,\n          latency: latency\n        };\n      }\n    }\n\n    return switchRequest;\n  }\n\n  function reset() {// no persistent information to reset\n  }\n\n  instance = {\n    getMaxIndex: getMaxIndex,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\nexports.default = _FactoryMaker2.default.getClassFactory(ThroughputRule);","map":{"version":3,"mappings":"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","names":["ThroughputRule","config","context","dashMetrics","instance","logger","setup","getInstance","getLogger","checkConfig","hasOwnProperty","Error","Constants","MISSING_CONFIG_ERROR","getMaxIndex","rulesContext","switchRequest","create","mediaInfo","getMediaInfo","mediaType","getMediaType","currentBufferState","getCurrentBufferState","scheduleController","getScheduleController","abrController","getAbrController","streamInfo","getStreamInfo","isDynamic","manifestInfo","throughputHistory","getThroughputHistory","throughput","getSafeAverageThroughput","latency","getAverageLatency","useBufferOccupancyABR","isNaN","getAbandonmentStateFor","MetricsConstants","ABANDON_LOAD","state","BUFFER_LOADED","quality","getQualityForBitrate","setTimeToLoadDelay","debug","Math","round","reason","reset","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/rules/abr/ThroughputRule.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport FactoryMaker from '../../../core/FactoryMaker';\nimport Debug from '../../../core/Debug';\nimport SwitchRequest from '../SwitchRequest';\nimport Constants from '../../constants/Constants';\nimport MetricsConstants from '../../constants/MetricsConstants';\n\nfunction ThroughputRule(config) {\n\n    config = config || {};\n    const context = this.context;\n    const dashMetrics = config.dashMetrics;\n\n    let instance,\n        logger;\n\n    function setup() {\n        logger = Debug(context).getInstance().getLogger(instance);\n    }\n\n    function checkConfig() {\n        if (!dashMetrics || !dashMetrics.hasOwnProperty('getCurrentBufferState')) {\n            throw new Error(Constants.MISSING_CONFIG_ERROR);\n        }\n    }\n\n    function getMaxIndex(rulesContext) {\n        const switchRequest = SwitchRequest(context).create();\n\n        if (!rulesContext || !rulesContext.hasOwnProperty('getMediaInfo') || !rulesContext.hasOwnProperty('getMediaType') || !rulesContext.hasOwnProperty('useBufferOccupancyABR') ||\n            !rulesContext.hasOwnProperty('getAbrController') || !rulesContext.hasOwnProperty('getScheduleController')) {\n            return switchRequest;\n        }\n\n        checkConfig();\n\n        const mediaInfo = rulesContext.getMediaInfo();\n        const mediaType = rulesContext.getMediaType();\n        const currentBufferState = dashMetrics.getCurrentBufferState(mediaType);\n        const scheduleController = rulesContext.getScheduleController();\n        const abrController = rulesContext.getAbrController();\n        const streamInfo = rulesContext.getStreamInfo();\n        const isDynamic = streamInfo && streamInfo.manifestInfo ? streamInfo.manifestInfo.isDynamic : null;\n        const throughputHistory = abrController.getThroughputHistory();\n        const throughput = throughputHistory.getSafeAverageThroughput(mediaType, isDynamic);\n        const latency = throughputHistory.getAverageLatency(mediaType);\n        const useBufferOccupancyABR = rulesContext.useBufferOccupancyABR();\n\n\n        if (isNaN(throughput) || !currentBufferState || useBufferOccupancyABR) {\n            return switchRequest;\n        }\n\n        if (abrController.getAbandonmentStateFor(mediaType) !== MetricsConstants.ABANDON_LOAD) {\n            if (currentBufferState.state === MetricsConstants.BUFFER_LOADED || isDynamic) {\n                switchRequest.quality = abrController.getQualityForBitrate(mediaInfo, throughput, latency);\n                scheduleController.setTimeToLoadDelay(0);\n                logger.debug('[' + mediaType + '] requesting switch to index: ', switchRequest.quality, 'Average throughput', Math.round(throughput), 'kbps');\n                switchRequest.reason = {throughput: throughput, latency: latency};\n            }\n        }\n\n        return switchRequest;\n    }\n\n    function reset() {\n        // no persistent information to reset\n    }\n\n    instance = {\n        getMaxIndex: getMaxIndex,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nThroughputRule.__dashjs_factory_name = 'ThroughputRule';\nexport default FactoryMaker.getClassFactory(ThroughputRule);\n"]},"metadata":{},"sourceType":"script"}