{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Constants = require('../constants/Constants');\n\nvar _Constants2 = _interopRequireDefault(_Constants);\n\nvar _DataChunk = require('../vo/DataChunk');\n\nvar _DataChunk2 = _interopRequireDefault(_DataChunk);\n\nvar _FragmentModel = require('../models/FragmentModel');\n\nvar _FragmentModel2 = _interopRequireDefault(_FragmentModel);\n\nvar _FragmentLoader = require('../FragmentLoader');\n\nvar _FragmentLoader2 = _interopRequireDefault(_FragmentLoader);\n\nvar _RequestModifier = require('../utils/RequestModifier');\n\nvar _RequestModifier2 = _interopRequireDefault(_RequestModifier);\n\nvar _EventBus = require('../../core/EventBus');\n\nvar _EventBus2 = _interopRequireDefault(_EventBus);\n\nvar _Events = require('../../core/events/Events');\n\nvar _Events2 = _interopRequireDefault(_Events);\n\nvar _Errors = require('../../core/errors/Errors');\n\nvar _Errors2 = _interopRequireDefault(_Errors);\n\nvar _FactoryMaker = require('../../core/FactoryMaker');\n\nvar _FactoryMaker2 = _interopRequireDefault(_FactoryMaker);\n\nvar _Debug = require('../../core/Debug');\n\nvar _Debug2 = _interopRequireDefault(_Debug);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n\nfunction FragmentController(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = (0, _EventBus2.default)(context).getInstance();\n  var errHandler = config.errHandler;\n  var mediaPlayerModel = config.mediaPlayerModel;\n  var dashMetrics = config.dashMetrics;\n  var debug = (0, _Debug2.default)(context).getInstance();\n  var streamInfo = config.streamInfo;\n  var instance = void 0,\n      logger = void 0,\n      fragmentModels = void 0;\n\n  function setup() {\n    logger = debug.getLogger(instance);\n    resetInitialSettings();\n    eventBus.on(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\n    eventBus.on(_Events2.default.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);\n  }\n\n  function getStreamId() {\n    return streamInfo.id;\n  }\n\n  function getModel(type) {\n    var model = fragmentModels[type];\n\n    if (!model) {\n      model = (0, _FragmentModel2.default)(context).create({\n        streamInfo: streamInfo,\n        type: type,\n        dashMetrics: dashMetrics,\n        fragmentLoader: (0, _FragmentLoader2.default)(context).create({\n          dashMetrics: dashMetrics,\n          mediaPlayerModel: mediaPlayerModel,\n          errHandler: errHandler,\n          requestModifier: (0, _RequestModifier2.default)(context).getInstance(),\n          settings: config.settings,\n          boxParser: config.boxParser,\n          eventBus: eventBus,\n          events: _Events2.default,\n          errors: _Errors2.default,\n          dashConstants: config.dashConstants,\n          urlUtils: config.urlUtils\n        }),\n        debug: debug,\n        eventBus: eventBus,\n        events: _Events2.default\n      });\n      fragmentModels[type] = model;\n    }\n\n    return model;\n  }\n\n  function resetInitialSettings() {\n    for (var model in fragmentModels) {\n      fragmentModels[model].reset();\n    }\n\n    fragmentModels = {};\n  }\n\n  function reset() {\n    eventBus.off(_Events2.default.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n    eventBus.off(_Events2.default.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);\n    resetInitialSettings();\n  }\n\n  function createDataChunk(bytes, request, streamId, endFragment) {\n    var chunk = new _DataChunk2.default();\n    chunk.streamId = streamId;\n    chunk.mediaInfo = request.mediaInfo;\n    chunk.segmentType = request.type;\n    chunk.start = request.startTime;\n    chunk.duration = request.duration;\n    chunk.end = chunk.start + chunk.duration;\n    chunk.bytes = bytes;\n    chunk.index = request.index;\n    chunk.quality = request.quality;\n    chunk.representationId = request.representationId;\n    chunk.endFragment = endFragment;\n    return chunk;\n  }\n\n  function onFragmentLoadingCompleted(e) {\n    // Event propagation may have been stopped (see MssHandler)\n    if (!e.sender) return;\n    var request = e.request;\n    var bytes = e.response;\n    var isInit = request.isInitializationRequest();\n    var strInfo = request.mediaInfo.streamInfo;\n\n    if (e.error) {\n      if (request.mediaType === _Constants2.default.AUDIO || request.mediaType === _Constants2.default.VIDEO || request.mediaType === _Constants2.default.FRAGMENTED_TEXT) {\n        // add service location to blacklist controller - only for audio or video. text should not set errors\n        eventBus.trigger(_Events2.default.SERVICE_LOCATION_BLACKLIST_ADD, {\n          entry: e.request.serviceLocation\n        });\n      }\n    }\n\n    if (!bytes || !strInfo) {\n      logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');\n      return;\n    }\n\n    var chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== _Events2.default.FRAGMENT_LOADING_PROGRESS);\n    eventBus.trigger(isInit ? _Events2.default.INIT_FRAGMENT_LOADED : _Events2.default.MEDIA_FRAGMENT_LOADED, {\n      chunk: chunk,\n      request: request\n    }, {\n      streamId: strInfo.id,\n      mediaType: request.mediaType\n    });\n  }\n\n  instance = {\n    getStreamId: getStreamId,\n    getModel: getModel,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n\nFragmentController.__dashjs_factory_name = 'FragmentController';\nexports.default = _FactoryMaker2.default.getClassFactory(FragmentController);","map":{"version":3,"mappings":"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","names":["FragmentController","config","context","eventBus","getInstance","errHandler","mediaPlayerModel","dashMetrics","debug","streamInfo","instance","logger","fragmentModels","setup","getLogger","resetInitialSettings","on","Events","FRAGMENT_LOADING_COMPLETED","onFragmentLoadingCompleted","FRAGMENT_LOADING_PROGRESS","getStreamId","id","getModel","type","model","create","fragmentLoader","requestModifier","settings","boxParser","events","errors","Errors","dashConstants","urlUtils","reset","off","createDataChunk","bytes","request","streamId","endFragment","chunk","DataChunk","mediaInfo","segmentType","start","startTime","duration","end","index","quality","representationId","e","sender","response","isInit","isInitializationRequest","strInfo","error","mediaType","Constants","AUDIO","VIDEO","FRAGMENTED_TEXT","trigger","SERVICE_LOCATION_BLACKLIST_ADD","entry","serviceLocation","warn","INIT_FRAGMENT_LOADED","MEDIA_FRAGMENT_LOADED","__dashjs_factory_name","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/controllers/FragmentController.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\nimport Constants from '../constants/Constants';\nimport DataChunk from '../vo/DataChunk';\nimport FragmentModel from '../models/FragmentModel';\nimport FragmentLoader from '../FragmentLoader';\nimport RequestModifier from '../utils/RequestModifier';\nimport EventBus from '../../core/EventBus';\nimport Events from '../../core/events/Events';\nimport Errors from '../../core/errors/Errors';\nimport FactoryMaker from '../../core/FactoryMaker';\nimport Debug from '../../core/Debug';\n\nfunction FragmentController( config ) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = EventBus(context).getInstance();\n\n    const errHandler = config.errHandler;\n    const mediaPlayerModel = config.mediaPlayerModel;\n    const dashMetrics = config.dashMetrics;\n    const debug = Debug(context).getInstance();\n    const streamInfo = config.streamInfo;\n\n    let instance,\n        logger,\n        fragmentModels;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        resetInitialSettings();\n        eventBus.on(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, instance);\n        eventBus.on(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, instance);\n    }\n\n    function getStreamId() {\n        return streamInfo.id;\n    }\n\n    function getModel(type) {\n        let model = fragmentModels[type];\n        if (!model) {\n            model = FragmentModel(context).create({\n                streamInfo: streamInfo,\n                type: type,\n                dashMetrics: dashMetrics,\n                fragmentLoader: FragmentLoader(context).create({\n                    dashMetrics: dashMetrics,\n                    mediaPlayerModel: mediaPlayerModel,\n                    errHandler: errHandler,\n                    requestModifier: RequestModifier(context).getInstance(),\n                    settings: config.settings,\n                    boxParser: config.boxParser,\n                    eventBus: eventBus,\n                    events: Events,\n                    errors: Errors,\n                    dashConstants: config.dashConstants,\n                    urlUtils: config.urlUtils\n                }),\n                debug: debug,\n                eventBus: eventBus,\n                events: Events\n            });\n\n            fragmentModels[type] = model;\n        }\n\n        return model;\n    }\n\n    function resetInitialSettings() {\n        for (let model in fragmentModels) {\n            fragmentModels[model].reset();\n        }\n        fragmentModels = {};\n    }\n\n    function reset() {\n        eventBus.off(Events.FRAGMENT_LOADING_COMPLETED, onFragmentLoadingCompleted, this);\n        eventBus.off(Events.FRAGMENT_LOADING_PROGRESS, onFragmentLoadingCompleted, this);\n        resetInitialSettings();\n    }\n\n    function createDataChunk(bytes, request, streamId, endFragment) {\n        const chunk = new DataChunk();\n\n        chunk.streamId = streamId;\n        chunk.mediaInfo = request.mediaInfo;\n        chunk.segmentType = request.type;\n        chunk.start = request.startTime;\n        chunk.duration = request.duration;\n        chunk.end = chunk.start + chunk.duration;\n        chunk.bytes = bytes;\n        chunk.index = request.index;\n        chunk.quality = request.quality;\n        chunk.representationId = request.representationId;\n        chunk.endFragment = endFragment;\n\n        return chunk;\n    }\n\n    function onFragmentLoadingCompleted(e) {\n        // Event propagation may have been stopped (see MssHandler)\n        if (!e.sender) return;\n\n        const request = e.request;\n        const bytes = e.response;\n        const isInit = request.isInitializationRequest();\n        const strInfo = request.mediaInfo.streamInfo;\n\n        if (e.error) {\n            if (request.mediaType === Constants.AUDIO || request.mediaType === Constants.VIDEO || request.mediaType === Constants.FRAGMENTED_TEXT) {\n                // add service location to blacklist controller - only for audio or video. text should not set errors\n                eventBus.trigger(Events.SERVICE_LOCATION_BLACKLIST_ADD, { entry: e.request.serviceLocation });\n            }\n        }\n\n        if (!bytes || !strInfo) {\n            logger.warn('No ' + request.mediaType + ' bytes to push or stream is inactive.');\n            return;\n        }\n        const chunk = createDataChunk(bytes, request, streamInfo.id, e.type !== Events.FRAGMENT_LOADING_PROGRESS);\n        eventBus.trigger(isInit ? Events.INIT_FRAGMENT_LOADED : Events.MEDIA_FRAGMENT_LOADED,\n            {\n                chunk: chunk,\n                request: request\n            },\n            { streamId: strInfo.id, mediaType: request.mediaType }\n        );\n    }\n\n    instance = {\n        getStreamId: getStreamId,\n        getModel: getModel,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nFragmentController.__dashjs_factory_name = 'FragmentController';\nexport default FactoryMaker.getClassFactory(FragmentController);\n"]},"metadata":{},"sourceType":"script"}