{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _ProtectionKeyController = require('../controllers/ProtectionKeyController');\n\nvar _ProtectionKeyController2 = _interopRequireDefault(_ProtectionKeyController);\n\nvar _NeedKey = require('../vo/NeedKey');\n\nvar _NeedKey2 = _interopRequireDefault(_NeedKey);\n\nvar _DashJSError = require('../../vo/DashJSError');\n\nvar _DashJSError2 = _interopRequireDefault(_DashJSError);\n\nvar _ProtectionErrors = require('../errors/ProtectionErrors');\n\nvar _ProtectionErrors2 = _interopRequireDefault(_ProtectionErrors);\n\nvar _KeyMessage = require('../vo/KeyMessage');\n\nvar _KeyMessage2 = _interopRequireDefault(_KeyMessage);\n\nvar _KeySystemConfiguration = require('../vo/KeySystemConfiguration');\n\nvar _KeySystemConfiguration2 = _interopRequireDefault(_KeySystemConfiguration);\n\nvar _KeySystemAccess = require('../vo/KeySystemAccess');\n\nvar _KeySystemAccess2 = _interopRequireDefault(_KeySystemAccess);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ProtectionModel_3Feb2014(config) {\n  config = config || {};\n  var context = this.context;\n  var eventBus = config.eventBus; //Need to pass in here so we can use same instance since this is optional module\n\n  var events = config.events;\n  var debug = config.debug;\n  var api = config.api;\n  var instance = void 0,\n      logger = void 0,\n      videoElement = void 0,\n      keySystem = void 0,\n      mediaKeys = void 0,\n      keySystemAccess = void 0,\n      sessions = void 0,\n      eventHandler = void 0,\n      protectionKeyController = void 0;\n\n  function setup() {\n    logger = debug.getLogger(instance);\n    videoElement = null;\n    keySystem = null;\n    mediaKeys = null;\n    keySystemAccess = null;\n    sessions = [];\n    protectionKeyController = (0, _ProtectionKeyController2.default)(context).getInstance();\n    eventHandler = createEventHandler();\n  }\n\n  function reset() {\n    try {\n      for (var i = 0; i < sessions.length; i++) {\n        closeKeySession(sessions[i]);\n      }\n\n      if (videoElement) {\n        videoElement.removeEventListener(api.needkey, eventHandler);\n      }\n\n      eventBus.trigger(events.TEARDOWN_COMPLETE);\n    } catch (error) {\n      eventBus.trigger(events.TEARDOWN_COMPLETE, {\n        error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message\n      });\n    }\n  }\n\n  function getKeySystem() {\n    return keySystem;\n  }\n\n  function getAllInitData() {\n    var retVal = [];\n\n    for (var i = 0; i < sessions.length; i++) {\n      retVal.push(sessions[i].initData);\n    }\n\n    return retVal;\n  }\n\n  function requestKeySystemAccess(ksConfigurations) {\n    // Try key systems in order, first one with supported key system configuration\n    // is used\n    var found = false;\n\n    for (var ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n      var systemString = ksConfigurations[ksIdx].ks.systemString;\n      var configs = ksConfigurations[ksIdx].configs;\n      var supportedAudio = null;\n      var supportedVideo = null; // Try key system configs in order, first one with supported audio/video\n      // is used\n\n      for (var configIdx = 0; configIdx < configs.length; configIdx++) {\n        var audios = configs[configIdx].audioCapabilities;\n        var videos = configs[configIdx].videoCapabilities; // Look for supported audio container/codecs\n\n        if (audios && audios.length !== 0) {\n          supportedAudio = []; // Indicates that we have a requested audio config\n\n          for (var audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n            if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n              supportedAudio.push(audios[audioIdx]);\n            }\n          }\n        } // Look for supported video container/codecs\n\n\n        if (videos && videos.length !== 0) {\n          supportedVideo = []; // Indicates that we have a requested video config\n\n          for (var videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n            if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n              supportedVideo.push(videos[videoIdx]);\n            }\n          }\n        } // No supported audio or video in this configuration OR we have\n        // requested audio or video configuration that is not supported\n\n\n        if (!supportedAudio && !supportedVideo || supportedAudio && supportedAudio.length === 0 || supportedVideo && supportedVideo.length === 0) {\n          continue;\n        } // This configuration is supported\n\n\n        found = true;\n        var ksConfig = new _KeySystemConfiguration2.default(supportedAudio, supportedVideo);\n        var ks = protectionKeyController.getKeySystemBySystemString(systemString);\n        eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {\n          data: new _KeySystemAccess2.default(ks, ksConfig)\n        });\n        break;\n      }\n    }\n\n    if (!found) {\n      eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, {\n        error: 'Key system access denied! -- No valid audio/video content configurations detected!'\n      });\n    }\n  }\n\n  function selectKeySystem(ksAccess) {\n    try {\n      mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n      keySystem = ksAccess.keySystem;\n      keySystemAccess = ksAccess;\n\n      if (videoElement) {\n        setMediaKeys();\n      }\n\n      eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n    } catch (error) {\n      eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, {\n        error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO'\n      });\n    }\n  }\n\n  function setMediaElement(mediaElement) {\n    if (videoElement === mediaElement) return; // Replacing the previous element\n\n    if (videoElement) {\n      videoElement.removeEventListener(api.needkey, eventHandler);\n    }\n\n    videoElement = mediaElement; // Only if we are not detaching from the existing element\n\n    if (videoElement) {\n      videoElement.addEventListener(api.needkey, eventHandler);\n\n      if (mediaKeys) {\n        setMediaKeys();\n      }\n    }\n  }\n\n  function createKeySession(initData, protData, sessionType, cdmData) {\n    if (!keySystem || !mediaKeys || !keySystemAccess) {\n      throw new Error('Can not create sessions until you have selected a key system');\n    } // Use the first video capability for the contentType.\n    // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n    // If player is trying to playback Audio only stream - don't error out.\n\n\n    var capabilities = null;\n\n    if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\n      capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n    }\n\n    if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\n      capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n    }\n\n    if (capabilities === null) {\n      throw new Error('Can not create sessions for unknown content types.');\n    }\n\n    var contentType = capabilities.contentType;\n    var session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n    var sessionToken = createSessionToken(session, initData); // Add all event listeners\n\n    session.addEventListener(api.error, sessionToken);\n    session.addEventListener(api.message, sessionToken);\n    session.addEventListener(api.ready, sessionToken);\n    session.addEventListener(api.close, sessionToken); // Add to our session list\n\n    sessions.push(sessionToken);\n    logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n    eventBus.trigger(events.KEY_SESSION_CREATED, {\n      data: sessionToken\n    });\n  }\n\n  function updateKeySession(sessionToken, message) {\n    var session = sessionToken.session;\n\n    if (!protectionKeyController.isClearKey(keySystem)) {\n      // Send our request to the key session\n      session.update(new Uint8Array(message));\n    } else {\n      // For clearkey, message is a ClearKeyKeySet\n      session.update(new Uint8Array(message.toJWK()));\n    }\n  }\n  /**\n  * Close the given session and release all associated keys.  Following\n  * this call, the sessionToken becomes invalid\n  *\n  * @param {Object} sessionToken - the session token\n  */\n\n\n  function closeKeySession(sessionToken) {\n    var session = sessionToken.session; // Remove event listeners\n\n    session.removeEventListener(api.error, sessionToken);\n    session.removeEventListener(api.message, sessionToken);\n    session.removeEventListener(api.ready, sessionToken);\n    session.removeEventListener(api.close, sessionToken); // Remove from our session list\n\n    for (var i = 0; i < sessions.length; i++) {\n      if (sessions[i] === sessionToken) {\n        sessions.splice(i, 1);\n        break;\n      }\n    } // Send our request to the key session\n\n\n    session[api.release]();\n  }\n\n  function setServerCertificate()\n  /*serverCertificate*/\n  {\n    /* Not supported */\n  }\n\n  function loadKeySession()\n  /*sessionID*/\n  {\n    /* Not supported */\n  }\n\n  function removeKeySession()\n  /*sessionToken*/\n  {\n    /* Not supported */\n  }\n\n  function createEventHandler() {\n    return {\n      handleEvent: function handleEvent(event) {\n        switch (event.type) {\n          case api.needkey:\n            if (event.initData) {\n              var initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n              eventBus.trigger(events.NEED_KEY, {\n                key: new _NeedKey2.default(initData, 'cenc')\n              });\n            }\n\n            break;\n        }\n      }\n    };\n  } // IE11 does not let you set MediaKeys until it has entered a certain\n  // readyState, so we need this logic to ensure we don't set the keys\n  // too early\n\n\n  function setMediaKeys() {\n    var boundDoSetKeys = null;\n\n    var doSetKeys = function doSetKeys() {\n      videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n      videoElement[api.setMediaKeys](mediaKeys);\n      eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n    };\n\n    if (videoElement.readyState >= 1) {\n      doSetKeys();\n    } else {\n      boundDoSetKeys = doSetKeys.bind(this);\n      videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n    }\n  } // Function to create our session token objects which manage the EME\n  // MediaKeySession and session-specific event handler\n\n\n  function createSessionToken(keySession, initData) {\n    return {\n      // Implements SessionToken\n      session: keySession,\n      initData: initData,\n      getSessionID: function getSessionID() {\n        return this.session.sessionId;\n      },\n      getExpirationTime: function getExpirationTime() {\n        return NaN;\n      },\n      getSessionType: function getSessionType() {\n        return 'temporary';\n      },\n      // This is our main event handler for all desired MediaKeySession events\n      // These events are translated into our API-independent versions of the\n      // same events\n      handleEvent: function handleEvent(event) {\n        switch (event.type) {\n          case api.error:\n            var errorStr = 'KeyError'; // TODO: Make better string from event\n\n            eventBus.trigger(events.KEY_ERROR, {\n              data: new _DashJSError2.default(_ProtectionErrors2.default.MEDIA_KEYERR_CODE, errorStr, this)\n            });\n            break;\n\n          case api.message:\n            var message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n            eventBus.trigger(events.INTERNAL_KEY_MESSAGE, {\n              data: new _KeyMessage2.default(this, message, event.destinationURL)\n            });\n            break;\n\n          case api.ready:\n            logger.debug('DRM: Key added.');\n            eventBus.trigger(events.KEY_ADDED);\n            break;\n\n          case api.close:\n            logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\n            eventBus.trigger(events.KEY_SESSION_CLOSED, {\n              data: this.getSessionID()\n            });\n            break;\n        }\n      }\n    };\n  }\n\n  instance = {\n    getAllInitData: getAllInitData,\n    requestKeySystemAccess: requestKeySystemAccess,\n    getKeySystem: getKeySystem,\n    selectKeySystem: selectKeySystem,\n    setMediaElement: setMediaElement,\n    createKeySession: createKeySession,\n    updateKeySession: updateKeySession,\n    closeKeySession: closeKeySession,\n    setServerCertificate: setServerCertificate,\n    loadKeySession: loadKeySession,\n    removeKeySession: removeKeySession,\n    stop: reset,\n    reset: reset\n  };\n  setup();\n  return instance;\n}\n/**\n* The copyright in this software is being made available under the BSD License,\n* included below. This software may be subject to other third party and contributor\n* rights, including patent rights, and no such rights are granted under this license.\n*\n* Copyright (c) 2013, Dash Industry Forum.\n* All rights reserved.\n*\n* Redistribution and use in source and binary forms, with or without modification,\n* are permitted provided that the following conditions are met:\n*  * Redistributions of source code must retain the above copyright notice, this\n*  list of conditions and the following disclaimer.\n*  * Redistributions in binary form must reproduce the above copyright notice,\n*  this list of conditions and the following disclaimer in the documentation and/or\n*  other materials provided with the distribution.\n*  * Neither the name of Dash Industry Forum nor the names of its\n*  contributors may be used to endorse or promote products derived from this software\n*  without specific prior written permission.\n*\n*  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n*  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n*  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n*  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n*  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n*  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n*  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n*  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n*  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n*  POSSIBILITY OF SUCH DAMAGE.\n*/\n\n/**\n* Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n*\n* Implemented by Internet Explorer 11 (Windows 8.1)\n*\n* @implements ProtectionModel\n* @class\n*/\n\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexports.default = dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014);\n/* jshint ignore:line */","map":{"version":3,"mappings":"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","names":["ProtectionModel_3Feb2014","config","context","eventBus","events","debug","api","instance","logger","videoElement","keySystem","mediaKeys","keySystemAccess","sessions","eventHandler","protectionKeyController","setup","getLogger","getInstance","createEventHandler","reset","i","length","closeKeySession","removeEventListener","needkey","trigger","TEARDOWN_COMPLETE","error","message","getKeySystem","getAllInitData","retVal","push","initData","requestKeySystemAccess","ksConfigurations","found","ksIdx","systemString","ks","configs","supportedAudio","supportedVideo","configIdx","audios","audioCapabilities","videos","videoCapabilities","audioIdx","window","MediaKeys","isTypeSupported","contentType","videoIdx","ksConfig","KeySystemConfiguration","getKeySystemBySystemString","KEY_SYSTEM_ACCESS_COMPLETE","data","KeySystemAccess","selectKeySystem","ksAccess","setMediaKeys","INTERNAL_KEY_SYSTEM_SELECTED","setMediaElement","mediaElement","addEventListener","createKeySession","protData","sessionType","cdmData","Error","capabilities","ksConfiguration","session","createSession","Uint8Array","sessionToken","createSessionToken","ready","close","getSessionID","KEY_SESSION_CREATED","updateKeySession","isClearKey","update","toJWK","splice","release","setServerCertificate","loadKeySession","removeKeySession","handleEvent","event","type","ArrayBuffer","isView","buffer","NEED_KEY","key","NeedKey","boundDoSetKeys","doSetKeys","VIDEO_ELEMENT_SELECTED","readyState","bind","keySession","sessionId","getExpirationTime","NaN","getSessionType","errorStr","KEY_ERROR","DashJSError","ProtectionErrors","MEDIA_KEYERR_CODE","INTERNAL_KEY_MESSAGE","KeyMessage","destinationURL","KEY_ADDED","KEY_SESSION_CLOSED","stop","__dashjs_factory_name","dashjs","FactoryMaker","getClassFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/protection/models/ProtectionModel_3Feb2014.js"],"sourcesContent":["/**\n * The copyright in this software is being made available under the BSD License,\n * included below. This software may be subject to other third party and contributor\n * rights, including patent rights, and no such rights are granted under this license.\n *\n * Copyright (c) 2013, Dash Industry Forum.\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modification,\n * are permitted provided that the following conditions are met:\n *  * Redistributions of source code must retain the above copyright notice, this\n *  list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright notice,\n *  this list of conditions and the following disclaimer in the documentation and/or\n *  other materials provided with the distribution.\n *  * Neither the name of Dash Industry Forum nor the names of its\n *  contributors may be used to endorse or promote products derived from this software\n *  without specific prior written permission.\n *\n *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS AS IS AND ANY\n *  EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n *  WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n *  IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,\n *  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n *  NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n *  PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n *  POSSIBILITY OF SUCH DAMAGE.\n */\n\n/**\n * Implementation of the EME APIs as of the 3 Feb 2014 state of the specification.\n *\n * Implemented by Internet Explorer 11 (Windows 8.1)\n *\n * @implements ProtectionModel\n * @class\n */\n\nimport ProtectionKeyController from '../controllers/ProtectionKeyController';\nimport NeedKey from '../vo/NeedKey';\nimport DashJSError from '../../vo/DashJSError';\nimport ProtectionErrors from '../errors/ProtectionErrors';\nimport KeyMessage from '../vo/KeyMessage';\nimport KeySystemConfiguration from '../vo/KeySystemConfiguration';\nimport KeySystemAccess from '../vo/KeySystemAccess';\n\nfunction ProtectionModel_3Feb2014(config) {\n\n    config = config || {};\n    const context = this.context;\n    const eventBus = config.eventBus;//Need to pass in here so we can use same instance since this is optional module\n    const events = config.events;\n    const debug = config.debug;\n    const api = config.api;\n\n    let instance,\n        logger,\n        videoElement,\n        keySystem,\n        mediaKeys,\n        keySystemAccess,\n        sessions,\n        eventHandler,\n        protectionKeyController;\n\n    function setup() {\n        logger = debug.getLogger(instance);\n        videoElement = null;\n        keySystem = null;\n        mediaKeys = null;\n        keySystemAccess = null;\n        sessions = [];\n        protectionKeyController = ProtectionKeyController(context).getInstance();\n        eventHandler = createEventHandler();\n    }\n\n    function reset() {\n        try {\n            for (let i = 0; i < sessions.length; i++) {\n                closeKeySession(sessions[i]);\n            }\n            if (videoElement) {\n                videoElement.removeEventListener(api.needkey, eventHandler);\n            }\n            eventBus.trigger(events.TEARDOWN_COMPLETE);\n        } catch (error) {\n            eventBus.trigger(events.TEARDOWN_COMPLETE, { error: 'Error tearing down key sessions and MediaKeys! -- ' + error.message });\n        }\n    }\n\n    function getKeySystem() {\n        return keySystem;\n    }\n\n    function getAllInitData() {\n        const retVal = [];\n        for (let i = 0; i < sessions.length; i++) {\n            retVal.push(sessions[i].initData);\n        }\n        return retVal;\n    }\n\n    function requestKeySystemAccess(ksConfigurations) {\n\n        // Try key systems in order, first one with supported key system configuration\n        // is used\n        let found = false;\n        for (let ksIdx = 0; ksIdx < ksConfigurations.length; ksIdx++) {\n            const systemString = ksConfigurations[ksIdx].ks.systemString;\n            const configs = ksConfigurations[ksIdx].configs;\n            let supportedAudio = null;\n            let supportedVideo = null;\n\n            // Try key system configs in order, first one with supported audio/video\n            // is used\n            for (let configIdx = 0; configIdx < configs.length; configIdx++) {\n                const audios = configs[configIdx].audioCapabilities;\n                const videos = configs[configIdx].videoCapabilities;\n\n                // Look for supported audio container/codecs\n                if (audios && audios.length !== 0) {\n                    supportedAudio = []; // Indicates that we have a requested audio config\n                    for (let audioIdx = 0; audioIdx < audios.length; audioIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, audios[audioIdx].contentType)) {\n                            supportedAudio.push(audios[audioIdx]);\n                        }\n                    }\n                }\n\n                // Look for supported video container/codecs\n                if (videos && videos.length !== 0) {\n                    supportedVideo = []; // Indicates that we have a requested video config\n                    for (let videoIdx = 0; videoIdx < videos.length; videoIdx++) {\n                        if (window[api.MediaKeys].isTypeSupported(systemString, videos[videoIdx].contentType)) {\n                            supportedVideo.push(videos[videoIdx]);\n                        }\n                    }\n                }\n\n                // No supported audio or video in this configuration OR we have\n                // requested audio or video configuration that is not supported\n                if ((!supportedAudio && !supportedVideo) ||\n                    (supportedAudio && supportedAudio.length === 0) ||\n                    (supportedVideo && supportedVideo.length === 0)) {\n                    continue;\n                }\n\n                // This configuration is supported\n                found = true;\n                const ksConfig = new KeySystemConfiguration(supportedAudio, supportedVideo);\n                const ks = protectionKeyController.getKeySystemBySystemString(systemString);\n                eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { data: new KeySystemAccess(ks, ksConfig) });\n                break;\n            }\n        }\n        if (!found) {\n            eventBus.trigger(events.KEY_SYSTEM_ACCESS_COMPLETE, { error: 'Key system access denied! -- No valid audio/video content configurations detected!' });\n        }\n    }\n\n    function selectKeySystem(ksAccess) {\n        try {\n            mediaKeys = ksAccess.mediaKeys = new window[api.MediaKeys](ksAccess.keySystem.systemString);\n            keySystem = ksAccess.keySystem;\n            keySystemAccess = ksAccess;\n            if (videoElement) {\n                setMediaKeys();\n            }\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED);\n        } catch (error) {\n            eventBus.trigger(events.INTERNAL_KEY_SYSTEM_SELECTED, { error: 'Error selecting keys system (' + keySystem.systemString + ')! Could not create MediaKeys -- TODO' });\n        }\n    }\n\n    function setMediaElement(mediaElement) {\n        if (videoElement === mediaElement)\n            return;\n\n        // Replacing the previous element\n        if (videoElement) {\n            videoElement.removeEventListener(api.needkey, eventHandler);\n        }\n\n        videoElement = mediaElement;\n\n        // Only if we are not detaching from the existing element\n        if (videoElement) {\n            videoElement.addEventListener(api.needkey, eventHandler);\n            if (mediaKeys) {\n                setMediaKeys();\n            }\n        }\n    }\n\n    function createKeySession(initData, protData, sessionType, cdmData) {\n        if (!keySystem || !mediaKeys || !keySystemAccess) {\n            throw new Error('Can not create sessions until you have selected a key system');\n        }\n\n        // Use the first video capability for the contentType.\n        // TODO:  Not sure if there is a way to concatenate all capability data into a RFC6386-compatible format\n\n        // If player is trying to playback Audio only stream - don't error out.\n        let capabilities = null;\n\n        if (keySystemAccess.ksConfiguration.videoCapabilities && keySystemAccess.ksConfiguration.videoCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.videoCapabilities[0];\n        }\n\n        if (capabilities === null && keySystemAccess.ksConfiguration.audioCapabilities && keySystemAccess.ksConfiguration.audioCapabilities.length > 0) {\n            capabilities = keySystemAccess.ksConfiguration.audioCapabilities[0];\n        }\n\n        if (capabilities === null) {\n            throw new Error('Can not create sessions for unknown content types.');\n        }\n\n        const contentType = capabilities.contentType;\n        const session = mediaKeys.createSession(contentType, new Uint8Array(initData), cdmData ? new Uint8Array(cdmData) : null);\n        const sessionToken = createSessionToken(session, initData);\n\n        // Add all event listeners\n        session.addEventListener(api.error, sessionToken);\n        session.addEventListener(api.message, sessionToken);\n        session.addEventListener(api.ready, sessionToken);\n        session.addEventListener(api.close, sessionToken);\n\n        // Add to our session list\n        sessions.push(sessionToken);\n        logger.debug('DRM: Session created.  SessionID = ' + sessionToken.getSessionID());\n        eventBus.trigger(events.KEY_SESSION_CREATED, { data: sessionToken });\n    }\n\n    function updateKeySession(sessionToken, message) {\n        const session = sessionToken.session;\n\n        if (!protectionKeyController.isClearKey(keySystem)) {\n            // Send our request to the key session\n            session.update(new Uint8Array(message));\n        } else {\n            // For clearkey, message is a ClearKeyKeySet\n            session.update(new Uint8Array(message.toJWK()));\n        }\n    }\n\n    /**\n     * Close the given session and release all associated keys.  Following\n     * this call, the sessionToken becomes invalid\n     *\n     * @param {Object} sessionToken - the session token\n     */\n    function closeKeySession(sessionToken) {\n        const session = sessionToken.session;\n\n        // Remove event listeners\n        session.removeEventListener(api.error, sessionToken);\n        session.removeEventListener(api.message, sessionToken);\n        session.removeEventListener(api.ready, sessionToken);\n        session.removeEventListener(api.close, sessionToken);\n\n        // Remove from our session list\n        for (let i = 0; i < sessions.length; i++) {\n            if (sessions[i] === sessionToken) {\n                sessions.splice(i, 1);\n                break;\n            }\n        }\n\n        // Send our request to the key session\n        session[api.release]();\n    }\n\n    function setServerCertificate(/*serverCertificate*/) { /* Not supported */ }\n    function loadKeySession(/*sessionID*/) { /* Not supported */ }\n    function removeKeySession(/*sessionToken*/) { /* Not supported */ }\n\n\n    function createEventHandler() {\n        return {\n            handleEvent: function (event) {\n                switch (event.type) {\n\n                    case api.needkey:\n                        if (event.initData) {\n                            const initData = ArrayBuffer.isView(event.initData) ? event.initData.buffer : event.initData;\n                            eventBus.trigger(events.NEED_KEY, { key: new NeedKey(initData, 'cenc') });\n                        }\n                        break;\n                }\n            }\n        };\n    }\n\n\n    // IE11 does not let you set MediaKeys until it has entered a certain\n    // readyState, so we need this logic to ensure we don't set the keys\n    // too early\n    function setMediaKeys() {\n        let boundDoSetKeys = null;\n        const doSetKeys = function () {\n            videoElement.removeEventListener('loadedmetadata', boundDoSetKeys);\n            videoElement[api.setMediaKeys](mediaKeys);\n            eventBus.trigger(events.VIDEO_ELEMENT_SELECTED);\n        };\n        if (videoElement.readyState >= 1) {\n            doSetKeys();\n        } else {\n            boundDoSetKeys = doSetKeys.bind(this);\n            videoElement.addEventListener('loadedmetadata', boundDoSetKeys);\n        }\n\n    }\n\n    // Function to create our session token objects which manage the EME\n    // MediaKeySession and session-specific event handler\n    function createSessionToken(keySession, initData) {\n        return {\n            // Implements SessionToken\n            session: keySession,\n            initData: initData,\n\n            getSessionID: function () {\n                return this.session.sessionId;\n            },\n\n            getExpirationTime: function () {\n                return NaN;\n            },\n\n            getSessionType: function () {\n                return 'temporary';\n            },\n            // This is our main event handler for all desired MediaKeySession events\n            // These events are translated into our API-independent versions of the\n            // same events\n            handleEvent: function (event) {\n                switch (event.type) {\n                    case api.error:\n                        let errorStr = 'KeyError'; // TODO: Make better string from event\n                        eventBus.trigger(events.KEY_ERROR, { data: new DashJSError(ProtectionErrors.MEDIA_KEYERR_CODE, errorStr, this) });\n                        break;\n                    case api.message:\n                        let message = ArrayBuffer.isView(event.message) ? event.message.buffer : event.message;\n                        eventBus.trigger(events.INTERNAL_KEY_MESSAGE, { data: new KeyMessage(this, message, event.destinationURL) });\n                        break;\n                    case api.ready:\n                        logger.debug('DRM: Key added.');\n                        eventBus.trigger(events.KEY_ADDED);\n                        break;\n\n                    case api.close:\n                        logger.debug('DRM: Session closed.  SessionID = ' + this.getSessionID());\n                        eventBus.trigger(events.KEY_SESSION_CLOSED, { data: this.getSessionID() });\n                        break;\n                }\n            }\n        };\n    }\n\n    instance = {\n        getAllInitData: getAllInitData,\n        requestKeySystemAccess: requestKeySystemAccess,\n        getKeySystem: getKeySystem,\n        selectKeySystem: selectKeySystem,\n        setMediaElement: setMediaElement,\n        createKeySession: createKeySession,\n        updateKeySession: updateKeySession,\n        closeKeySession: closeKeySession,\n        setServerCertificate: setServerCertificate,\n        loadKeySession: loadKeySession,\n        removeKeySession: removeKeySession,\n        stop: reset,\n        reset: reset\n    };\n\n    setup();\n\n    return instance;\n}\n\nProtectionModel_3Feb2014.__dashjs_factory_name = 'ProtectionModel_3Feb2014';\nexport default dashjs.FactoryMaker.getClassFactory(ProtectionModel_3Feb2014); /* jshint ignore:line */\n"]},"metadata":{},"sourceType":"script"}