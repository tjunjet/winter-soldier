{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _Metrics = require('../vo/Metrics');\n\nvar _Metrics2 = _interopRequireDefault(_Metrics);\n\nvar _Range = require('../vo/Range');\n\nvar _Range2 = _interopRequireDefault(_Range);\n\nvar _Reporting = require('../vo/Reporting');\n\nvar _Reporting2 = _interopRequireDefault(_Reporting);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ManifestParsing(config) {\n  config = config || {};\n  var instance = void 0;\n  var adapter = config.adapter;\n  var constants = config.constants;\n\n  function getMetricsRangeStartTime(manifest, dynamic, range) {\n    var voPeriods = void 0,\n        reportingStartTime = void 0;\n    var presentationStartTime = 0;\n\n    if (dynamic) {\n      // For services with MPD@type='dynamic', the start time is\n      // indicated in wall clock time by adding the value of this\n      // attribute to the value of the MPD@availabilityStartTime\n      // attribute.\n      presentationStartTime = adapter.getAvailabilityStartTime(manifest) / 1000;\n    } else {\n      // For services with MPD@type='static', the start time is indicated\n      // in Media Presentation time and is relative to the PeriodStart\n      // time of the first Period in this MPD.\n      voPeriods = adapter.getRegularPeriods(manifest);\n\n      if (voPeriods.length) {\n        presentationStartTime = voPeriods[0].start;\n      }\n    } // When not present, DASH Metrics collection is\n    // requested from the beginning of content\n    // consumption.\n\n\n    reportingStartTime = presentationStartTime;\n\n    if (range && range.hasOwnProperty(constants.START_TIME)) {\n      reportingStartTime += range.starttime;\n    }\n\n    return reportingStartTime;\n  }\n\n  function getMetrics(manifest) {\n    var metrics = [];\n\n    if (manifest && manifest.Metrics_asArray) {\n      manifest.Metrics_asArray.forEach(function (metric) {\n        var metricEntry = new _Metrics2.default();\n        var isDynamic = adapter.getIsDynamic(manifest);\n\n        if (metric.hasOwnProperty('metrics')) {\n          metricEntry.metrics = metric.metrics;\n        } else {\n          return;\n        }\n\n        if (metric.Range_asArray) {\n          metric.Range_asArray.forEach(function (range) {\n            var rangeEntry = new _Range2.default();\n            rangeEntry.starttime = getMetricsRangeStartTime(manifest, isDynamic, range);\n\n            if (range.hasOwnProperty('duration')) {\n              rangeEntry.duration = range.duration;\n            } else {\n              // if not present, the value is identical to the\n              // Media Presentation duration.\n              rangeEntry.duration = adapter.getDuration(manifest);\n            }\n\n            rangeEntry._useWallClockTime = isDynamic;\n            metricEntry.Range.push(rangeEntry);\n          });\n        }\n\n        if (metric.Reporting_asArray) {\n          metric.Reporting_asArray.forEach(function (reporting) {\n            var reportingEntry = new _Reporting2.default();\n\n            if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n              reportingEntry.schemeIdUri = reporting.schemeIdUri;\n            } else {\n              // Invalid Reporting. schemeIdUri must be set. Ignore.\n              return;\n            }\n\n            if (reporting.hasOwnProperty('value')) {\n              reportingEntry.value = reporting.value;\n            }\n\n            if (reporting.hasOwnProperty(constants.DVB_REPORTING_URL)) {\n              reportingEntry.dvb_reportingUrl = reporting[constants.DVB_REPORTING_URL];\n            }\n\n            if (reporting.hasOwnProperty(constants.DVB_PROBABILITY)) {\n              reportingEntry.dvb_probability = reporting[constants.DVB_PROBABILITY];\n            }\n\n            metricEntry.Reporting.push(reportingEntry);\n          });\n        } else {\n          // Invalid Metrics. At least one reporting must be present. Ignore\n          return;\n        }\n\n        metrics.push(metricEntry);\n      });\n    }\n\n    return metrics;\n  }\n\n  instance = {\n    getMetrics: getMetrics\n  };\n  return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexports.default = dashjs.FactoryMaker.getSingletonFactory(ManifestParsing);\n/* jshint ignore:line */","map":{"version":3,"mappings":"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","names":["ManifestParsing","config","instance","adapter","constants","getMetricsRangeStartTime","manifest","dynamic","range","voPeriods","reportingStartTime","presentationStartTime","getAvailabilityStartTime","getRegularPeriods","length","start","hasOwnProperty","START_TIME","starttime","getMetrics","metrics","Metrics_asArray","forEach","metricEntry","Metrics","isDynamic","getIsDynamic","metric","Range_asArray","rangeEntry","Range","duration","getDuration","_useWallClockTime","push","Reporting_asArray","reportingEntry","Reporting","reporting","SCHEME_ID_URI","schemeIdUri","value","DVB_REPORTING_URL","dvb_reportingUrl","DVB_PROBABILITY","dvb_probability","__dashjs_factory_name","dashjs","FactoryMaker","getSingletonFactory"],"sources":["/home/landsys/react-node-video-streaming/client/node_modules/dashjs/src/streaming/metrics/utils/ManifestParsing.js"],"sourcesContent":["import Metrics from '../vo/Metrics';\nimport Range from '../vo/Range';\nimport Reporting from '../vo/Reporting';\n\nfunction ManifestParsing (config) {\n    config = config || {};\n    let instance;\n    let adapter = config.adapter;\n    const constants = config.constants;\n\n    function getMetricsRangeStartTime(manifest, dynamic, range) {\n        let voPeriods,\n            reportingStartTime;\n        let presentationStartTime = 0;\n\n        if (dynamic) {\n            // For services with MPD@type='dynamic', the start time is\n            // indicated in wall clock time by adding the value of this\n            // attribute to the value of the MPD@availabilityStartTime\n            // attribute.\n            presentationStartTime = adapter.getAvailabilityStartTime(manifest) / 1000;\n        } else {\n            // For services with MPD@type='static', the start time is indicated\n            // in Media Presentation time and is relative to the PeriodStart\n            // time of the first Period in this MPD.\n            voPeriods = adapter.getRegularPeriods(manifest);\n\n            if (voPeriods.length) {\n                presentationStartTime = voPeriods[0].start;\n            }\n        }\n\n        // When not present, DASH Metrics collection is\n        // requested from the beginning of content\n        // consumption.\n        reportingStartTime = presentationStartTime;\n\n        if (range && range.hasOwnProperty(constants.START_TIME)) {\n            reportingStartTime += range.starttime;\n        }\n\n        return reportingStartTime;\n    }\n\n    function getMetrics(manifest) {\n        let metrics = [];\n\n        if (manifest && manifest.Metrics_asArray) {\n            manifest.Metrics_asArray.forEach(metric => {\n                var metricEntry = new Metrics();\n                var isDynamic = adapter.getIsDynamic(manifest);\n\n                if (metric.hasOwnProperty('metrics')) {\n                    metricEntry.metrics = metric.metrics;\n                } else {\n                    return;\n                }\n\n                if (metric.Range_asArray) {\n                    metric.Range_asArray.forEach(range => {\n                        var rangeEntry = new Range();\n\n                        rangeEntry.starttime =\n                            getMetricsRangeStartTime(manifest, isDynamic, range);\n\n                        if (range.hasOwnProperty('duration')) {\n                            rangeEntry.duration = range.duration;\n                        } else {\n                            // if not present, the value is identical to the\n                            // Media Presentation duration.\n                            rangeEntry.duration = adapter.getDuration(manifest);\n                        }\n\n                        rangeEntry._useWallClockTime = isDynamic;\n\n                        metricEntry.Range.push(rangeEntry);\n                    });\n                }\n\n                if (metric.Reporting_asArray) {\n                    metric.Reporting_asArray.forEach(reporting => {\n                        var reportingEntry = new Reporting();\n\n                        if (reporting.hasOwnProperty(constants.SCHEME_ID_URI)) {\n                            reportingEntry.schemeIdUri = reporting.schemeIdUri;\n                        } else {\n                            // Invalid Reporting. schemeIdUri must be set. Ignore.\n                            return;\n                        }\n\n                        if (reporting.hasOwnProperty('value')) {\n                            reportingEntry.value = reporting.value;\n                        }\n\n                        if (reporting.hasOwnProperty(constants.DVB_REPORTING_URL)) {\n                            reportingEntry.dvb_reportingUrl = reporting[constants.DVB_REPORTING_URL];\n                        }\n\n                        if (reporting.hasOwnProperty(constants.DVB_PROBABILITY)) {\n                            reportingEntry.dvb_probability = reporting[constants.DVB_PROBABILITY];\n                        }\n\n                        metricEntry.Reporting.push(reportingEntry);\n                    });\n                } else {\n                    // Invalid Metrics. At least one reporting must be present. Ignore\n                    return;\n                }\n\n                metrics.push(metricEntry);\n            });\n        }\n\n        return metrics;\n    }\n\n    instance = {\n        getMetrics: getMetrics\n    };\n\n    return instance;\n}\n\nManifestParsing.__dashjs_factory_name = 'ManifestParsing';\nexport default dashjs.FactoryMaker.getSingletonFactory(ManifestParsing); /* jshint ignore:line */"]},"metadata":{},"sourceType":"script"}